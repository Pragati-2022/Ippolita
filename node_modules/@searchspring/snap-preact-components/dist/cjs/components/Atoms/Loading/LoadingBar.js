"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingBar = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var providers_1 = require("../../../providers");
var CSS = {
    loadingBar: function (_a) {
        var _b, _c;
        var color = _a.color, height = _a.height, backgroundColor = _a.backgroundColor, theme = _a.theme, animation = _a.animation;
        return (0, react_1.css)({
            height: height,
            position: 'fixed',
            top: '0',
            left: '0',
            right: '0',
            margin: 'auto',
            transition: 'opacity 0.3s ease',
            opacity: '1',
            visibility: 'visible',
            zIndex: '10000',
            background: backgroundColor || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.secondary) || '#f8f8f8',
            '& .ss__loading-bar__bar': {
                position: 'absolute',
                top: '0',
                left: '-200px',
                height: '100%',
                background: "".concat(color || ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.primary) || '#ccc'),
                animation: "".concat(animation, " 2s linear infinite"),
            },
        });
    },
    animation: (0, react_1.keyframes)({
        from: { left: '-200px', width: '30%' },
        '50%': { width: '30%' },
        '70%': { width: '70%' },
        '80%': { left: '50%' },
        '95%': { left: '120%' },
        to: { left: '100%' },
    }),
};
function LoadingBar(properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({ 
        // default props
        height: '5px' }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.loadingbar), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.loadingbar);
    var active = props.active, color = props.color, backgroundColor = props.backgroundColor, height = props.height, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.loadingBar({ height: height, color: color, backgroundColor: backgroundColor, theme: theme, animation: CSS.animation }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return active ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__loading-bar', className) }),
            (0, react_1.jsx)("div", { className: "ss__loading-bar__bar" })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
}
exports.LoadingBar = LoadingBar;
