"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacetSlider = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var hooks_1 = require("preact/hooks");
var mobx_react_lite_1 = require("mobx-react-lite");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var react_ranger_1 = require("react-ranger");
var providers_1 = require("../../../providers");
var utilities_1 = require("../../../utilities");
var hooks_2 = require("../../../hooks");
var CSS = {
    facetSlider: function (_a) {
        var _b, _c, _d, _e;
        var railColor = _a.railColor, trackColor = _a.trackColor, handleColor = _a.handleColor, valueTextColor = _a.valueTextColor, handleDraggingColor = _a.handleDraggingColor, showTicks = _a.showTicks, stickyHandleLabel = _a.stickyHandleLabel, tickTextColor = _a.tickTextColor, theme = _a.theme;
        return (0, react_1.css)({
            display: 'flex',
            flexDirection: 'column',
            marginTop: '5px',
            marginBottom: showTicks && stickyHandleLabel ? '20px' : showTicks || stickyHandleLabel ? '10px' : '5px',
            '& .ss__facet-slider__slider': {
                position: 'relative',
                display: 'inline-block',
                height: '8px',
                width: 'calc(100% - 2rem)',
                margin: stickyHandleLabel ? '1rem' : '0 1rem',
                top: '10px',
            },
            '& .ss__facet-slider__tick': {
                '&:before': {
                    content: "''",
                    position: 'absolute',
                    left: '0',
                    background: 'rgba(0, 0, 0, 0.2)',
                    height: '5px',
                    width: '2px',
                    transform: 'translate(-50%, 0.7rem)',
                },
                '& .ss__facet-slider__tick__label': {
                    position: 'absolute',
                    fontSize: '0.6rem',
                    color: tickTextColor,
                    top: '100%',
                    transform: 'translate(-50%, 1.2rem)',
                    whiteSpace: 'nowrap',
                },
            },
            '& .ss__facet-slider__rail': {
                background: railColor || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary) || '#333',
                height: '100%',
            },
            '& .ss__facet-slider__segment': {
                background: trackColor || ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.secondary) || '#ccc',
                height: '100%',
            },
            '& .ss__facet-slider__handles': {
                textAlign: 'center',
                '& button': {
                    '& .ss__facet-slider__handle': {
                        background: handleColor || ((_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.primary) || '#333',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        width: '1.6rem',
                        height: '1.6rem',
                        borderRadius: '100%',
                        fontSize: '0.7rem',
                        whiteSpace: 'nowrap',
                        color: valueTextColor || 'initial',
                        fontWeight: 'normal',
                        transform: 'translateY(0) scale(0.9)',
                        transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                        position: 'relative',
                        cursor: 'pointer',
                        '&:after': {
                            backgroundColor: '#ffffff',
                            width: '30%',
                            height: '30%',
                            top: '0',
                            bottom: '0',
                            left: '0',
                            content: '""',
                            position: 'absolute',
                            right: '0',
                            borderRadius: '12px',
                            margin: 'auto',
                            cursor: 'pointer',
                        },
                        '&.ss__facet-slider__handle--active': {
                            background: handleDraggingColor || handleColor || ((_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.primary) || '#000',
                            '& label.ss__facet-slider__handle__label': {
                                background: '#fff',
                                padding: '0 5px',
                            },
                        },
                        '& label.ss__facet-slider__handle__label': {
                            display: 'inline-block',
                            marginTop: showTicks && !stickyHandleLabel ? '35px' : '20px',
                            '&.ss__facet-slider__handle__label--pinleft': {
                                left: '0px',
                            },
                            '&.ss__facet-slider__handle__label--pinright': {
                                right: '0px',
                            },
                            '&.ss__facet-slider__handle__label--sticky': {
                                position: 'absolute',
                                top: '-20px',
                                fontFamily: 'Roboto, Helvetica, Arial',
                                fontSize: '14px',
                                marginTop: '0px',
                            },
                        },
                    },
                },
            },
            '& .ss__facet-slider__labels': {
                textAlign: 'center',
                marginTop: showTicks && !stickyHandleLabel ? '40px' : '20px',
                color: valueTextColor,
                '& .ss__facet-slider__label--0': {
                    '&:after': {
                        content: '"-"',
                        padding: '5px',
                    },
                },
            },
        });
    },
};
exports.FacetSlider = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({ 
        // default props
        tickSize: ((_a = properties.facet) === null || _a === void 0 ? void 0 : _a.step) ? ((_b = properties.facet) === null || _b === void 0 ? void 0 : _b.step) * 10 : 20 }, (_c = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _c === void 0 ? void 0 : _c.facetSlider), properties), (_e = (_d = properties.theme) === null || _d === void 0 ? void 0 : _d.components) === null || _e === void 0 ? void 0 : _e.facetSlider);
    var tickTextColor = props.tickTextColor, trackColor = props.trackColor, valueTextColor = props.valueTextColor, railColor = props.railColor, handleColor = props.handleColor, handleDraggingColor = props.handleDraggingColor, showTicks = props.showTicks, facet = props.facet, stickyHandleLabel = props.stickyHandleLabel, onChange = props.onChange, onDrag = props.onDrag, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var tickSize = props.tickSize;
    if (isNaN(Number(tickSize)) || Number(tickSize) <= 0) {
        // fallback to default (causes chrome to crash)
        tickSize = ((_f = properties.facet) === null || _f === void 0 ? void 0 : _f.step) ? ((_g = properties.facet) === null || _g === void 0 ? void 0 : _g.step) * 10 : 20;
    }
    else {
        tickSize = Number(tickSize);
    }
    var _y = (0, hooks_1.useState)([(_h = facet.active) === null || _h === void 0 ? void 0 : _h.low, (_j = facet.active) === null || _j === void 0 ? void 0 : _j.high]), values = _y[0], setValues = _y[1];
    var _z = (0, hooks_1.useState)([(_k = facet.active) === null || _k === void 0 ? void 0 : _k.low, (_l = facet.active) === null || _l === void 0 ? void 0 : _l.high]), active = _z[0], setActive = _z[1];
    if (((((_m = facet.active) === null || _m === void 0 ? void 0 : _m.low) || ((_o = facet.active) === null || _o === void 0 ? void 0 : _o.low) === 0) && ((_p = facet.active) === null || _p === void 0 ? void 0 : _p.high) && values[0] != ((_q = facet.active) === null || _q === void 0 ? void 0 : _q.low)) || values[1] != ((_r = facet.active) === null || _r === void 0 ? void 0 : _r.high)) {
        setActive([(_s = facet.active) === null || _s === void 0 ? void 0 : _s.low, (_t = facet.active) === null || _t === void 0 ? void 0 : _t.high]);
        setValues([(_u = facet.active) === null || _u === void 0 ? void 0 : _u.low, (_v = facet.active) === null || _v === void 0 ? void 0 : _v.high]);
    }
    var _0 = (0, react_ranger_1.useRanger)({
        values: active,
        onChange: function (val) {
            var _a;
            setActive(val);
            if ((_a = facet === null || facet === void 0 ? void 0 : facet.services) === null || _a === void 0 ? void 0 : _a.urlManager) {
                if (val[0] == facet.range.low && val[1] == facet.range.high) {
                    facet.services.urlManager.remove('page').remove("filter.".concat(facet.field)).go();
                }
                else {
                    facet.services.urlManager.remove('page').set("filter.".concat(facet.field), { low: val[0], high: val[1] }).go();
                }
            }
            onChange && onChange(val);
        },
        onDrag: function (val) {
            setActive(val);
            onDrag && onDrag(val);
        },
        min: (_w = facet.range) === null || _w === void 0 ? void 0 : _w.low,
        max: (_x = facet.range) === null || _x === void 0 ? void 0 : _x.high,
        stepSize: facet.step,
        tickSize: tickSize,
    }), getTrackProps = _0.getTrackProps, ticks = _0.ticks, segments = _0.segments, handles = _0.handles;
    var styling = {};
    if (!disableStyles) {
        styling.css = [
            CSS.facetSlider({
                railColor: railColor,
                trackColor: trackColor,
                handleColor: handleColor,
                valueTextColor: valueTextColor,
                handleDraggingColor: handleDraggingColor,
                showTicks: showTicks,
                stickyHandleLabel: stickyHandleLabel,
                tickTextColor: tickTextColor,
                theme: theme,
            }),
            style,
        ];
    }
    else if (style) {
        styling.css = [style];
    }
    return facet.range && facet.active && facet.step ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({ className: (0, classnames_1.default)('ss__facet-slider', className) }, getTrackProps(), styling),
            (0, react_1.jsx)("div", { className: "ss__facet-slider__slider" },
                showTicks &&
                    ticks.map(function (_a) {
                        var value = _a.value, getTickProps = _a.getTickProps;
                        return ((0, react_1.jsx)("div", __assign({ className: "ss__facet-slider__tick" }, getTickProps()),
                            (0, react_1.jsx)("div", { className: "ss__facet-slider__tick__label" }, value)));
                    }),
                segments.map(function (_a, idx) {
                    var getSegmentProps = _a.getSegmentProps;
                    return ((0, react_1.jsx)("div", __assign({ className: "".concat(idx === 1 ? 'ss__facet-slider__rail' : 'ss__facet-slider__segment') }, getSegmentProps())));
                }),
                (0, react_1.jsx)("div", { className: 'ss__facet-slider__handles' }, handles.map(function (_a, idx) {
                    var _b, _c, _d, _e, _f, _g;
                    var value = _a.value, active = _a.active, getHandleProps = _a.getHandleProps;
                    return ((0, react_1.jsx)("button", __assign({ type: "button" }, getHandleProps({
                        style: {
                            appearance: 'none',
                            border: 'none',
                            background: 'transparent',
                            outline: 'none',
                        },
                    }), { "aria-label": "".concat(facet.label, " slider button"), "aria-valuetext": "".concat(facet.label, " slider button, current value ").concat(value, ", ").concat(((_b = facet.range) === null || _b === void 0 ? void 0 : _b.low) ? "min value ".concat((_c = facet.range) === null || _c === void 0 ? void 0 : _c.low, ",") : "", " ").concat(((_d = facet.range) === null || _d === void 0 ? void 0 : _d.high) ? "max value ".concat((_e = facet.range) === null || _e === void 0 ? void 0 : _e.high) : ""), ref: function (e) { return (0, hooks_2.useA11y)(e); } }),
                        (0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__facet-slider__handle', { 'ss__facet-slider__handle--active': active }) }, stickyHandleLabel && ((0, react_1.jsx)("label", { className: (0, classnames_1.default)('ss__facet-slider__handle__label', 'ss__facet-slider__handle__label--sticky', "ss__facet-slider__handle__label--".concat(idx), { 'ss__facet-slider__handle__label--pinleft': idx == 0 && value == ((_f = facet === null || facet === void 0 ? void 0 : facet.range) === null || _f === void 0 ? void 0 : _f.low) }, { 'ss__facet-slider__handle__label--pinright': idx == 1 && value == ((_g = facet === null || facet === void 0 ? void 0 : facet.range) === null || _g === void 0 ? void 0 : _g.high) }) }, (0, utilities_1.sprintf)(facet.formatValue, value))))));
                }))),
            !stickyHandleLabel && ((0, react_1.jsx)("div", { className: 'ss__facet-slider__labels' }, handles.map(function (_a, idx) {
                var value = _a.value;
                return ((0, react_1.jsx)("label", { className: (0, classnames_1.default)('ss__facet-slider__label', "ss__facet-slider__label--".concat(idx)) }, (0, utilities_1.sprintf)(facet.formatValue, value)));
            })))))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
