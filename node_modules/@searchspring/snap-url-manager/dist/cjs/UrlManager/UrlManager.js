"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlManager = void 0;
var seamless_immutable_1 = __importDefault(require("seamless-immutable"));
var WatcherPool = /** @class */ (function () {
    function WatcherPool() {
        this.callbacks = [];
        // nothing to do here
    }
    WatcherPool.prototype.subscribe = function (cb) {
        var _this = this;
        this.callbacks.push(cb);
        return function () { return (_this.callbacks = _this.callbacks.filter(function (_cb) { return _cb != cb; })); };
    };
    WatcherPool.prototype.notify = function () {
        this.callbacks.forEach(function (cb) { return cb(); });
    };
    return WatcherPool;
}());
var UrlManager = /** @class */ (function () {
    function UrlManager(translator, linker, globalState, localState, watcherPool, omissions, detached) {
        if (omissions === void 0) { omissions = []; }
        var _this = this;
        var _a;
        this.linker = linker;
        this.omissions = omissions;
        this.detached = detached;
        this.urlState = (0, seamless_immutable_1.default)({});
        this.globalState = (0, seamless_immutable_1.default)({});
        this.localState = (0, seamless_immutable_1.default)({});
        this.mergedState = (0, seamless_immutable_1.default)({});
        this.localState = (0, seamless_immutable_1.default)(localState || {});
        this.globalState = (0, seamless_immutable_1.default)(globalState || {});
        this.translator = translator;
        // set globals based on urlRoot of translator config when serializeUrlRoot is set
        var translatorConfig = this.getTranslatorConfig();
        if (translatorConfig.urlRoot && ((_a = translatorConfig.settings) === null || _a === void 0 ? void 0 : _a.serializeUrlRoot)) {
            this.globalState = this.globalState.merge((0, seamless_immutable_1.default)(this.translator.deserialize(translatorConfig.urlRoot)), {
                deep: true,
                merger: arrayConcatMerger,
            });
        }
        if (watcherPool) {
            this.watcherPool = watcherPool;
        }
        else {
            this.watcherPool = new WatcherPool();
            if (this.translator.bindExternalEvents instanceof Function) {
                this.translator.bindExternalEvents(function () { return _this.watcherPool.notify(); });
            }
        }
        this.subscribe(function () {
            _this.refresh();
        });
        this.refresh();
    }
    UrlManager.prototype.without = function (obj, fullPath, values) {
        // TODO: refactor - find way to remove updateNode function
        var path = fullPath.slice(0, -1);
        var lastKey = fullPath[fullPath.length - 1];
        if (!path.length) {
            if (!(values === null || values === void 0 ? void 0 : values.length)) {
                return obj.without(lastKey);
            }
            return updateNode(lastKey, obj);
        }
        if (!obj.getIn(path)) {
            return obj;
        }
        return obj.updateIn(path, function (node) {
            return updateNode(lastKey, node);
        });
        function updateNode(key, node) {
            if (node[lastKey] === undefined) {
                return node;
            }
            if (node[lastKey] instanceof Array) {
                if (!values || !values.length) {
                    return node.without(lastKey);
                }
                return node.set(lastKey, node[lastKey].filter(function (value) {
                    return !values.some(function (removeValue) {
                        return compareObjects(value, removeValue);
                    });
                }));
            }
            if (typeof node == 'object') {
                return node.without(lastKey);
            }
            return node;
        }
    };
    UrlManager.prototype.getTranslatorUrl = function () {
        if (this.detached) {
            return this.detached.url;
        }
        return this.translator.getCurrentUrl();
    };
    UrlManager.prototype.refresh = function () {
        var _this = this;
        this.prevState = this.mergedState;
        this.urlState = this.omissions.reduce(function (state, om) {
            return _this.without(state, om.path, om.values);
        }, (0, seamless_immutable_1.default)(this.translator.deserialize(this.getTranslatorUrl())));
        this.mergedState = this.globalState.merge(this.urlState, {
            deep: true,
            merger: arrayConcatMerger,
        });
        this.mergedState = this.mergedState.merge(this.localState, {
            deep: true,
            merger: arrayConcatMerger,
        });
    };
    Object.defineProperty(UrlManager.prototype, "state", {
        get: function () {
            return this.mergedState;
        },
        enumerable: false,
        configurable: true
    });
    UrlManager.prototype.unpackPathAndState = function (stateOrPath, _state) {
        var path = stateOrPath instanceof Array ? stateOrPath : typeof stateOrPath == 'string' ? stateOrPath.split('.') : [];
        var state = !(stateOrPath instanceof Array) && typeof stateOrPath == 'object' ? stateOrPath : _state === undefined ? {} : _state;
        return { path: path, state: state };
    };
    UrlManager.prototype.set = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = this.unpackPathAndState(args[0], args[1]), path = _a.path, state = _a.state;
        var newState = path.length ? this.localState.setIn(path, removeArrayDuplicates(state)) : removeArrayDuplicates(state);
        var omissions = removeArrayDuplicates(this.omissions.concat(path.length ? { path: path } : Object.keys(this.urlState).map(function (key) { return ({ path: [key] }); })));
        return new UrlManager(this.translator, this.linker, this.globalState, newState, this.watcherPool, omissions, this.detached);
    };
    UrlManager.prototype.merge = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = this.unpackPathAndState(args[0], args[1]), path = _a.path, state = _a.state;
        var newState = path.length
            ? this.localState.updateIn(path, function (oldState) {
                if (oldState instanceof Array) {
                    var newValues = Array.isArray(state) ? state : [state];
                    return removeArrayDuplicates(oldState.concat(newValues));
                }
                else if (typeof oldState == 'object') {
                    if (Array.isArray(state)) {
                        return state.length ? removeArrayDuplicates([oldState].concat(state)) : oldState;
                    }
                    else {
                        return oldState.merge(state, { deep: true, merger: arrayConcatMerger });
                    }
                }
                else if (typeof oldState != 'undefined') {
                    // not an object or array
                    var newValues = (Array.isArray(state) ? state : [state]).filter(function (value) { return !compareObjects(value, oldState); });
                    return newValues.length ? removeArrayDuplicates([oldState].concat(newValues)) : oldState;
                }
                else if (typeof oldState == 'undefined') {
                    var urlState = _this.urlState.getIn(path);
                    if (urlState instanceof Array && !Array.isArray(state)) {
                        return [state];
                    }
                }
                return state;
            })
            : this.localState.merge(state, { deep: true, merger: arrayConcatMerger });
        return new UrlManager(this.translator, this.linker, this.globalState, newState, this.watcherPool, this.omissions, this.detached);
    };
    UrlManager.prototype.remove = function (_path, values) {
        var path = this.unpackPathAndState(_path, {}).path;
        values = typeof values != 'undefined' ? (values instanceof Array ? values : [values]) : [];
        var without = this.without(this.localState, path, values);
        var omissions = removeArrayDuplicates(this.omissions.concat({ path: path, values: values }));
        return new UrlManager(this.translator, this.linker, this.globalState, without, this.watcherPool, omissions, this.detached);
    };
    UrlManager.prototype.reset = function () {
        // reset detached url
        if (this.detached) {
            this.detached.url = '';
        }
        return new UrlManager(this.translator, this.linker, this.globalState, {}, this.watcherPool, Object.keys(this.urlState).map(function (k) { return ({ path: [k] }); }), this.detached);
    };
    UrlManager.prototype.withConfig = function (config) {
        if (config instanceof Function) {
            config = config(this.translator.getConfig());
        }
        return new UrlManager(new (Object.getPrototypeOf(this.translator).constructor)(config), this.linker, this.globalState, this.localState, this.watcherPool, this.omissions, this.detached);
    };
    UrlManager.prototype.withGlobals = function (globals) {
        this.globalState = this.globalState.merge((0, seamless_immutable_1.default)(globals), {
            deep: true,
            merger: arrayConcatMerger,
        });
        return new UrlManager(this.translator, this.linker, this.globalState, this.localState, this.watcherPool, this.omissions, this.detached);
    };
    UrlManager.prototype.getTranslatorConfig = function () {
        return this.translator.getConfig();
    };
    Object.defineProperty(UrlManager.prototype, "href", {
        get: function () {
            return this.translator.serialize(this.state);
        },
        enumerable: false,
        configurable: true
    });
    UrlManager.prototype.go = function (config) {
        if (this.detached) {
            this.detached.url = this.href;
        }
        else {
            this.translator.go(this.href, config);
        }
        this.watcherPool.notify();
    };
    UrlManager.prototype.detach = function (reset) {
        if (reset === void 0) { reset = false; }
        return new UrlManager(this.translator, this.linker, this.globalState, this.localState, new WatcherPool(), this.omissions, {
            url: reset ? '' : this.getTranslatorUrl(),
        });
    };
    Object.defineProperty(UrlManager.prototype, "link", {
        get: function () {
            if (!this.linker) {
                return {};
            }
            return this.linker(this);
        },
        enumerable: false,
        configurable: true
    });
    UrlManager.prototype.subscribe = function (cb) {
        var _this = this;
        return this.watcherPool.subscribe(function () {
            var prevState = _this.prevState;
            var state = _this.mergedState;
            cb(prevState, state);
        });
    };
    return UrlManager;
}());
exports.UrlManager = UrlManager;
function removeArrayDuplicates(array) {
    if (Array.isArray(array) && array.length) {
        return array.reduce(function (accu, item) {
            if (!accu.some(function (keep) { return compareObjects(keep, item); })) {
                accu.push(item);
            }
            return accu;
        }, [array[0]]);
    }
    return array;
}
function arrayConcatMerger(current, other) {
    if (current instanceof Array && other instanceof Array) {
        return removeArrayDuplicates(__spreadArray(__spreadArray([], current, true), other, true));
    }
}
function compareObjects(obj1, obj2) {
    if (!obj1 && !obj2) {
        return true;
    }
    else if ((!obj1 && obj2) || (obj1 && !obj2)) {
        return false;
    }
    var primitives = ['string', 'number', 'boolean', 'undefined'];
    var typeA = typeof obj1;
    var typeB = typeof obj2;
    if (typeA !== typeB)
        return false;
    if (primitives.includes(typeA))
        return obj1 === obj2;
    var isArrayA = Array.isArray(obj1);
    var isArrayB = Array.isArray(obj2);
    if (isArrayA !== isArrayB) {
        return false;
    }
    if (isArrayA) {
        // compare arrays
        if (obj1.length != obj2.length)
            return false;
        for (var i = 0; i < obj1.length; i++) {
            if (!compareObjects(obj1[i], obj2[i])) {
                return false;
            }
        }
    }
    else {
        // compare object keys
        if (!compareObjects(Object.keys(obj1).sort(), Object.keys(obj2).sort())) {
            return false;
        }
        // compare object values
        var result_1 = true;
        Object.keys(obj1).forEach(function (key) {
            if (!compareObjects(obj1[key], obj2[key])) {
                result_1 = false;
            }
        });
        return result_1;
    }
    return true;
}
