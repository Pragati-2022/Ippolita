"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slideout = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var hooks_1 = require("preact/hooks");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var utilities_1 = require("../../../utilities");
var providers_1 = require("../../../providers");
var hooks_2 = require("../../../hooks");
var Overlay_1 = require("../../Atoms/Overlay");
var CSS = {
    slideout: function (_a) {
        var isActive = _a.isActive, width = _a.width, transitionSpeed = _a.transitionSpeed, slideDirection = _a.slideDirection;
        return (0, react_1.css)({
            display: 'block',
            position: 'fixed',
            transition: "".concat(slideDirection ? slideDirection : 'left', " ").concat(transitionSpeed),
            left: slideDirection == 'left' ? (isActive ? '0' : "-".concat(width)) : slideDirection != 'right' ? '0' : 'initial',
            right: slideDirection == 'right' ? (isActive ? '0' : "-".concat(width)) : 'initial',
            bottom: slideDirection == 'bottom' ? (isActive ? '0' : "-100vh") : 'initial',
            top: slideDirection == 'top' ? (isActive ? '0' : "-100vh") : slideDirection == 'bottom' ? 'initial' : '0',
            height: '100%',
            zIndex: '10004',
            width: (width === null || width === void 0 ? void 0 : width.endsWith('%')) && parseInt(width.split('%')[0]) > 90 ? width : '90%',
            maxWidth: width,
            padding: '10px',
            background: '#fff',
            boxSizing: 'border-box',
            overflowY: 'auto',
        });
    },
};
function Slideout(properties) {
    var _a, _b, _c, _d;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({ 
        // default props
        active: false, displayAt: '', slideDirection: 'left', width: '300px', buttonContent: 'click me', overlayColor: 'rgba(0,0,0,0.8)', transitionSpeed: '0.25s' }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.slideout), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.slideout);
    var children = props.children, active = props.active, buttonContent = props.buttonContent, noButtonWrapper = props.noButtonWrapper, width = props.width, displayAt = props.displayAt, transitionSpeed = props.transitionSpeed, overlayColor = props.overlayColor, slideDirection = props.slideDirection, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var subProps = {
        overlay: __assign(__assign(__assign({ 
            // default props
            className: 'ss__slideout__overlay' }, (_d = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _d === void 0 ? void 0 : _d.overlay), (0, utilities_1.defined)({
            disableStyles: disableStyles,
            color: overlayColor,
            transitionSpeed: transitionSpeed,
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
    };
    // state
    var _e = (0, hooks_1.useState)(Boolean(active)), isActive = _e[0], setActive = _e[1];
    var _f = (0, hooks_1.useState)(Boolean(active)), renderContent = _f[0], setRenderContent = _f[1];
    var toggleActive = function () {
        if (isActive) {
            setTimeout(function () {
                setRenderContent(!renderContent);
            }, 250);
        }
        else {
            setRenderContent(!isActive);
        }
        setActive(!isActive);
        document.body.style.overflow = isActive ? 'hidden' : '';
    };
    var isVisible = (0, hooks_2.useMediaQuery)(displayAt, function () {
        document.body.style.overflow = '';
    });
    document.body.style.overflow = isVisible && isActive ? 'hidden' : '';
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.slideout({ isActive: isActive, width: width, transitionSpeed: transitionSpeed, slideDirection: slideDirection }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return isVisible ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        buttonContent &&
            (noButtonWrapper ? ((0, utilities_1.cloneWithProps)(buttonContent, { toggleActive: toggleActive, active: isActive })) : ((0, react_1.jsx)("div", { className: "ss__slideout__button", onClick: function () { return toggleActive(); } }, (0, utilities_1.cloneWithProps)(buttonContent, { active: isActive })))),
        (0, react_1.jsx)("div", __assign({ className: (0, classnames_1.default)('ss__slideout', className, { 'ss__slideout--active': isActive }) }, styling), renderContent && (0, utilities_1.cloneWithProps)(children, { toggleActive: toggleActive, active: isActive })),
        (0, react_1.jsx)(Overlay_1.Overlay, __assign({}, subProps.overlay, { active: isActive, onClick: toggleActive })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
}
exports.Slideout = Slideout;
