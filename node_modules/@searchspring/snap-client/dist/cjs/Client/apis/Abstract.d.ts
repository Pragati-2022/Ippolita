import { AppMode } from '@searchspring/snap-toolbox';
import { NetworkCache } from '../NetworkCache/NetworkCache';
import { CacheConfig, HTTPHeaders, GenericGlobals } from '../../types';
export declare type Json = any;
export declare type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
export declare type HTTPQuery = {
    [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | HTTPQuery;
};
export declare type HTTPBody = Json | FormData | URLSearchParams;
export interface RequestOpts {
    path: string;
    method: HTTPMethod;
    headers: HTTPHeaders;
    query?: HTTPQuery;
    body?: HTTPBody;
}
export declare class API {
    configuration: ApiConfiguration;
    private retryDelay;
    private retryCount;
    cache: NetworkCache;
    constructor(configuration: ApiConfiguration);
    protected get mode(): AppMode;
    protected request(context: RequestOpts, cacheKey?: any): Promise<Response>;
    private createFetchParams;
    private fetchApi;
}
export declare type FetchAPI = WindowOrWorkerGlobalScope['fetch'];
export interface ApiConfigurationParameters {
    mode?: keyof typeof AppMode | AppMode;
    origin?: string;
    fetchApi?: FetchAPI;
    queryParamsStringify?: (params: HTTPQuery) => string;
    headers?: HTTPHeaders;
    maxRetry?: number;
    cache?: CacheConfig;
    globals?: GenericGlobals;
}
export declare class ApiConfiguration {
    private config;
    constructor(config?: ApiConfigurationParameters);
    get cache(): CacheConfig;
    get maxRetry(): number;
    get origin(): string;
    get fetchApi(): FetchAPI;
    get queryParamsStringify(): (params: HTTPQuery) => string;
    get headers(): HTTPHeaders;
    set headers(newHeaders: HTTPHeaders);
    get globals(): GenericGlobals;
    set globals(newGlobals: GenericGlobals);
    get mode(): AppMode;
}
export declare function querystring(params: HTTPQuery, prefix?: string): string;
//# sourceMappingURL=Abstract.d.ts.map