import type { ImmutableObject } from 'seamless-immutable';
import type { UrlState, Translator, TranslatorConfig } from '../../types';
declare type QueryParameter = {
    key: Array<string>;
    value: string;
};
export declare type QueryStringTranslatorConfig = Partial<QueryStringTranslatorConfigFull>;
declare type QueryStringTranslatorConfigFull = TranslatorConfig & {
    urlRoot: string;
    queryParameter: string;
};
export declare class QueryStringTranslator implements Translator {
    protected config: ImmutableObject<QueryStringTranslatorConfigFull>;
    constructor(config?: TranslatorConfig);
    bindExternalEvents(update: () => void): void;
    getCurrentUrl(): string;
    getConfig(): QueryStringTranslatorConfigFull;
    protected parseQueryString(queryString: string): Array<QueryParameter>;
    protected generateQueryString(params: Array<QueryParameter>): string;
    protected parsePage(queryParams: Array<QueryParameter>): UrlState;
    protected parseSort(queryParams: Array<QueryParameter>): UrlState;
    protected parseOther(queryParams: Array<QueryParameter>, except?: Array<string>): UrlState;
    protected parseQuery(queryParams: Array<QueryParameter>): UrlState;
    protected parseFilter(queryParams: Array<QueryParameter>): UrlState;
    protected encodePage(state: UrlState): Array<QueryParameter>;
    protected encodeOther(state: UrlState, except?: Array<string>): Array<QueryParameter>;
    protected encodeQuery(state: UrlState): Array<QueryParameter>;
    protected encodeSort(state: UrlState): Array<QueryParameter>;
    protected encodeFilter(state: UrlState): Array<QueryParameter>;
    protected queryParamsToState(queryParams: Array<QueryParameter>): UrlState;
    protected stateToQueryParams(state?: UrlState): Array<QueryParameter>;
    serialize(state: UrlState): string;
    deserialize(url: string): UrlState;
    go(url: string): void;
}
export {};
//# sourceMappingURL=QueryStringTranslator.d.ts.map