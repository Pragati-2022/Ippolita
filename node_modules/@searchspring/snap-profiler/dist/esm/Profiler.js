export class Profiler {
    constructor(namespace) {
        this.namespace = namespace || '';
        this.profiles = [];
    }
    setNamespace(namespace) {
        if (!this.namespace) {
            this.namespace = namespace;
        }
    }
    create({ type, name, context }) {
        if (!name) {
            throw new Error('Profile name is required.');
        }
        const profile = new Profile(this.namespace, { type, name, context });
        this.profiles.push(profile);
        return profile;
    }
}
class Profile {
    constructor(namespace, { type, name, context }) {
        this.status = 'pending';
        this.time = {
            date: 0,
            begin: 0,
            end: 0,
            run: 0,
        };
        this.namespace = namespace;
        this.type = type;
        this.name = name;
        this.context = context;
    }
    start() {
        if (!this.time.begin) {
            this.time.date = Date.now();
            this.time.begin = window.performance.now();
            this.status = 'started';
        }
        return this;
    }
    stop() {
        if (!this.time.end && this.time.begin) {
            this.time.date = Date.now();
            this.time.end = window.performance.now();
            this.time.run = +(this.time.end - this.time.begin).toFixed(3);
            this.status = 'finished';
        }
        return this;
    }
}
