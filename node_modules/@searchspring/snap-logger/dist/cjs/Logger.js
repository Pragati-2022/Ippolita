"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var colors_1 = require("./colors");
var emoji_1 = require("./emoji");
var Logger = /** @class */ (function () {
    function Logger(config) {
        this.mode = snap_toolbox_1.AppMode.production;
        this.emoji = emoji_1.emoji;
        this.colors = colors_1.colors;
        this.prefix = '';
        this.prefix = (config === null || config === void 0 ? void 0 : config.prefix) || '';
        this.mode = ((config === null || config === void 0 ? void 0 : config.mode) || snap_toolbox_1.AppMode.production);
    }
    Logger.prototype.setNamespace = function (group) {
        this.prefix = " [".concat(group, "] :: ");
    };
    Logger.prototype.error = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var text = '';
        var rest = params;
        if (params.length && typeof params[0] == 'string') {
            text = params[0], rest = params.slice(1);
        }
        console.log.apply(console, __spreadArray(["%c ".concat(emoji_1.emoji.bang, " %c").concat(this.prefix).concat(text), "color: ".concat(colors_1.colors.red, "; font-weight: bold; font-size: 14px; line-height: 12px;"), "color: ".concat(colors_1.colors.red, "; font-weight: bold;")], rest, false));
    };
    Logger.prototype.warn = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var text = '';
        var rest = params;
        if (params.length && typeof params[0] == 'string') {
            text = params[0], rest = params.slice(1);
        }
        console.log.apply(console, __spreadArray(["%c ".concat(emoji_1.emoji.warning, " %c").concat(this.prefix, "%c").concat(text), "color: ".concat(colors_1.colors.yellow, "; font-weight: bold; font-size: 14px; line-height: 12px;"), "color: ".concat(colors_1.colors.yellow, "; font-weight: normal;"), "color: ".concat(colors_1.colors.yellow, "; font-weight: bold;")], rest, false));
    };
    Logger.prototype.image = function (_a) {
        var url = _a.url, width = _a.width, height = _a.height;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        var styles = {
            size: "font-size: 1px; padding: ".concat(height || width, " ").concat(width || height, ";"),
            background: "background: url(\"".concat(url, "\") no-repeat; background-size: contain;"),
        };
        this.dev.apply(this, __spreadArray(["%c...", "".concat(styles.size, " ").concat(styles.background)], params, false));
    };
    Logger.prototype.imageText = function (_a) {
        var url = _a.url, _b = _a.text, text = _b === void 0 ? '' : _b, style = _a.style;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        var styles = {
            background: "margin-left: 6px; background: url(\"".concat(url, "\") no-repeat; background-size: contain;"),
            custom: style,
        };
        var imgText = text;
        var rest = params;
        if (!imgText && (params === null || params === void 0 ? void 0 : params.length)) {
            imgText = params[0], rest = params.slice(1);
        }
        this.dev.apply(this, __spreadArray(["%c ".concat('  ' + this.prefix).concat(imgText), "".concat(styles.background, " ").concat(styles.custom)], rest, false));
    };
    Logger.prototype.debug = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var text = '';
        var rest = params;
        if (params.length && typeof params[0] == 'string') {
            text = params[0], rest = params.slice(1);
        }
        this.dev.apply(this, __spreadArray(["%c ".concat(emoji_1.emoji.interobang, " %c").concat(this.prefix).concat(text), "color: ".concat(colors_1.colors.orangelight, "; font-weight: bold; font-size: 14px; line-height: 12px;"), "color: ".concat(colors_1.colors.orangelight, "; font-weight: bold;")], rest, false));
    };
    Logger.prototype.profile = function (profile) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.dev.apply(this, __spreadArray(["%c ".concat(emoji_1.emoji.gear, " %c").concat(this.prefix, "%c").concat(profile.type, "  %c~  ").concat(profile.name, "  ::  %c").concat(profile.status.toUpperCase()).concat(profile.status == 'finished' ? '  ::  %c' + profile.time.run + 'ms' : ''), "color: ".concat(colors_1.colors.orange, "; font-size: 14px; line-height: 12px;"), "color: ".concat(colors_1.colors.orange, ";"), "color: ".concat(colors_1.colors.orange, "; font-style: italic;"), "color: ".concat(colors_1.colors.orange, ";"), "color: ".concat(colors_1.colors.orange, "; font-weight: bold;"), "color: ".concat(colors_1.colors.grey, ";")], params, false));
    };
    Logger.prototype.dev = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        if (this.mode === snap_toolbox_1.AppMode.development) {
            console.log.apply(console, params);
        }
    };
    return Logger;
}());
exports.Logger = Logger;
