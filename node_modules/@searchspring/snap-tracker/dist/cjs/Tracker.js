"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tracker = exports.BATCH_TIMEOUT = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var uuid_1 = require("uuid");
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var snap_toolbox_2 = require("@searchspring/snap-toolbox");
var TrackEvent_1 = require("./TrackEvent");
var PixelEvent_1 = require("./PixelEvent");
var BeaconEvent_1 = require("./BeaconEvent");
var types_1 = require("./types");
exports.BATCH_TIMEOUT = 200;
var LEGACY_USERID_COOKIE_NAME = '_isuid';
var USERID_COOKIE_NAME = 'ssUserId';
var SHOPPERID_COOKIE_NAME = 'ssShopperId';
var COOKIE_EXPIRATION = 31536000000; // 1 year
var VIEWED_COOKIE_EXPIRATION = 220752000000; // 7 years
var COOKIE_SAMESITE = 'Lax';
var SESSIONID_STORAGE_NAME = 'ssSessionIdNamespace';
var LOCALSTORAGE_BEACON_POOL_NAME = 'ssBeaconPool';
var CART_PRODUCTS = 'ssCartProducts';
var VIEWED_PRODUCTS = 'ssViewedProducts';
var MAX_VIEWED_COUNT = 20;
var MAX_PARENT_LEVELS = 3;
var defaultConfig = {
    id: 'track',
    framework: 'snap',
    mode: snap_toolbox_2.AppMode.production,
};
var Tracker = /** @class */ (function () {
    function Tracker(globals, config) {
        var _this = this;
        var _a;
        this.mode = snap_toolbox_2.AppMode.production;
        this.targeters = [];
        this.track = {
            event: function (payload) {
                var event = {
                    type: (payload === null || payload === void 0 ? void 0 : payload.type) || types_1.BeaconType.CUSTOM,
                    category: (payload === null || payload === void 0 ? void 0 : payload.category) || types_1.BeaconCategory.CUSTOM,
                    context: (payload === null || payload === void 0 ? void 0 : payload.context) ? (0, deepmerge_1.default)(_this.context, payload.context) : _this.context,
                    event: payload.event,
                    pid: (payload === null || payload === void 0 ? void 0 : payload.pid) || undefined,
                };
                var beaconEvent = new BeaconEvent_1.BeaconEvent(event, _this.config);
                _this.sendEvents([beaconEvent]);
                return beaconEvent;
            },
            error: function (data, siteId) {
                var _a;
                if (!(data === null || data === void 0 ? void 0 : data.stack) && !(data === null || data === void 0 ? void 0 : data.message)) {
                    // no console log
                    return;
                }
                var context = _this.context;
                if (siteId) {
                    context = (0, deepmerge_1.default)(context, {
                        context: {
                            website: {
                                trackingCode: siteId,
                            },
                        },
                    });
                }
                var href = data.href, filename = data.filename, stack = data.stack, message = data.message, colno = data.colno, lineno = data.lineno, errortimestamp = data.errortimestamp, details = data.details;
                var payload = {
                    type: types_1.BeaconType.ERROR,
                    category: types_1.BeaconCategory.RUNTIME,
                    context: context,
                    event: {
                        href: href || window.location.href,
                        filename: filename,
                        stack: stack,
                        message: message,
                        colno: colno,
                        lineno: lineno,
                        errortimestamp: errortimestamp,
                        details: details,
                        context: data.context,
                    },
                };
                // prevent sending of errors when on localhost or CDN
                if (((_a = payload.event.message) === null || _a === void 0 ? void 0 : _a.includes('Profile is currently paused')) ||
                    !payload.event.href ||
                    payload.event.href.includes('//localhost') ||
                    payload.event.href.includes('//snapui.searchspring.io/')) {
                    return;
                }
                return _this.track.event(payload);
            },
            shopper: {
                login: function (data, siteId) {
                    // sets shopperid if logged in
                    if (!(0, snap_toolbox_1.getFlags)().cookies()) {
                        return;
                    }
                    if (!data.id) {
                        console.error('tracker.shopper.login event: requires a valid shopper ID parameter. Example: tracker.shopper.login({ id: "1234" })');
                        return;
                    }
                    data.id = "".concat(data.id);
                    var context = _this.context;
                    if (siteId) {
                        context = (0, deepmerge_1.default)(context, {
                            context: {
                                website: {
                                    trackingCode: siteId,
                                },
                            },
                        });
                        context.shopperId = data.id;
                    }
                    var storedShopperId = _this.getShopperId();
                    if (storedShopperId != data.id) {
                        // user's logged in id has changed, update shopperId cookie send login event
                        snap_toolbox_1.cookies.set(SHOPPERID_COOKIE_NAME, data.id, COOKIE_SAMESITE, COOKIE_EXPIRATION);
                        _this.context.shopperId = data.id;
                        _this.sendPreflight();
                        var payload = {
                            type: types_1.BeaconType.LOGIN,
                            category: types_1.BeaconCategory.PERSONALIZATION,
                            context: context,
                            event: {
                                userId: _this.context.userId,
                                shopperId: data.id,
                            },
                        };
                        return _this.track.event(payload);
                    }
                },
            },
            product: {
                view: function (data, siteId) {
                    if (!(data === null || data === void 0 ? void 0 : data.sku) && !(data === null || data === void 0 ? void 0 : data.childSku)) {
                        console.error('track.product.view event: requires a valid sku and/or childSku. \nExample: track.product.view({ sku: "product123", childSku: "product123_a" })');
                        return;
                    }
                    var context = _this.context;
                    if (siteId) {
                        context = (0, deepmerge_1.default)(context, {
                            context: {
                                website: {
                                    trackingCode: siteId,
                                },
                            },
                        });
                    }
                    var payload = {
                        type: types_1.BeaconType.PRODUCT,
                        category: types_1.BeaconCategory.PAGEVIEW,
                        context: context,
                        event: {
                            sku: (data === null || data === void 0 ? void 0 : data.sku) ? "".concat(data.sku) : undefined,
                            childSku: (data === null || data === void 0 ? void 0 : data.childSku) ? "".concat(data.childSku) : undefined,
                        },
                    };
                    // save recently viewed products to cookie
                    var sku = (data === null || data === void 0 ? void 0 : data.sku) || (data === null || data === void 0 ? void 0 : data.childSku);
                    if (sku) {
                        var lastViewedProducts = _this.cookies.viewed.get();
                        var uniqueCartItems = Array.from(new Set(__spreadArray(__spreadArray([], lastViewedProducts, true), [sku], false))).map(function (item) { return item.trim(); });
                        snap_toolbox_1.cookies.set(VIEWED_PRODUCTS, uniqueCartItems.slice(0, MAX_VIEWED_COUNT).join(','), COOKIE_SAMESITE, VIEWED_COOKIE_EXPIRATION);
                        if (!lastViewedProducts.includes(sku)) {
                            _this.sendPreflight();
                        }
                    }
                    // legacy tracking
                    if (data === null || data === void 0 ? void 0 : data.sku) {
                        // only send sku to pixel tracker if present (don't send childSku)
                        new PixelEvent_1.PixelEvent(__assign(__assign({}, payload), { event: {
                                sku: data.sku,
                            } }));
                    }
                    return _this.track.event(payload);
                },
                click: function (data, siteId) {
                    if (!(data === null || data === void 0 ? void 0 : data.intellisuggestData) || !(data === null || data === void 0 ? void 0 : data.intellisuggestSignature)) {
                        console.error("track.product.click event: object parameter requires a valid intellisuggestData and intellisuggestSignature. \nExample: track.click.product({ intellisuggestData: \"eJwrTs4tNM9jYCjKTM8oYXDWdQ3TDTfUDbIwMDVjMARCYwMQSi_KTAEA9IQKWA\", intellisuggestSignature: \"9e46f9fd3253c267fefc298704e39084a6f8b8e47abefdee57277996b77d8e70\" })");
                        return;
                    }
                    var context = _this.context;
                    if (siteId) {
                        context = (0, deepmerge_1.default)(context, {
                            context: {
                                website: {
                                    trackingCode: siteId,
                                },
                            },
                        });
                    }
                    var payload = {
                        type: types_1.BeaconType.CLICK,
                        category: types_1.BeaconCategory.INTERACTION,
                        context: context,
                        event: {
                            intellisuggestData: data.intellisuggestData,
                            intellisuggestSignature: data.intellisuggestSignature,
                            href: (data === null || data === void 0 ? void 0 : data.href) ? "".concat(data.href) : undefined,
                        },
                    };
                    // legacy tracking
                    new TrackEvent_1.TrackEvent(payload);
                    return _this.track.event(payload);
                },
            },
            cart: {
                view: function (data, siteId) {
                    if (!Array.isArray(data === null || data === void 0 ? void 0 : data.items) || !(data === null || data === void 0 ? void 0 : data.items.length)) {
                        console.error('track.view.cart event: parameter must be an array of cart items. \nExample: track.view.cart({ items: [{ sku: "product123", childSku: "product123_a", qty: "1", price: "9.99" }] })');
                        return;
                    }
                    var context = _this.context;
                    if (siteId) {
                        context = (0, deepmerge_1.default)(context, {
                            context: {
                                website: {
                                    trackingCode: siteId,
                                },
                            },
                        });
                    }
                    var items = data.items.map(function (item, index) {
                        if (!(item === null || item === void 0 ? void 0 : item.qty) || !(item === null || item === void 0 ? void 0 : item.price) || (!(item === null || item === void 0 ? void 0 : item.sku) && !(item === null || item === void 0 ? void 0 : item.childSku))) {
                            console.error("track.view.cart event: item ".concat(item, " at index ").concat(index, " requires a valid qty, price, and (sku and/or childSku.) \nExample: track.view.cart({ items: [{ sku: \"product123\", childSku: \"product123_a\", qty: \"1\", price: \"9.99\" }] })"));
                            return;
                        }
                        var product = {
                            qty: "".concat(item.qty),
                            price: "".concat(item.price),
                        };
                        if (item === null || item === void 0 ? void 0 : item.sku) {
                            product.sku = "".concat(item.sku);
                        }
                        if (item === null || item === void 0 ? void 0 : item.childSku) {
                            product.childSku = "".concat(item.childSku);
                        }
                        return product;
                    });
                    var payload = {
                        type: types_1.BeaconType.CART,
                        category: types_1.BeaconCategory.CARTVIEW,
                        context: context,
                        event: { items: items },
                    };
                    // save cart items to cookie
                    if (items.length) {
                        var products = items.map(function (item) { return (item === null || item === void 0 ? void 0 : item.sku) || (item === null || item === void 0 ? void 0 : item.childSku) || ''; }).filter(function (sku) { return sku; });
                        _this.cookies.cart.add(products);
                    }
                    // legacy tracking
                    new PixelEvent_1.PixelEvent(payload);
                    return _this.track.event(payload);
                },
            },
            order: {
                transaction: function (data, siteId) {
                    var _a, _b, _c, _d, _e;
                    if (!(data === null || data === void 0 ? void 0 : data.items) || !Array.isArray(data.items) || !data.items.length) {
                        console.error('track.order.transaction event: object parameter must contain `items` array of cart items. \nExample: order.transaction({ order: { id: "1001", total: "9.99", city: "Los Angeles", state: "CA", country: "US" }, items: [{ sku: "product123", childSku: "product123_a", qty: "1", price: "9.99" }] })');
                        return;
                    }
                    var context = _this.context;
                    if (siteId) {
                        context = (0, deepmerge_1.default)(context, {
                            context: {
                                website: {
                                    trackingCode: siteId,
                                },
                            },
                        });
                    }
                    var items = data.items.map(function (item, index) {
                        if (!(item === null || item === void 0 ? void 0 : item.qty) || !(item === null || item === void 0 ? void 0 : item.price) || (!(item === null || item === void 0 ? void 0 : item.sku) && !(item === null || item === void 0 ? void 0 : item.childSku))) {
                            console.error("track.order.transaction event: object parameter `items`: item ".concat(item, " at index ").concat(index, " requires a valid qty, price, and (sku and/or childSku.) \nExample: order.view({ items: [{ sku: \"product123\", childSku: \"product123_a\", qty: \"1\", price: \"9.99\" }] })"));
                            return;
                        }
                        var product = {
                            qty: "".concat(item.qty),
                            price: "".concat(item.price),
                        };
                        if (item === null || item === void 0 ? void 0 : item.sku) {
                            product.sku = "".concat(item.sku);
                        }
                        if (item === null || item === void 0 ? void 0 : item.childSku) {
                            product.childSku = "".concat(item.childSku);
                        }
                        return product;
                    });
                    var eventPayload = {
                        orderId: ((_a = data === null || data === void 0 ? void 0 : data.order) === null || _a === void 0 ? void 0 : _a.id) ? "".concat(data.order.id) : undefined,
                        total: ((_b = data === null || data === void 0 ? void 0 : data.order) === null || _b === void 0 ? void 0 : _b.total) ? "".concat(data.order.total) : undefined,
                        city: ((_c = data === null || data === void 0 ? void 0 : data.order) === null || _c === void 0 ? void 0 : _c.city) ? "".concat(data.order.city) : undefined,
                        state: ((_d = data === null || data === void 0 ? void 0 : data.order) === null || _d === void 0 ? void 0 : _d.state) ? "".concat(data.order.state) : undefined,
                        country: ((_e = data === null || data === void 0 ? void 0 : data.order) === null || _e === void 0 ? void 0 : _e.country) ? "".concat(data.order.country) : undefined,
                        items: items,
                    };
                    var payload = {
                        type: types_1.BeaconType.ORDER,
                        category: types_1.BeaconCategory.ORDERVIEW,
                        context: context,
                        event: eventPayload,
                    };
                    // clear cart items from cookie when order is placed
                    _this.cookies.cart.clear();
                    // legacy tracking
                    new PixelEvent_1.PixelEvent(payload);
                    return _this.track.event(payload);
                },
            },
        };
        this.updateContext = function (key, value) {
            if (value) {
                _this.context[key] = value;
            }
        };
        this.getUserId = function () {
            var userId;
            try {
                // use cookies if available, fallback to localstorage
                if ((0, snap_toolbox_1.getFlags)().cookies()) {
                    userId = snap_toolbox_1.cookies.get(LEGACY_USERID_COOKIE_NAME) || snap_toolbox_1.cookies.get(USERID_COOKIE_NAME) || (0, uuid_1.v4)();
                    snap_toolbox_1.cookies.set(USERID_COOKIE_NAME, userId, COOKIE_SAMESITE, COOKIE_EXPIRATION);
                    snap_toolbox_1.cookies.set(LEGACY_USERID_COOKIE_NAME, userId, COOKIE_SAMESITE, COOKIE_EXPIRATION);
                }
                else if ((0, snap_toolbox_1.getFlags)().storage()) {
                    userId = window.localStorage.getItem(USERID_COOKIE_NAME) || (0, uuid_1.v4)();
                    window.localStorage.setItem(USERID_COOKIE_NAME, userId);
                }
                else {
                    throw 'unsupported features';
                }
            }
            catch (e) {
                console.error('Failed to persist user id to cookie or local storage:', e);
            }
            return userId;
        };
        this.getSessionId = function () {
            var sessionId;
            if ((0, snap_toolbox_1.getFlags)().storage()) {
                try {
                    sessionId = window.sessionStorage.getItem(SESSIONID_STORAGE_NAME) || (0, uuid_1.v4)();
                    window.sessionStorage.setItem(SESSIONID_STORAGE_NAME, sessionId);
                    (0, snap_toolbox_1.getFlags)().cookies() && snap_toolbox_1.cookies.set(SESSIONID_STORAGE_NAME, sessionId, COOKIE_SAMESITE, 0); //session cookie
                }
                catch (e) {
                    console.error('Failed to persist session id to session storage:', e);
                }
            }
            else if ((0, snap_toolbox_1.getFlags)().cookies()) {
                // use cookies if sessionStorage is not enabled and only reset cookie if new session to keep expiration
                sessionId = snap_toolbox_1.cookies.get(SESSIONID_STORAGE_NAME);
                if (!sessionId) {
                    sessionId = (0, uuid_1.v4)();
                    snap_toolbox_1.cookies.set(SESSIONID_STORAGE_NAME, sessionId, COOKIE_SAMESITE, 0);
                }
            }
            return sessionId;
        };
        this.getShopperId = function () {
            var shopperId = snap_toolbox_1.cookies.get(SHOPPERID_COOKIE_NAME);
            if (!shopperId) {
                return;
            }
            return shopperId;
        };
        this.sendPreflight = function () {
            var _a, _b;
            var userId = _this.getUserId();
            var siteId = _this.context.website.trackingCode;
            var shopper = _this.getShopperId();
            var cart = _this.cookies.cart.get();
            var lastViewed = _this.cookies.viewed.get();
            if (userId && typeof userId == 'string' && siteId && (shopper || cart.length || lastViewed.length)) {
                var preflightParams = {
                    userId: userId,
                    siteId: siteId,
                };
                var queryStringParams = "?userId=".concat(encodeURIComponent(userId), "&siteId=").concat(encodeURIComponent(siteId));
                if (shopper) {
                    preflightParams.shopper = shopper;
                    queryStringParams += "&shopper=".concat(encodeURIComponent(shopper));
                }
                if (cart.length) {
                    preflightParams.cart = cart;
                    queryStringParams += cart.map(function (item) { return "&cart=".concat(encodeURIComponent(item)); }).join('');
                }
                if (lastViewed.length) {
                    preflightParams.lastViewed = lastViewed;
                    queryStringParams += lastViewed.map(function (item) { return "&lastViewed=".concat(encodeURIComponent(item)); }).join('');
                }
                var origin_1 = ((_b = (_a = _this.config.requesters) === null || _a === void 0 ? void 0 : _a.personalization) === null || _b === void 0 ? void 0 : _b.origin) || "https://".concat(siteId, ".a.searchspring.io");
                var endpoint = "".concat(origin_1, "/api/personalization/preflightCache");
                var xhr = new XMLHttpRequest();
                if ((0, snap_toolbox_1.charsParams)(preflightParams) > 1024) {
                    xhr.open('POST', endpoint);
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    xhr.send(JSON.stringify(preflightParams));
                }
                else {
                    xhr.open('GET', endpoint + queryStringParams);
                    xhr.send();
                }
            }
        };
        this.cookies = {
            cart: {
                get: function () {
                    var items = snap_toolbox_1.cookies.get(CART_PRODUCTS);
                    if (!items) {
                        return [];
                    }
                    return items.split(',');
                },
                set: function (items) {
                    if (items.length) {
                        var cartItems = items.map(function (item) { return item.trim(); });
                        var uniqueCartItems = Array.from(new Set(cartItems));
                        snap_toolbox_1.cookies.set(CART_PRODUCTS, uniqueCartItems.join(','), COOKIE_SAMESITE, 0);
                        var itemsHaveChanged = cartItems.filter(function (item) { return items.includes(item); }).length !== items.length;
                        if (itemsHaveChanged) {
                            _this.sendPreflight();
                        }
                    }
                },
                add: function (items) {
                    if (items.length) {
                        var currentCartItems = _this.cookies.cart.get();
                        var itemsToAdd_1 = items.map(function (item) { return item.trim(); });
                        var uniqueCartItems = Array.from(new Set(__spreadArray(__spreadArray([], currentCartItems, true), itemsToAdd_1, true)));
                        snap_toolbox_1.cookies.set(CART_PRODUCTS, uniqueCartItems.join(','), COOKIE_SAMESITE, 0);
                        var itemsHaveChanged = currentCartItems.filter(function (item) { return itemsToAdd_1.includes(item); }).length !== itemsToAdd_1.length;
                        if (itemsHaveChanged) {
                            _this.sendPreflight();
                        }
                    }
                },
                remove: function (items) {
                    if (items.length) {
                        var currentCartItems = _this.cookies.cart.get();
                        var itemsToRemove_1 = items.map(function (item) { return item.trim(); });
                        var updatedItems = currentCartItems.filter(function (item) { return !itemsToRemove_1.includes(item); });
                        snap_toolbox_1.cookies.set(CART_PRODUCTS, updatedItems.join(','), COOKIE_SAMESITE, 0);
                        var itemsHaveChanged = currentCartItems.length !== updatedItems.length;
                        if (itemsHaveChanged) {
                            _this.sendPreflight();
                        }
                    }
                },
                clear: function () {
                    if (_this.cookies.cart.get().length) {
                        snap_toolbox_1.cookies.unset(CART_PRODUCTS);
                        _this.sendPreflight();
                    }
                },
            },
            viewed: {
                get: function () {
                    var items = snap_toolbox_1.cookies.get(VIEWED_PRODUCTS);
                    if (!items) {
                        return [];
                    }
                    return items.split(',');
                },
            },
        };
        this.sendEvents = function (eventsToSend) {
            if (_this.mode !== snap_toolbox_2.AppMode.production) {
                return;
            }
            var savedEvents = JSON.parse(_this.localStorage.get(LOCALSTORAGE_BEACON_POOL_NAME) || '[]');
            if (eventsToSend) {
                var eventsClone_1 = [];
                savedEvents.forEach(function (_event, idx) {
                    // using Object.assign since we are not modifying nested properties
                    eventsClone_1.push(Object.assign({}, _event));
                    delete eventsClone_1[idx].id;
                    delete eventsClone_1[idx].pid;
                });
                var stringyEventsClone_1 = JSON.stringify(eventsClone_1);
                // de-dupe events
                eventsToSend.forEach(function (event, idx) {
                    var newEvent = Object.assign({}, event);
                    delete newEvent.id;
                    delete newEvent.pid;
                    if (stringyEventsClone_1.indexOf(JSON.stringify(newEvent)) == -1) {
                        savedEvents.push(__assign({}, eventsToSend[idx]));
                    }
                });
                // save the beacon pool with de-duped events
                _this.localStorage.set(LOCALSTORAGE_BEACON_POOL_NAME, JSON.stringify(savedEvents));
            }
            clearTimeout(_this.isSending);
            _this.isSending = window.setTimeout(function () {
                var _a, _b;
                if (savedEvents.length) {
                    var xhr = new XMLHttpRequest();
                    var origin_2 = ((_b = (_a = _this.config.requesters) === null || _a === void 0 ? void 0 : _a.beacon) === null || _b === void 0 ? void 0 : _b.origin) || 'https://beacon.searchspring.io';
                    xhr.open('POST', "".concat(origin_2, "/beacon"));
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    xhr.send(JSON.stringify(savedEvents.length == 1 ? savedEvents[0] : savedEvents));
                }
                _this.localStorage.set(LOCALSTORAGE_BEACON_POOL_NAME, JSON.stringify([]));
            }, exports.BATCH_TIMEOUT);
        };
        if (typeof globals != 'object' || typeof globals.siteId != 'string') {
            throw new Error("Invalid config passed to tracker. The \"siteId\" attribute must be provided.");
        }
        this.config = (0, deepmerge_1.default)(defaultConfig, config || {});
        if (Object.values(snap_toolbox_2.AppMode).includes(this.config.mode)) {
            this.mode = this.config.mode;
        }
        this.globals = globals;
        this.localStorage = new snap_store_mobx_1.StorageStore({
            type: snap_store_mobx_1.StorageType.LOCAL,
            key: "ss-".concat(this.config.id, "-").concat(this.globals.siteId, "-local"),
        });
        this.context = {
            userId: this.getUserId() || '',
            sessionId: this.getSessionId(),
            shopperId: this.getShopperId(),
            pageLoadId: (0, uuid_1.v4)(),
            website: {
                trackingCode: this.globals.siteId,
            },
        };
        if (!((_a = window.searchspring) === null || _a === void 0 ? void 0 : _a.tracker)) {
            window.searchspring = window.searchspring || {};
            window.searchspring.tracker = this;
            window.searchspring.version = snap_toolbox_1.version;
        }
        // since this is in the constructor, setTimeout is required for jest.spyOn
        setTimeout(function () {
            _this.targeters.push(new snap_toolbox_1.DomTargeter([{ selector: 'script[type^="searchspring/track/"]', emptyTarget: false }], function (target, elem) {
                var _a = (0, snap_toolbox_1.getContext)(['item', 'items', 'siteId', 'shopper', 'order', 'type'], elem), item = _a.item, items = _a.items, siteId = _a.siteId, shopper = _a.shopper, order = _a.order, type = _a.type;
                switch (type) {
                    case 'searchspring/track/shopper/login':
                        _this.track.shopper.login(shopper, siteId);
                        break;
                    case 'searchspring/track/product/view':
                        _this.track.product.view(item, siteId);
                        break;
                    case 'searchspring/track/cart/view':
                        _this.track.cart.view({ items: items }, siteId);
                        break;
                    case 'searchspring/track/order/transaction':
                        _this.track.order.transaction({ order: order, items: items }, siteId);
                        break;
                    default:
                        console.error("event '".concat(type, "' is not supported"));
                        break;
                }
            }));
        });
        document.addEventListener('click', function (event) {
            var updateRecsControllers = function () {
                if (window.searchspring.controller) {
                    Object.keys(window.searchspring.controller).forEach(function (name) {
                        var _a;
                        var controller = window.searchspring.controller[name];
                        if (controller.type === 'recommendation' && ((_a = controller.config) === null || _a === void 0 ? void 0 : _a.realtime)) {
                            controller.search();
                        }
                    });
                }
            };
            var getClickAttributes = function (event) {
                var attributeList = [
                    "ss-".concat(_this.config.id, "-cart-add"),
                    "ss-".concat(_this.config.id, "-cart-remove"),
                    "ss-".concat(_this.config.id, "-cart-clear"),
                    "ss-".concat(_this.config.id, "-cart-view"),
                    "ss-".concat(_this.config.id, "-intellisuggest"),
                    "ss-".concat(_this.config.id, "-intellisuggest-signature"),
                    "href",
                ];
                var attributes = {};
                var levels = 0;
                var elem = null;
                elem = event && event.target;
                while (Object.keys(attributes).length == 0 && elem !== null && levels <= MAX_PARENT_LEVELS) {
                    Object.values(elem.attributes).forEach(function (attr) {
                        var attrName = attr.nodeName;
                        if (attributeList.indexOf(attrName) != -1) {
                            attributes[attrName] = elem && elem.getAttribute(attrName);
                        }
                    });
                    elem = elem.parentElement;
                    levels++;
                }
                return attributes;
            };
            var attributes = getClickAttributes(event);
            if (attributes["ss-".concat(_this.config.id, "-cart-add")]) {
                // add skus to cart
                var skus = attributes["ss-".concat(_this.config.id, "-cart-add")].split(',');
                _this.cookies.cart.add(skus);
                updateRecsControllers();
            }
            else if (attributes["ss-".concat(_this.config.id, "-cart-remove")]) {
                // remove skus from cart
                var skus = attributes["ss-".concat(_this.config.id, "-cart-remove")].split(',');
                _this.cookies.cart.remove(skus);
                updateRecsControllers();
            }
            else if ("ss-".concat(_this.config.id, "-cart-clear") in attributes) {
                // clear all from cart
                _this.cookies.cart.clear();
                updateRecsControllers();
            }
            else if ("ss-".concat(_this.config.id, "-cart-view") in attributes) {
                // update recs
                updateRecsControllers();
            }
            else if (attributes["ss-".concat(_this.config.id, "-intellisuggest")] && attributes["ss-".concat(_this.config.id, "-intellisuggest-signature")]) {
                // product click
                var intellisuggestData = attributes["ss-".concat(_this.config.id, "-intellisuggest")];
                var intellisuggestSignature = attributes["ss-".concat(_this.config.id, "-intellisuggest-signature")];
                var href = attributes['href'];
                _this.track.product.click({
                    intellisuggestData: intellisuggestData,
                    intellisuggestSignature: intellisuggestSignature,
                    href: href,
                });
            }
        });
        this.sendEvents();
    }
    Tracker.prototype.getGlobals = function () {
        return JSON.parse(JSON.stringify(this.globals));
    };
    Tracker.prototype.getContext = function () {
        return JSON.parse(JSON.stringify(this.context));
    };
    Tracker.prototype.retarget = function () {
        this.targeters.forEach(function (target) {
            target.retarget();
        });
    };
    return Tracker;
}());
exports.Tracker = Tracker;
