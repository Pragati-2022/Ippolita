/** @jsx jsx */
import { Fragment } from 'preact';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import { useTheme, CacheProvider } from '../../../providers';
import { defined } from '../../../utilities';
import { Checkbox } from '../../Molecules/Checkbox/Checkbox';
import { createHoverProps } from '../../../toolbox';
const CSS = {
    list: ({ theme, hideCheckbox }) => css({
        '& .ss__facet-list-options__option': {
            display: 'flex',
            padding: '6px',
            textDecoration: 'none',
            alignItems: 'center',
            '&:hover': {
                cursor: 'pointer',
                background: theme?.colors?.hover,
            },
            '&.ss__facet-list-options__option--filtered': {
                fontWeight: 'bold',
                color: theme?.colors?.primary,
            },
            '& .ss__facet-list-options__option__value': {
                marginLeft: hideCheckbox ? '' : '8px',
                '& .ss__facet-list-options__option__value__count': {
                    fontSize: '0.8em',
                    marginLeft: '6px',
                },
            },
        },
    }),
};
export const FacetListOptions = observer((properties) => {
    const globalTheme = useTheme();
    const theme = { ...globalTheme, ...properties.theme };
    const props = {
        // default props
        // global theme
        ...globalTheme?.components?.facetListOptions,
        //props
        ...properties,
        ...properties.theme?.components?.facetListOptions,
    };
    const { values, hideCheckbox, hideCount, onClick, previewOnFocus, valueProps, facet, disableStyles, className, style } = props;
    const subProps = {
        checkbox: {
            // default props
            className: 'ss__facet-list-options__checkbox',
            // global theme
            ...globalTheme?.components?.checkbox,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
    };
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.list({ theme, hideCheckbox }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    const facetValues = values || facet?.values;
    return facetValues?.length ? (jsx(CacheProvider, null,
        jsx("div", { ...styling, className: classnames('ss__facet-list-options', className) }, facetValues.map((value) => (jsx("a", { className: classnames('ss__facet-list-options__option', { 'ss__facet-list-options__option--filtered': value.filtered }), "aria-label": value.filtered
                ? `remove selected filter ${facet?.label || ''} - ${value.label}`
                : facet?.label
                    ? `filter by ${facet?.label} - ${value.label}`
                    : `filter by ${value.label}`, href: value.url?.link?.href, ...valueProps, onClick: (e) => {
                value.url?.link?.onClick(e);
                onClick && onClick(e);
            }, ...(previewOnFocus ? createHoverProps(() => value?.preview && value.preview()) : {}) },
            !hideCheckbox && jsx(Checkbox, { ...subProps.checkbox, checked: value.filtered, disableA11y: true }),
            jsx("span", { className: "ss__facet-list-options__option__value" },
                value.label,
                !hideCount && value?.count > 0 && jsx("span", { className: "ss__facet-list-options__option__value__count" },
                    "(",
                    value.count,
                    ")")))))))) : (jsx(Fragment, null));
});
