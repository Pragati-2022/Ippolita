"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormattedNumber = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var classnames_1 = __importDefault(require("classnames"));
var providers_1 = require("../../../providers");
var CSS = {
    formattedNumber: function () { return (0, react_1.css)({}); },
};
function FormattedNumber(properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({ 
        // default props
        symbol: '', decimalPlaces: 3, padDecimalPlaces: true, thousandsSeparator: '', decimalSeparator: '.', symbolAfter: true }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.formattedNumber), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.formattedNumber);
    var value = props.value, symbol = props.symbol, decimalPlaces = props.decimalPlaces, padDecimalPlaces = props.padDecimalPlaces, thousandsSeparator = props.thousandsSeparator, decimalSeparator = props.decimalSeparator, symbolAfter = props.symbolAfter, disableStyles = props.disableStyles, className = props.className, style = props.style, raw = props.raw;
    var formattedNumber = snap_toolbox_1.filters.formatNumber(value, {
        symbol: symbol,
        decimalPlaces: decimalPlaces,
        padDecimalPlaces: padDecimalPlaces,
        thousandsSeparator: thousandsSeparator,
        decimalSeparator: decimalSeparator,
        symbolAfter: symbolAfter,
    });
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.formattedNumber(), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return raw ? ((0, react_1.jsx)(preact_1.Fragment, null, formattedNumber)) : ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("span", __assign({ className: (0, classnames_1.default)('ss__formatted-number', className) }, styling), formattedNumber)));
}
exports.FormattedNumber = FormattedNumber;
