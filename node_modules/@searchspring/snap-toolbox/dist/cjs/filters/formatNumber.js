"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatNumber = void 0;
function formatNumber(input, opts) {
    var options = __assign({ symbol: '', decimalPlaces: 3, padDecimalPlaces: true, thousandsSeparator: '', decimalSeparator: '.', symbolAfter: false }, opts);
    if (typeof input != 'number' || Number.isNaN(input)) {
        return;
    }
    // format based on options
    var split = truncateDecimals(input, options.decimalPlaces).split('.');
    split[0] = split[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + options.thousandsSeparator);
    if (options.decimalPlaces > 0 && options.padDecimalPlaces) {
        split[1] = (split[1] || '').padEnd(options.decimalPlaces, '0');
    }
    var output = split.join(options.decimalSeparator);
    // if symbol should go after
    if (options.symbolAfter) {
        output = output + options.symbol;
    }
    else {
        output = options.symbol + output;
    }
    return output;
}
exports.formatNumber = formatNumber;
function truncateDecimals(input, digits) {
    var numString = input.toString();
    var decimalPosition = numString.indexOf('.');
    var substrLength = decimalPosition == -1 ? numString.length : 1 + decimalPosition + (digits || -1);
    return numString.substr(0, substrLength);
}
