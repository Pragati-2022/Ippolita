"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinderSelectionStore = void 0;
var FinderSelectionStore = /** @class */ (function (_super) {
    __extends(FinderSelectionStore, _super);
    function FinderSelectionStore(config, services, _a) {
        var state = _a.state, facets = _a.facets, meta = _a.meta, loading = _a.loading, storage = _a.storage, selections = _a.selections;
        var _b;
        var selectedSelections = [];
        if (selections === null || selections === void 0 ? void 0 : selections.length) {
            config.fields.forEach(function (fieldObj) {
                var _a;
                var storedData = selections.find(function (selection) { return selection.facet.field === fieldObj.field; });
                if (storedData) {
                    var facet_1 = storedData.facet, selected = storedData.selected;
                    if (facet_1 === null || facet_1 === void 0 ? void 0 : facet_1.hierarchyDelimiter) {
                        // hierarchy
                        selections.forEach(function (selection, index) {
                            var _a, _b;
                            var levels = (fieldObj === null || fieldObj === void 0 ? void 0 : fieldObj.levels) || ((_a = facet_1 === null || facet_1 === void 0 ? void 0 : facet_1.values[(facet_1 === null || facet_1 === void 0 ? void 0 : facet_1.values.length) - 1]) === null || _a === void 0 ? void 0 : _a.value.split(facet_1.hierarchyDelimiter));
                            var levelConfig = { index: index, label: fieldObj.levels ? levels[index] : '', key: "ss-".concat(index) };
                            var storageKey = generateStorageKey(config.id, facet_1.field);
                            storage.set("".concat(storageKey, ".").concat(levelConfig.key, ".values"), selection.data);
                            storage.set("".concat(storageKey, ".").concat(levelConfig.key, ".selected"), selection.selected);
                            var selectionHierarchy = new SelectionHierarchy(services, config.id, state, facet_1, levelConfig, loading, storage);
                            if ((_b = config.persist) === null || _b === void 0 ? void 0 : _b.lockSelections) {
                                selectionHierarchy.disabled = true;
                            }
                            if (selection.selected) {
                                services.urlManager = services.urlManager.set("filter.".concat(selection.facet.field), selection.selected);
                            }
                            selectedSelections.push(selectionHierarchy);
                        });
                    }
                    else {
                        var selection = new Selection(services, config.id, state, facet_1, fieldObj, loading, storage);
                        selection.selected = selected;
                        selection.storage.set('selected', selected);
                        selection.data = facet_1.values;
                        if (selected) {
                            services.urlManager = services.urlManager.set("filter.".concat(facet_1.field), selected);
                        }
                        if ((_a = config.persist) === null || _a === void 0 ? void 0 : _a.lockSelections) {
                            selection.disabled = true;
                        }
                        selectedSelections.push(selection);
                    }
                }
            });
        }
        else if (facets && meta) {
            // re-order facets to match our config
            (config === null || config === void 0 ? void 0 : config.fields) &&
                facets.sort(function (a, b) {
                    var fields = config.fields.map(function (fieldConfig) { return fieldConfig.field; });
                    return fields.indexOf(a.field) - fields.indexOf(b.field);
                });
            (_b = config === null || config === void 0 ? void 0 : config.fields) === null || _b === void 0 ? void 0 : _b.forEach(function (fieldObj) {
                var _a, _b, _c, _d, _e;
                var facet = facets.filter(function (facet) { return facet.field == fieldObj.field; }).pop();
                facet = __assign(__assign({}, (((meta === null || meta === void 0 ? void 0 : meta.facets) && meta.facets[fieldObj.field]) || {})), facet);
                var isHierarchy = (facet === null || facet === void 0 ? void 0 : facet.display) === 'hierarchy';
                if (isHierarchy) {
                    // filter out history/current hierarchy values
                    var filtered = (_a = facet.values) === null || _a === void 0 ? void 0 : _a.filter(function (value) { return value.filtered; }).pop();
                    if (filtered) {
                        var filteredLevel_1 = (_b = filtered.value) === null || _b === void 0 ? void 0 : _b.split(facet === null || facet === void 0 ? void 0 : facet.hierarchyDelimiter).length;
                        facet.values = (_c = facet.values) === null || _c === void 0 ? void 0 : _c.filter(function (value, index) {
                            var _a;
                            return (value.value && value.value.split(facet === null || facet === void 0 ? void 0 : facet.hierarchyDelimiter).length > filteredLevel_1) || index == ((_a = facet.values) === null || _a === void 0 ? void 0 : _a.length) - 1;
                        });
                    }
                    var levels = (fieldObj === null || fieldObj === void 0 ? void 0 : fieldObj.levels) || ((facet === null || facet === void 0 ? void 0 : facet.values) && ((_e = facet === null || facet === void 0 ? void 0 : facet.values[((_d = facet === null || facet === void 0 ? void 0 : facet.values) === null || _d === void 0 ? void 0 : _d.length) - 1].value) === null || _e === void 0 ? void 0 : _e.split(facet.hierarchyDelimiter)));
                    levels === null || levels === void 0 ? void 0 : levels.map(function (level, index) {
                        var levelConfig = { index: index, label: fieldObj.levels ? level : '', key: "ss-".concat(index) };
                        selectedSelections.push(new SelectionHierarchy(services, config.id, state, facet, levelConfig, loading, storage));
                    });
                }
                else {
                    selectedSelections.push(new Selection(services, config.id, state, facet, fieldObj, loading, storage));
                }
            });
        }
        return _super.apply(this, selectedSelections) || this;
    }
    Object.defineProperty(FinderSelectionStore, Symbol.species, {
        get: function () {
            return Array;
        },
        enumerable: false,
        configurable: true
    });
    return FinderSelectionStore;
}(Array));
exports.FinderSelectionStore = FinderSelectionStore;
var SelectionBase = /** @class */ (function () {
    function SelectionBase(services, id, state, facet, selectionConfig, loading, storageStore) {
        this.filtered = false;
        this.collapsed = false;
        this.display = '';
        this.disabled = false;
        this.selected = '';
        this.custom = {};
        this.services = services;
        this.loading = loading;
        this.state = state;
        this.id = id;
        this.config = selectionConfig;
        // inherit all standard facet properties
        this.facet = facet;
        this.type = facet.type;
        this.field = facet.field;
        this.filtered = facet.filtered;
        this.collapsed = facet.collapsed;
        this.display = facet.display;
        this.label = facet.label;
        this.multiple = facet.multiple;
        // abstracted StorageStore
        this.storage = {
            key: generateStorageKey(this.id, this.field),
            get: function (key) {
                var path = this.key + (key ? ".".concat(key) : '');
                return storageStore.get(path);
            },
            set: function (key, value) {
                var path = this.key + (key ? ".".concat(key) : '');
                return storageStore.set(path, value);
            },
        };
    }
    Object.defineProperty(SelectionBase.prototype, "values", {
        get: function () {
            var values = __spreadArray([], (this.data || []), true);
            values.unshift({
                filtered: false,
                value: '',
                label: this.config.label || this.label,
            });
            return values;
        },
        enumerable: false,
        configurable: true
    });
    return SelectionBase;
}());
var Selection = /** @class */ (function (_super) {
    __extends(Selection, _super);
    function Selection(services, id, state, facet, config, loading, storageStore) {
        var _this = _super.call(this, services, id, state, facet, config, loading, storageStore) || this;
        _this.loading = loading;
        _this.storage.set('values', facet.values);
        var storageData = _this.storage.get();
        _this.data = storageData.values;
        // check if any dropdowns have been selected
        _this.disabled = !_this.values.length;
        _this.selected = _this.disabled ? '' : storageData.selected || '';
        return _this;
    }
    Selection.prototype.select = function (value) {
        if (value === void 0) { value = ''; }
        if (this.loading)
            return;
        this.selected = value;
        this.storage.set('selected', value);
        this.state.persisted = false;
        if (!value) {
            this.services.urlManager.remove("filter.".concat(this.field)).go();
        }
        else {
            this.services.urlManager.set("filter.".concat(this.field), value).go();
        }
    };
    return Selection;
}(SelectionBase));
var SelectionHierarchy = /** @class */ (function (_super) {
    __extends(SelectionHierarchy, _super);
    function SelectionHierarchy(services, id, state, facet, config, loading, storageStore) {
        var _this = this;
        var _a, _b, _c;
        _this = _super.call(this, services, id, state, facet, config, loading, storageStore) || this;
        // inherit additional facet properties
        _this.hierarchyDelimiter = facet.hierarchyDelimiter;
        var storageData = _this.storage.get();
        if (!storageData) {
            // nothing in storage - initial state for first dropdown
            _this.storage.set("".concat(_this.config.key, ".values"), facet.values);
            storageData = _this.storage.get();
        }
        else if ((_a = storageData[_this.config.key]) === null || _a === void 0 ? void 0 : _a.values) {
            // set selected from storage
            _this.selected = ((_b = storageData[_this.config.key]) === null || _b === void 0 ? void 0 : _b.selected) || '';
        }
        else {
            // value does not exist in storage
            var storedLevels_1 = _this.storage.get();
            var levels = Object.keys(storedLevels_1).map(function (a, index) { return "ss-".concat(index); });
            !levels.includes(_this.config.key) && levels.push(_this.config.key);
            var selectedLevels = Object.keys(storedLevels_1).filter(function (key) { return storedLevels_1[key].selected; });
            var lastSelected = selectedLevels[selectedLevels.length - 1];
            var labelIndex = levels.indexOf(_this.config.key);
            var lastSelectedIndex = levels.indexOf(lastSelected);
            if (lastSelectedIndex != -1 && labelIndex == lastSelectedIndex + 1) {
                _this.storage.set("".concat(_this.config.key, ".values"), facet.values);
            }
            else {
                _this.disabled = true;
            }
        }
        _this.data = ((_c = storageData[_this.config.key]) === null || _c === void 0 ? void 0 : _c.values) || [];
        return _this;
    }
    SelectionHierarchy.prototype.select = function (value) {
        var _this = this;
        if (value === void 0) { value = ''; }
        if (this.loading)
            return;
        this.selected = value;
        this.state.persisted = false;
        var selectedLevel = this.config.index;
        var storedLevels = this.storage.get();
        var keysToRemove = Object.keys(storedLevels).slice(selectedLevel);
        Object.keys(storedLevels)
            .reverse()
            .forEach(function (key) {
            if (key == _this.config.key) {
                _this.storage.set("".concat(key, ".selected"), value);
            }
            else if (keysToRemove.includes(key)) {
                _this.storage.set("".concat(key), {});
            }
            value = value || _this.storage.get("".concat(key, ".selected"));
        });
        if (!value) {
            this.services.urlManager.remove("filter.".concat(this.field)).go();
        }
        else {
            this.services.urlManager.set("filter.".concat(this.field), value).go();
        }
    };
    return SelectionHierarchy;
}(SelectionBase));
function generateStorageKey(id, field) {
    return "ss-finder-".concat(id, ".").concat(field);
}
