"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContext = void 0;
function getContext(evaluate, script) {
    var _a, _b, _c, _d;
    if (evaluate === void 0) { evaluate = []; }
    if (!script || typeof script === 'string') {
        var scripts = Array.from(document.querySelectorAll(script || 'script[id^=searchspring], script[src*="snapui.searchspring.io"]'));
        script = scripts
            .sort(function (a, b) {
            // order them by innerHTML (so that popped script has innerHTML)
            return a.innerHTML.length - b.innerHTML.length;
        })
            .pop();
    }
    if (!script || typeof script !== 'object' || script.tagName !== 'SCRIPT') {
        throw new Error('getContext: did not find a script tag');
    }
    var scriptElem = script;
    // check script type
    if (!((_a = scriptElem.getAttribute('type')) === null || _a === void 0 ? void 0 : _a.match(/^searchspring/i)) &&
        !((_b = scriptElem.id) === null || _b === void 0 ? void 0 : _b.match(/^searchspring/i)) &&
        !((_c = scriptElem.src) === null || _c === void 0 ? void 0 : _c.match(/\/\/snapui.searchspring.io/i))) {
        throw new Error('getContext: did not find a script from Snap CDN or with attribute (type, id) starting with "searchspring"');
    }
    if ((evaluate && !Array.isArray(evaluate)) || (evaluate && !evaluate.reduce(function (accu, name) { return accu && typeof name === 'string'; }, true))) {
        throw new Error('getContext: first parameter must be an array of strings');
    }
    var siteIdString = 'siteId';
    var attributeVariables = {};
    // grab element attributes and put into variables
    Object.values(scriptElem.attributes).map(function (attr) {
        var name = attr.nodeName;
        if (evaluate.includes(name)) {
            attributeVariables[name] = scriptElem.getAttribute(name);
        }
    });
    var scriptVariables = {};
    // evaluate text and put into variables
    evaluate === null || evaluate === void 0 ? void 0 : evaluate.forEach(function (name) {
        var fn = new Function("\n\t\t\tvar ".concat(evaluate.join(', '), ";\n\t\t\t").concat(scriptElem.innerHTML, "\n\t\t\treturn ").concat(name, ";\n\t\t"));
        scriptVariables[name] = fn();
    });
    var variables = __assign(__assign({}, removeUndefined(attributeVariables)), removeUndefined(scriptVariables));
    if (evaluate.includes(siteIdString)) {
        // if we didnt find a siteId in the context, lets grab the id from the src url.
        if (!variables[siteIdString]) {
            var siteId = (_d = script.getAttribute('src')) === null || _d === void 0 ? void 0 : _d.match(/.*snapui.searchspring.io\/([a-zA-Z0-9]{6})\//);
            if (siteId && siteId.length > 1) {
                variables.siteId = siteId[1];
            }
        }
    }
    return variables;
}
exports.getContext = getContext;
function removeUndefined(variables) {
    Object.keys(variables).forEach(function (key) {
        if (typeof variables[key] === 'undefined')
            delete variables[key];
    });
    return variables;
}
