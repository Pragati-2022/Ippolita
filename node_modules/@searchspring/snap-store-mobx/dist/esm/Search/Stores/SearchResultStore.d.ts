import type { StoreServices, StoreConfigs } from '../../types';
import type { SearchResponseModelResult, SearchResponseModelPagination, SearchResponseModelMerchandising, SearchResponseModelResultMappings, SearchResponseModelMerchandisingContentInline, SearchResponseModelMerchandisingContentConfig } from '@searchspring/snapi-types';
export declare class SearchResultStore extends Array<Product | Banner> {
    static get [Symbol.species](): ArrayConstructor;
    constructor(config: StoreConfigs, services: StoreServices, resultData?: SearchResponseModelResult[], paginationData?: SearchResponseModelPagination, merchData?: SearchResponseModelMerchandising);
}
export declare class Banner {
    type: string;
    id: string;
    attributes: Record<string, unknown>;
    mappings: SearchResponseModelResultMappings;
    custom: {};
    config: SearchResponseModelMerchandisingContentConfig;
    value: string;
    constructor(services: StoreServices, banner: SearchResponseModelMerchandisingContentInline);
}
export declare class Product {
    type: string;
    id: string;
    attributes: Record<string, unknown>;
    mappings: SearchResponseModelResultMappings;
    custom: {};
    children?: Array<Child>;
    constructor(services: StoreServices, result: SearchResponseModelResult);
}
declare class Child {
    type: string;
    id: string;
    attributes: Record<string, unknown>;
    custom: {};
    constructor(services: StoreServices, result: SearchResponseModelResult);
}
export {};
//# sourceMappingURL=SearchResultStore.d.ts.map