export class MiddlewareManager {
    constructor() {
        this.functions = [];
    }
    use(...func) {
        this.functions.push(...func);
    }
    remove(func) {
        const stringyFunc = func.toString();
        this.functions = this.functions.filter((fn) => {
            return func.name !== fn.name || fn.toString() != stringyFunc;
        });
    }
    clear() {
        this.functions = [];
    }
    async dispatch(context) {
        const cancelling = await runFunctionsWithAbortWrapper(context || {}, this.functions);
        if (cancelling == true) {
            throw new Error('cancelled');
        }
    }
}
async function runFunctionsWithAbortWrapper(context, functions) {
    let cancelled = false;
    await runFunctions(context, functions, (proceed) => {
        if (proceed === false)
            cancelled = true;
    });
    return cancelled;
}
async function runFunctions(context, functions, callback) {
    if (!functions.length) {
        return;
    }
    const func = functions[0];
    const proceed = await func(context, async () => {
        await runFunctions(context, functions.slice(1), callback);
    });
    callback(proceed);
}
