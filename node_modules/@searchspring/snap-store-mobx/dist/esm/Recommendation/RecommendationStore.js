import { makeObservable, observable } from 'mobx';
import { AbstractStore } from '../Abstract/AbstractStore';
import { SearchResultStore } from '../Search/Stores';
import { RecommendationProfileStore } from './Stores';
export class RecommendationStore extends AbstractStore {
    constructor(config, services) {
        super(config);
        this.loaded = false;
        if (typeof services != 'object' || typeof services.urlManager?.subscribe != 'function') {
            throw new Error(`Invalid service 'urlManager' passed to AutocompleteStore. Missing "subscribe" function.`);
        }
        this.services = services;
        this.reset();
        makeObservable(this, {
            profile: observable,
            results: observable,
        });
    }
    reset() {
        this.update();
    }
    update(data) {
        this.error = undefined;
        this.loaded = !!data?.profile;
        this.profile = new RecommendationProfileStore(this.services, data);
        this.results = new SearchResultStore(this.config, this.services, data?.results);
    }
}
