"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIntersection = void 0;
var hooks_1 = require("preact/hooks");
var useIntersection = function (ref, rootMargin, fireOnce) {
    if (rootMargin === void 0) { rootMargin = '0px'; }
    if (fireOnce === void 0) { fireOnce = false; }
    // State and setter for storing whether element is visible
    var _a = (0, hooks_1.useState)(false), isIntersecting = _a[0], setIntersecting = _a[1];
    (0, hooks_1.useEffect)(function () {
        var observer = new IntersectionObserver(function (_a) {
            var entry = _a[0];
            // Update our state when observer callback fires
            setIntersecting(entry.isIntersecting);
            if (fireOnce && entry.isIntersecting) {
                observer.unobserve(ref.current);
            }
        }, {
            rootMargin: rootMargin,
        });
        if (ref.current) {
            observer.observe(ref.current);
        }
        return function () {
            observer.unobserve(ref.current);
        };
    }, []); // Empty array ensures that effect is only run on mount and unmount
    return isIntersecting;
};
exports.useIntersection = useIntersection;
