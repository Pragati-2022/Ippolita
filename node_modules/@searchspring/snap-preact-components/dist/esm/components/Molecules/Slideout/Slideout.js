/** @jsx jsx */
import { Fragment } from 'preact';
import { useState } from 'preact/hooks';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { defined, cloneWithProps } from '../../../utilities';
import { useTheme, CacheProvider } from '../../../providers';
import { useMediaQuery } from '../../../hooks';
import { Overlay } from '../../Atoms/Overlay';
const CSS = {
    slideout: ({ isActive, width, transitionSpeed, slideDirection }) => css({
        display: 'block',
        position: 'fixed',
        transition: `${slideDirection ? slideDirection : 'left'} ${transitionSpeed}`,
        left: slideDirection == 'left' ? (isActive ? '0' : `-${width}`) : slideDirection != 'right' ? '0' : 'initial',
        right: slideDirection == 'right' ? (isActive ? '0' : `-${width}`) : 'initial',
        bottom: slideDirection == 'bottom' ? (isActive ? '0' : `-100vh`) : 'initial',
        top: slideDirection == 'top' ? (isActive ? '0' : `-100vh`) : slideDirection == 'bottom' ? 'initial' : '0',
        height: '100%',
        zIndex: '10004',
        width: width?.endsWith('%') && parseInt(width.split('%')[0]) > 90 ? width : '90%',
        maxWidth: width,
        padding: '10px',
        background: '#fff',
        boxSizing: 'border-box',
        overflowY: 'auto',
    }),
};
export function Slideout(properties) {
    const globalTheme = useTheme();
    const props = {
        // default props
        active: false,
        displayAt: '',
        slideDirection: 'left',
        width: '300px',
        buttonContent: 'click me',
        overlayColor: 'rgba(0,0,0,0.8)',
        transitionSpeed: '0.25s',
        // global theme
        ...globalTheme?.components?.slideout,
        // props
        ...properties,
        ...properties.theme?.components?.slideout,
    };
    const { children, active, buttonContent, noButtonWrapper, width, displayAt, transitionSpeed, overlayColor, slideDirection, disableStyles, className, style, } = props;
    const subProps = {
        overlay: {
            // default props
            className: 'ss__slideout__overlay',
            // global theme
            ...globalTheme?.components?.overlay,
            // inherited props
            ...defined({
                disableStyles,
                color: overlayColor,
                transitionSpeed,
            }),
            // component theme overrides
            theme: props?.theme,
        },
    };
    // state
    const [isActive, setActive] = useState(Boolean(active));
    const [renderContent, setRenderContent] = useState(Boolean(active));
    const toggleActive = () => {
        if (isActive) {
            setTimeout(() => {
                setRenderContent(!renderContent);
            }, 250);
        }
        else {
            setRenderContent(!isActive);
        }
        setActive(!isActive);
        document.body.style.overflow = isActive ? 'hidden' : '';
    };
    const isVisible = useMediaQuery(displayAt, () => {
        document.body.style.overflow = '';
    });
    document.body.style.overflow = isVisible && isActive ? 'hidden' : '';
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.slideout({ isActive, width, transitionSpeed, slideDirection }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return isVisible ? (jsx(CacheProvider, null,
        buttonContent &&
            (noButtonWrapper ? (cloneWithProps(buttonContent, { toggleActive, active: isActive })) : (jsx("div", { className: "ss__slideout__button", onClick: () => toggleActive() }, cloneWithProps(buttonContent, { active: isActive })))),
        jsx("div", { className: classnames('ss__slideout', className, { 'ss__slideout--active': isActive }), ...styling }, renderContent && cloneWithProps(children, { toggleActive, active: isActive })),
        jsx(Overlay, { ...subProps.overlay, active: isActive, onClick: toggleActive }))) : (jsx(Fragment, null));
}
