"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RangeFilter = exports.Filter = exports.SearchFilterStore = void 0;
var mobx_1 = require("mobx");
var SearchFilterStore = /** @class */ (function (_super) {
    __extends(SearchFilterStore, _super);
    function SearchFilterStore(services, filtersData, meta) {
        if (filtersData === void 0) { filtersData = []; }
        var filters = filtersData.map(function (filter) {
            var field = filter.field;
            var facetMeta = meta.facets && meta.facets[field];
            switch (filter.type) {
                case 'range':
                    var rangeFilter = filter;
                    return new RangeFilter(services, rangeFilter, facetMeta);
                case 'value':
                default:
                    var valueFilter = filter;
                    return new Filter(services, valueFilter, facetMeta);
            }
        });
        return _super.apply(this, filters) || this;
    }
    Object.defineProperty(SearchFilterStore, Symbol.species, {
        get: function () {
            return Array;
        },
        enumerable: false,
        configurable: true
    });
    return SearchFilterStore;
}(Array));
exports.SearchFilterStore = SearchFilterStore;
var Filter = /** @class */ (function () {
    function Filter(services, filter, meta) {
        var _a;
        this.facet = {
            field: filter.field,
            label: (meta === null || meta === void 0 ? void 0 : meta.label) || filter.field,
        };
        this.value = {
            value: filter.value,
            label: filter.label,
        };
        this.label = "".concat(this.facet.label, ": ").concat(this.value.label);
        this.url = (_a = services === null || services === void 0 ? void 0 : services.urlManager) === null || _a === void 0 ? void 0 : _a.remove('page').remove("filter.".concat(this.facet.field), this.value.value);
        (0, mobx_1.makeObservable)(this, {
            facet: mobx_1.observable,
            value: mobx_1.observable,
            label: mobx_1.observable,
        });
    }
    return Filter;
}());
exports.Filter = Filter;
var RangeFilter = /** @class */ (function () {
    function RangeFilter(services, filter, meta) {
        var _a, _b, _c, _d, _e;
        this.facet = {
            field: filter.field,
            label: (meta === null || meta === void 0 ? void 0 : meta.label) || filter.field,
        };
        this.value = {
            low: (_a = filter === null || filter === void 0 ? void 0 : filter.value) === null || _a === void 0 ? void 0 : _a.low,
            high: (_b = filter === null || filter === void 0 ? void 0 : filter.value) === null || _b === void 0 ? void 0 : _b.high,
            label: filter.label || "".concat((_c = filter === null || filter === void 0 ? void 0 : filter.value) === null || _c === void 0 ? void 0 : _c.low, " - ").concat((_d = filter === null || filter === void 0 ? void 0 : filter.value) === null || _d === void 0 ? void 0 : _d.high),
        };
        this.label = "".concat(this.facet.label, ": ").concat(this.value.label);
        this.url = (_e = services === null || services === void 0 ? void 0 : services.urlManager) === null || _e === void 0 ? void 0 : _e.remove('page').remove("filter.".concat(this.facet.field), { low: this.value.low, high: this.value.high });
        (0, mobx_1.makeObservable)(this, {
            facet: mobx_1.observable,
            value: mobx_1.observable,
            label: mobx_1.observable,
        });
    }
    return RangeFilter;
}());
exports.RangeFilter = RangeFilter;
