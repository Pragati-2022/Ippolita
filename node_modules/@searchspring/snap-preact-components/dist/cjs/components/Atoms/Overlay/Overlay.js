"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Overlay = void 0;
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var providers_1 = require("../../../providers");
var CSS = {
    overlay: function (_a) {
        var color = _a.color, transitionSpeed = _a.transitionSpeed;
        return (0, react_1.css)({
            transition: "background ".concat(transitionSpeed, " ease 0s, left 0s ease ").concat(transitionSpeed),
            position: 'fixed',
            zIndex: '10003',
            height: '100%',
            width: '100%',
            top: '0',
            left: '-100%',
            '&.ss__overlay--active': {
                transition: "background ".concat(transitionSpeed, " ease, left 0s ease"),
                background: color,
                left: '0',
            },
        });
    },
};
function Overlay(properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({ 
        // default props
        color: 'rgba(0,0,0,0.8)', transitionSpeed: '0.25s' }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.overlay), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.overlay);
    var active = props.active, color = props.color, transitionSpeed = props.transitionSpeed, onClick = props.onClick, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.overlay({ color: color, transitionSpeed: transitionSpeed }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({ onClick: function (e) { return onClick && active && onClick(e); }, className: (0, classnames_1.default)('ss__overlay', { 'ss__overlay--active': active }, className) }, styling))));
}
exports.Overlay = Overlay;
