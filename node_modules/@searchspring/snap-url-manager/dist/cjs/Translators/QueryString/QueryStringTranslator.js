"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryStringTranslator = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var seamless_immutable_1 = __importDefault(require("seamless-immutable"));
var types_1 = require("../../types");
var defaultConfig = {
    urlRoot: '',
    queryParameter: 'q',
    settings: {
        serializeUrlRoot: true,
    },
};
var QueryStringTranslator = /** @class */ (function () {
    function QueryStringTranslator(config) {
        if (config === void 0) { config = {}; }
        this.config = (0, seamless_immutable_1.default)((0, deepmerge_1.default)(defaultConfig, config));
    }
    QueryStringTranslator.prototype.bindExternalEvents = function (update) {
        window.addEventListener('popstate', update);
    };
    QueryStringTranslator.prototype.getCurrentUrl = function () {
        return location.search || '';
    };
    QueryStringTranslator.prototype.getConfig = function () {
        return this.config.asMutable();
    };
    QueryStringTranslator.prototype.parseQueryString = function (queryString) {
        var justQueryString = queryString.split('?').pop() || '';
        return justQueryString
            .split('&')
            .filter(function (v) { return v; })
            .map(function (kvPair) {
            var _a = kvPair.split('=').map(function (v) { return decodeURIComponent(v.replace(/\+/g, ' ')); }), key = _a[0], value = _a[1];
            return { key: key.split('.'), value: value };
        });
    };
    QueryStringTranslator.prototype.generateQueryString = function (params) {
        var root = this.config.urlRoot.includes('?')
            ? this.config.urlRoot.split('?')[0]
            : this.config.urlRoot.includes('#')
                ? this.config.urlRoot.split('#')[0]
                : this.config.urlRoot || window.location.pathname;
        var queryParamString = params.length
            ? '?' +
                params
                    .map(function (param) {
                    return encodeURIComponent(param.key.join('.')) + '=' + encodeURIComponent(param.value);
                })
                    .join('&')
            : '';
        return "".concat(root).concat(queryParamString);
    };
    QueryStringTranslator.prototype.parsePage = function (queryParams) {
        var pageParam = queryParams.find(function (param) { return param.key.length == 1 && param.key[0] == 'page'; });
        if (!pageParam) {
            return {};
        }
        var page = Number(pageParam.value);
        return !isNaN(page) && page > 1 ? { page: page } : {};
    };
    QueryStringTranslator.prototype.parseSort = function (queryParams) {
        var sortParams = queryParams.filter(function (param) { return param.key.length == 2 && param.key[0] == 'sort'; });
        if (!sortParams.length) {
            return {};
        }
        return {
            sort: sortParams.map(function (param) { return ({
                field: param.key[1],
                direction: param.value,
            }); }),
        };
    };
    QueryStringTranslator.prototype.parseOther = function (queryParams, except) {
        if (except === void 0) { except = []; }
        var state = {};
        queryParams
            .filter(function (param) { return except.indexOf(param.key[0]) == -1; })
            .forEach(function (param) {
            var path = param.key;
            var value = param.value;
            // eslint-disable-next-line prefer-const
            var node = state;
            path.forEach(function (key, i) {
                var isLast = i == path.length - 1;
                if (isLast) {
                    node[key] = node[key] || [];
                    node[key].push(value);
                }
                else {
                    node[key] = node[key] || {};
                    node = node[key];
                }
            });
        });
        return state;
    };
    QueryStringTranslator.prototype.parseQuery = function (queryParams) {
        var qParamKey = this.getConfig().queryParameter;
        var qParam = queryParams.find(function (param) { return param.key.length == 1 && param.key[0] == qParamKey; });
        return qParam ? { query: qParam.value } : {};
    };
    QueryStringTranslator.prototype.parseFilter = function (queryParams) {
        var valueFilterParams = queryParams.filter(function (p) { return p.key.length == 2 && p.key[0] == 'filter'; });
        var rangeFilterParams = queryParams.filter(function (p) { return p.key.length == 3 && p.key[0] == 'filter'; });
        var valueFilters = valueFilterParams.reduce(function (state, param) {
            var _a;
            var currentValue = (state.filter || {})[param.key[1]] || [];
            return {
                filter: __assign(__assign({}, state.filter), (_a = {}, _a[param.key[1]] = __spreadArray(__spreadArray([], (Array.isArray(currentValue) ? currentValue : [currentValue]), true), [param.value], false), _a)),
            };
        }, {});
        var rangeFilters = rangeFilterParams.reduce(function (state, param, index) {
            // ranges should come in pairs!
            // use index to build pairs, ignore non pairs
            // build set as encountered - only return full sets (low + high)
            var _a, _b;
            var newState = state;
            var nextRangeParam = rangeFilterParams[index + 1];
            if (index % 2 == 0 &&
                nextRangeParam &&
                nextRangeParam.key[1] == param.key[1] &&
                param.key[2] == types_1.RangeValueProperties.LOW &&
                nextRangeParam.key[2] == types_1.RangeValueProperties.HIGH) {
                var currentValue = (state.filter || {})[param.key[1]] || [];
                newState = {
                    filter: __assign(__assign({}, state.filter), (_a = {}, _a[param.key[1]] = __spreadArray(__spreadArray([], (Array.isArray(currentValue) ? currentValue : [currentValue]), true), [
                        (_b = {},
                            _b[types_1.RangeValueProperties.LOW] = +param.value || null,
                            _b[types_1.RangeValueProperties.HIGH] = +nextRangeParam.value || null,
                            _b),
                    ], false), _a)),
                };
            }
            return newState;
        }, {});
        return __assign({}, (valueFilters.filter || rangeFilters.filter
            ? {
                filter: __assign(__assign({}, valueFilters.filter), rangeFilters.filter),
            }
            : {}));
    };
    QueryStringTranslator.prototype.encodePage = function (state) {
        if (!state.page || state.page === 1) {
            return [];
        }
        return [{ key: ['page'], value: '' + state.page }];
    };
    QueryStringTranslator.prototype.encodeOther = function (state, except) {
        if (except === void 0) { except = []; }
        var params = [];
        var addRecursive = function (obj, currentPath) {
            Object.keys(obj).forEach(function (key) {
                if (currentPath.length == 0 && except.indexOf(key) != -1) {
                    return;
                }
                var value = obj[key];
                if (value instanceof Array) {
                    params = params.concat(value.map(function (v) {
                        return { key: __spreadArray(__spreadArray([], currentPath, true), [key], false), value: v };
                    }));
                }
                else if (typeof value == 'object') {
                    addRecursive(value, __spreadArray(__spreadArray([], currentPath, true), [key], false));
                }
                else {
                    params = params.concat([{ key: __spreadArray(__spreadArray([], currentPath, true), [key], false), value: value }]);
                }
            });
        };
        addRecursive(state, []);
        return params;
    };
    QueryStringTranslator.prototype.encodeQuery = function (state) {
        if (!state.query) {
            return [];
        }
        return [
            {
                key: [this.getConfig().queryParameter],
                value: state.query,
            },
        ];
    };
    QueryStringTranslator.prototype.encodeSort = function (state) {
        if (!state.sort) {
            return [];
        }
        return (state.sort instanceof Array ? state.sort : [state.sort]).map(function (sort) {
            return {
                key: ['sort', sort.field],
                value: sort.direction,
            };
        });
    };
    QueryStringTranslator.prototype.encodeFilter = function (state) {
        if (!state.filter) {
            return [];
        }
        return Object.keys(state.filter).flatMap(function (key) {
            if (!state.filter || !state.filter[key]) {
                return [];
            }
            var filter = state.filter[key];
            return (filter instanceof Array ? filter : [filter]).flatMap(function (value) {
                var _a, _b;
                if (typeof value == 'string' || typeof value == 'number' || typeof value == 'boolean') {
                    return [
                        {
                            key: ['filter', key],
                            value: '' + value,
                        },
                    ];
                }
                else if (typeof value == 'object' &&
                    typeof value[types_1.RangeValueProperties.LOW] != 'undefined' &&
                    typeof value[types_1.RangeValueProperties.HIGH] != 'undefined') {
                    return [
                        {
                            key: ['filter', key, types_1.RangeValueProperties.LOW],
                            value: '' + ((_a = value[types_1.RangeValueProperties.LOW]) !== null && _a !== void 0 ? _a : '*'),
                        },
                        {
                            key: ['filter', key, types_1.RangeValueProperties.HIGH],
                            value: '' + ((_b = value[types_1.RangeValueProperties.HIGH]) !== null && _b !== void 0 ? _b : '*'),
                        },
                    ];
                }
                return [];
            });
        });
    };
    QueryStringTranslator.prototype.queryParamsToState = function (queryParams) {
        // Todo: Special stage storage for sorts
        return __assign(__assign(__assign(__assign(__assign({}, this.parseQuery(queryParams)), this.parsePage(queryParams)), this.parseFilter(queryParams)), this.parseSort(queryParams)), this.parseOther(queryParams, ['page', this.getConfig().queryParameter, 'filter', 'sort']));
    };
    QueryStringTranslator.prototype.stateToQueryParams = function (state) {
        if (state === void 0) { state = {}; }
        return __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], this.encodeOther(state, ['page', 'query', 'filter', 'sort', this.getConfig().queryParameter]), true), this.encodeQuery(state), true), this.encodePage(state), true), this.encodeFilter(state), true), this.encodeSort(state), true);
    };
    QueryStringTranslator.prototype.serialize = function (state) {
        var queryParams = this.stateToQueryParams(state);
        return this.generateQueryString(queryParams);
    };
    QueryStringTranslator.prototype.deserialize = function (url) {
        var queryString = url.includes('?') ? (url.split('?').pop() || '').split('#').shift() || '' : '';
        var queryParams = this.parseQueryString(queryString);
        return this.queryParamsToState(queryParams);
    };
    QueryStringTranslator.prototype.go = function (url) {
        history.pushState(null, '', url);
    };
    return QueryStringTranslator;
}());
exports.QueryStringTranslator = QueryStringTranslator;
