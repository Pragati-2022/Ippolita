"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineBanner = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var providers_1 = require("../../../../providers");
var types_1 = require("../../../../types");
var CSS = {
    inlineBanner: function (_a) {
        var width = _a.width;
        return (0, react_1.css)({
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center',
            width: width,
            '&.ss__inline-banner--grid': {
                flexDirection: 'column',
            },
            '&.ss__inline-banner--list': {
                flexDirection: 'row',
                display: 'block',
                width: '100%',
            },
            '& iframe': {
                maxWidth: '100%',
            },
        });
    },
};
function InlineBanner(properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({ 
        // default props
        layout: types_1.Layout.GRID, width: 'auto' }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.inlineBanner), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.inlineBanner);
    var banner = props.banner, disableStyles = props.disableStyles, className = props.className, width = props.width, layout = props.layout, onClick = props.onClick, style = props.style;
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.inlineBanner({ width: width }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return banner && banner.value ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({ onClick: function (e) {
                onClick && onClick(e, banner);
            }, className: (0, classnames_1.default)('ss__inline-banner', "ss__inline-banner--".concat(layout), className) }, styling, { dangerouslySetInnerHTML: {
                __html: banner.value,
            } })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
}
exports.InlineBanner = InlineBanner;
