import { observable, makeObservable } from 'mobx';
export class AutocompleteQueryStore {
    constructor(services, autocomplete, search, config) {
        const observables = {};
        if (search?.query) {
            this.query = new Query(services.urlManager, search.query);
            observables.query = observable;
        }
        if (autocomplete?.correctedQuery) {
            if (config.settings?.integratedSpellCorrection) {
                this.correctedQuery = new Query(services.urlManager, autocomplete.correctedQuery);
                observables.correctedQuery = observable;
            }
            else if (autocomplete.query) {
                this.originalQuery = new Query(services.urlManager, autocomplete.query);
                observables.originalQuery = observable;
            }
        }
        makeObservable(this, observables);
    }
}
class Query {
    constructor(urlManager, query) {
        this.string = query;
        this.url = urlManager.set({ query: this.string });
        makeObservable(this, {
            string: observable,
        });
    }
}
