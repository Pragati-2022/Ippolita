"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchHistoryStore = void 0;
var StorageStore_1 = require("../../Storage/StorageStore");
var SearchQueryStore_1 = require("./SearchQueryStore");
var SearchHistoryStore = /** @class */ (function () {
    function SearchHistoryStore(config, services) {
        var _this = this;
        this.config = config;
        this.services = services;
        if (this.config.url) {
            this.services.urlManager = this.services.urlManager.withConfig(function (translatorConfig) {
                return __assign(__assign({}, translatorConfig), { urlRoot: _this.config.url });
            });
        }
        if (!Number.isInteger(this.config.max)) {
            this.config.max = 25;
        }
        this.storage = new StorageStore_1.StorageStore({
            type: StorageStore_1.StorageType.LOCAL,
            key: "ss-history".concat(this.config.siteId ? "-".concat(this.config.siteId) : ""),
        });
        // reset to zero to clear any potentially existing terms
        if (this.config.max === 0) {
            this.reset();
        }
        // trim history if the current queries are more than config max
        if (this.queries.length > this.config.max) {
            this.getStoredData().forEach(function (term, index) {
                if (index > _this.config.max - 1) {
                    _this.remove(term);
                }
            });
        }
    }
    Object.defineProperty(SearchHistoryStore.prototype, "queries", {
        get: function () {
            var _this = this;
            var queries = this.getStoredData();
            return queries.map(function (query) { return new SearchQueryStore_1.Query(_this.services, query); });
        },
        enumerable: false,
        configurable: true
    });
    SearchHistoryStore.prototype.save = function (term) {
        // adding term to array if max is not zero
        if (this.config.max) {
            var history_1 = this.getStoredData();
            // removing term if already present
            var index = history_1.indexOf(term);
            if (index != -1) {
                history_1.splice(index, 1);
            }
            history_1.unshift(term);
            if (history_1.length > this.config.max) {
                history_1.pop();
            }
            this.storage.set('history', JSON.stringify(history_1));
        }
    };
    SearchHistoryStore.prototype.remove = function (term) {
        var history = this.getStoredData();
        // removing term if already present
        var index = history.indexOf(term);
        if (index != -1) {
            history.splice(index, 1);
            this.storage.set('history', JSON.stringify(history));
        }
    };
    SearchHistoryStore.prototype.reset = function () {
        this.storage.clear();
    };
    SearchHistoryStore.prototype.getStoredData = function (limit) {
        var storedHistory = this.storage.get('history');
        if (storedHistory) {
            try {
                var history_2 = JSON.parse(storedHistory);
                if (Array.isArray(history_2)) {
                    if (limit && Number.isInteger(limit)) {
                        return history_2.slice(0, limit);
                    }
                    return history_2;
                }
            }
            catch (err) {
                // storage corrupted - resetting it
                this.reset();
            }
        }
        return [];
    };
    return SearchHistoryStore;
}());
exports.SearchHistoryStore = SearchHistoryStore;
