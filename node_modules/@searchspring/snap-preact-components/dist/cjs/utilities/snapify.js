"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapify = void 0;
var snap_controller_1 = require("@searchspring/snap-controller");
var snap_client_1 = require("@searchspring/snap-client");
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var snap_url_manager_1 = require("@searchspring/snap-url-manager");
var snap_event_manager_1 = require("@searchspring/snap-event-manager");
var snap_profiler_1 = require("@searchspring/snap-profiler");
var snap_logger_1 = require("@searchspring/snap-logger");
var snap_tracker_1 = require("@searchspring/snap-tracker");
var controllers = {};
var client = {
    globals: { siteId: '8uyt2m' },
};
var Snapify = /** @class */ (function () {
    function Snapify() {
    }
    Snapify.recommendation = function (config) {
        var _this = this;
        var id = config.id;
        if (controllers[id]) {
            return controllers[id];
        }
        var cntrlr = (controllers[id] = createRecommendationController({ client: client, controller: config }));
        cntrlr.on('afterStore', function (_a, next) {
            var controller = _a.controller;
            return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            controller.log.debug('controller', controller);
                            controller.log.debug('store', controller.store.toJSON());
                            return [4 /*yield*/, next()];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        cntrlr.init();
        return cntrlr;
    };
    Snapify.autocomplete = function (config) {
        var _this = this;
        var id = config.id;
        if (controllers[id]) {
            return controllers[id];
        }
        var cntrlr = (controllers[id] = createAutocompleteController({ client: client, controller: config }));
        cntrlr.on('afterStore', function (_a, next) {
            var controller = _a.controller;
            return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            controller.log.debug('controller', controller);
                            controller.log.debug('store', controller.store.toJSON());
                            return [4 /*yield*/, next()];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        cntrlr.init();
        return cntrlr;
    };
    Snapify.search = function (config) {
        var _this = this;
        var id = config.id;
        if (controllers[id]) {
            return controllers[id];
        }
        var cntrlr = (controllers[id] = createSearchController({ client: client, controller: config }));
        cntrlr.on('afterStore', function (_a, next) {
            var controller = _a.controller;
            return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            controller.log.debug('controller', controller);
                            controller.log.debug('store', controller.store.toJSON());
                            return [4 /*yield*/, next()];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        cntrlr.init();
        return cntrlr;
    };
    return Snapify;
}());
exports.Snapify = Snapify;
function createSearchController(config) {
    var urlManager = new snap_url_manager_1.UrlManager(new snap_url_manager_1.UrlTranslator(), snap_url_manager_1.reactLinker);
    var cntrlr = new snap_controller_1.SearchController(config.controller, {
        client: new snap_client_1.Client(config.client.globals, config.client.config),
        store: new snap_store_mobx_1.SearchStore(config.controller, { urlManager: urlManager }),
        urlManager: urlManager,
        eventManager: new snap_event_manager_1.EventManager(),
        profiler: new snap_profiler_1.Profiler(),
        logger: new snap_logger_1.Logger(),
        tracker: new snap_tracker_1.Tracker(config.client.globals),
    });
    return cntrlr;
}
function createRecommendationController(config) {
    var urlManager = new snap_url_manager_1.UrlManager(new snap_url_manager_1.UrlTranslator(), snap_url_manager_1.reactLinker).detach(true);
    var cntrlr = new snap_controller_1.RecommendationController(config.controller, {
        client: new snap_client_1.Client(config.client.globals, config.client.config),
        store: new snap_store_mobx_1.RecommendationStore(config.controller, { urlManager: urlManager }),
        urlManager: urlManager,
        eventManager: new snap_event_manager_1.EventManager(),
        profiler: new snap_profiler_1.Profiler(),
        logger: new snap_logger_1.Logger(),
        tracker: new snap_tracker_1.Tracker(config.client.globals),
    });
    return cntrlr;
}
function createAutocompleteController(config) {
    var urlManager = new snap_url_manager_1.UrlManager(new snap_url_manager_1.UrlTranslator(), snap_url_manager_1.reactLinker).detach();
    var cntrlr = new snap_controller_1.AutocompleteController(config.controller, {
        client: new snap_client_1.Client(config.client.globals, config.client.config),
        store: new snap_store_mobx_1.AutocompleteStore(config.controller, { urlManager: urlManager }),
        urlManager: urlManager,
        eventManager: new snap_event_manager_1.EventManager(),
        profiler: new snap_profiler_1.Profiler(),
        logger: new snap_logger_1.Logger(),
        tracker: new snap_tracker_1.Tracker(config.client.globals),
    });
    return cntrlr;
}
