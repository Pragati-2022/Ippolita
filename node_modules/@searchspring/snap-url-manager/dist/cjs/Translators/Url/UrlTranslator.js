"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlTranslator = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var types_1 = require("../../types");
var defaultConfig = {
    urlRoot: '',
    settings: {
        corePrefix: '',
        customType: types_1.ParamLocationType.query,
        serializeUrlRoot: true,
    },
    parameters: {
        core: {
            query: { name: 'q', type: types_1.ParamLocationType.query },
            oq: { name: 'oq', type: types_1.ParamLocationType.query },
            rq: { name: 'rq', type: types_1.ParamLocationType.query },
            tag: { name: 'tag', type: types_1.ParamLocationType.query },
            page: { name: 'page', type: types_1.ParamLocationType.query },
            pageSize: { name: 'pageSize', type: types_1.ParamLocationType.hash },
            sort: { name: 'sort', type: types_1.ParamLocationType.hash },
            filter: { name: 'filter', type: types_1.ParamLocationType.hash },
            fallbackQuery: { name: 'fallbackQuery', type: types_1.ParamLocationType.query },
        },
        custom: {},
    },
};
var CORE_FIELDS = ['query', 'oq', 'fallbackQuery', 'rq', 'tag', 'page', 'pageSize', 'sort', 'filter'];
var UrlTranslator = /** @class */ (function () {
    function UrlTranslator(config) {
        var _this = this;
        var _a;
        this.reverseMapping = {};
        this.config = (0, deepmerge_1.default)(defaultConfig, config || {});
        Object.keys(this.config.parameters.core).forEach(function (param) {
            var _a, _b, _c, _d, _e, _f;
            var coreParam = _this.config.parameters.core[param];
            // param prefix
            if (_this.config.settings.corePrefix) {
                coreParam.name = _this.config.settings.corePrefix + coreParam.name;
            }
            // global type override
            var paramType = (_a = _this.config.settings) === null || _a === void 0 ? void 0 : _a.coreType;
            if (paramType && Object.values(types_1.ParamLocationType).includes(paramType)) {
                if (((_b = config === null || config === void 0 ? void 0 : config.parameters) === null || _b === void 0 ? void 0 : _b.core) && ((_d = (_c = config.parameters) === null || _c === void 0 ? void 0 : _c.core[param]) === null || _d === void 0 ? void 0 : _d.type)) {
                    coreParam.type = (_f = (_e = config.parameters) === null || _e === void 0 ? void 0 : _e.core[param]) === null || _f === void 0 ? void 0 : _f.type;
                }
                else {
                    coreParam.type = paramType;
                }
            }
            // create reverse mapping for quick lookup later
            _this.reverseMapping[coreParam.name] = param;
        });
        var implicit = (_a = this.config.settings) === null || _a === void 0 ? void 0 : _a.customType;
        if (implicit && !Object.values(types_1.ParamLocationType).includes(implicit)) {
            // invalid type specified - falling back to hash as implicit type
            this.config.settings.customType = types_1.ParamLocationType.hash;
        }
    }
    UrlTranslator.prototype.bindExternalEvents = function (update) {
        window.addEventListener('popstate', update);
    };
    UrlTranslator.prototype.getCurrentUrl = function () {
        return window.location.search + window.location.hash;
    };
    UrlTranslator.prototype.getConfig = function () {
        return (0, deepmerge_1.default)({}, this.config);
    };
    UrlTranslator.prototype.deserialize = function (url) {
        var params = this.parseUrlParams(url);
        return this.paramsToState(params);
    };
    UrlTranslator.prototype.parseUrlParams = function (url) {
        var queryString = url.includes('?') ? (url.split('?').pop() || '').split('#').shift() || '' : '';
        var hashString = url.includes('#') ? url.substring(url.indexOf('#') + 1) || '' : '';
        return __spreadArray(__spreadArray([], this.parseHashString(hashString), true), this.parseQueryString(queryString), true);
    };
    UrlTranslator.prototype.parseQueryString = function (queryString) {
        var _this = this;
        var justQueryString = queryString.split('?').pop() || '';
        return justQueryString
            .split('&')
            .filter(function (v) { return v; })
            .map(function (kvPair) {
            var _a = kvPair.split('=').map(function (v) { return decodeURIComponent(v.replace(/\+/g, ' ')); }), key = _a[0], value = _a[1];
            return { key: key.split('.'), value: value, type: types_1.ParamLocationType.query };
        })
            .filter(function (param) {
            // remove core fields that do not contain a value
            var isCoreField = _this.reverseMapping[param.key[0]];
            return !isCoreField || (isCoreField && param.value);
        });
    };
    UrlTranslator.prototype.parseHashString = function (hashString) {
        var _this = this;
        var params = [];
        var justHashString = hashString.split('#').join('/') || '';
        justHashString
            .split('/')
            .filter(function (v) { return v; })
            .map(function (hashEntries) {
            return hashEntries.split(':').map(function (v) { return decodeHashComponent(v); });
        })
            .filter(function (param) {
            // remove core fields that do not contain a value
            var key = param[0], value = param[1];
            var isCoreField = _this.reverseMapping[key];
            return !isCoreField || (isCoreField && value);
        })
            .forEach(function (decodedHashEntries) {
            if (decodedHashEntries.length == 1) {
                params.push({ key: [decodedHashEntries[0]], value: '', type: types_1.ParamLocationType.hash });
            }
            else if (decodedHashEntries.length && decodedHashEntries.length >= 2) {
                var isCoreField = _this.reverseMapping[decodedHashEntries[0]];
                if (isCoreField && isCoreField == 'filter' && decodedHashEntries.length == 4) {
                    // range filter
                    var path0 = decodedHashEntries[0], path1 = decodedHashEntries[1], low = decodedHashEntries[2], high = decodedHashEntries[3];
                    params.push({ key: [path0, path1, 'low'], value: low, type: types_1.ParamLocationType.hash });
                    params.push({ key: [path0, path1, 'high'], value: high, type: types_1.ParamLocationType.hash });
                }
                else {
                    var _a = decodedHashEntries.reverse(), value = _a[0], keys = _a.slice(1);
                    params.push({ key: keys.reverse(), value: value, type: types_1.ParamLocationType.hash });
                }
            }
        });
        return params;
    };
    // parse params into state
    UrlTranslator.prototype.paramsToState = function (params) {
        var _this = this;
        var coreOtherParams = [], coreFilterParams = [], coreSortParams = [], otherParams = [];
        params === null || params === void 0 ? void 0 : params.forEach(function (param) {
            var coreStateKey = _this.reverseMapping[param.key[0]];
            var coreConfig = _this.config.parameters.core[coreStateKey];
            var customStateKey = _this.config.parameters.custom[param.key[0]];
            if (coreStateKey) {
                // core state
                switch (coreStateKey) {
                    case 'filter': {
                        if (coreConfig.type == param.type)
                            coreFilterParams.push(param);
                        break;
                    }
                    case 'sort': {
                        if (coreConfig.type == param.type)
                            coreSortParams.push(param);
                        break;
                    }
                    default: {
                        if (coreConfig.type == param.type)
                            coreOtherParams.push(param);
                        break;
                    }
                }
            }
            else if (!CORE_FIELDS.includes(param.key[0])) {
                // custom state
                if (!customStateKey) {
                    // unrecognized state - store in custom config map (as implicit type)
                    _this.config.parameters.custom[param.key[0]] = {
                        type: param.type || _this.config.settings.customType,
                    };
                }
                otherParams.push(param);
            }
        });
        return __assign(__assign(__assign(__assign({}, this.parseCoreOther(coreOtherParams)), this.parseCoreFilter(coreFilterParams)), this.parseCoreSort(coreSortParams)), this.parseOther(otherParams));
    };
    UrlTranslator.prototype.parseCoreOther = function (otherParams) {
        var _this = this;
        var state = {};
        var numberTypeParams = ['page', 'pageSize'];
        if (!otherParams) {
            return {};
        }
        otherParams.forEach(function (param) {
            var coreKey = _this.reverseMapping[param.key[0]];
            if (numberTypeParams.includes(coreKey)) {
                var numValue = Number(param.value);
                if (coreKey == 'page' && numValue > 1) {
                    state[coreKey] = numValue;
                }
                else if (coreKey != 'page') {
                    state[coreKey] = numValue;
                }
            }
            else {
                state[coreKey] = param.value;
            }
        });
        return state;
    };
    UrlTranslator.prototype.parseCoreFilter = function (filterParams) {
        var valueFilterParams = filterParams.filter(function (p) { return p.key.length == 2; });
        var rangeFilterParams = filterParams.filter(function (p) { return p.key.length == 3; });
        var valueFilters = valueFilterParams.reduce(function (state, param) {
            var _a;
            var currentValue = (state.filter || {})[param.key[1]] || [];
            return {
                filter: __assign(__assign({}, state.filter), (_a = {}, _a[param.key[1]] = __spreadArray(__spreadArray([], (Array.isArray(currentValue) ? currentValue : [currentValue]), true), [param.value], false), _a)),
            };
        }, {});
        var rangeFilters = rangeFilterParams.reduce(function (state, param, index) {
            // ranges should come in pairs!
            // use index to build pairs, ignore non pairs
            // build set as encountered - only return full sets (low + high)
            var _a, _b;
            var newState = state;
            var nextRangeParam = rangeFilterParams[index + 1];
            if (index % 2 == 0 &&
                nextRangeParam &&
                nextRangeParam.key[1] == param.key[1] &&
                param.key[2] == types_1.RangeValueProperties.LOW &&
                nextRangeParam.key[2] == types_1.RangeValueProperties.HIGH) {
                var currentValue = (state.filter || {})[param.key[1]] || [];
                newState = {
                    filter: __assign(__assign({}, state.filter), (_a = {}, _a[param.key[1]] = __spreadArray(__spreadArray([], (Array.isArray(currentValue) ? currentValue : [currentValue]), true), [
                        (_b = {},
                            _b[types_1.RangeValueProperties.LOW] = isNaN(+param.value) ? null : +param.value,
                            _b[types_1.RangeValueProperties.HIGH] = isNaN(+nextRangeParam.value) ? null : +nextRangeParam.value,
                            _b),
                    ], false), _a)),
                };
            }
            return newState;
        }, {});
        return __assign({}, (valueFilters.filter || rangeFilters.filter
            ? {
                filter: __assign(__assign({}, valueFilters.filter), rangeFilters.filter),
            }
            : {}));
    };
    UrlTranslator.prototype.parseCoreSort = function (sortParams) {
        if (!sortParams.length) {
            return {};
        }
        return {
            sort: sortParams.map(function (param) { return ({
                field: param.key[1],
                direction: param.value,
            }); }),
        };
    };
    UrlTranslator.prototype.parseOther = function (otherParams) {
        var state = {};
        otherParams.forEach(function (param) {
            var node = state;
            param.key.forEach(function (key, i) {
                var isLast = i == param.key.length - 1;
                if (isLast) {
                    node[key] = node[key] || [];
                    param.value && node[key].push(param.value);
                }
                else {
                    node[key] = node[key] || {};
                    node = node[key];
                }
            });
        });
        return state;
    };
    UrlTranslator.prototype.serialize = function (state) {
        var root = this.config.urlRoot.includes('?')
            ? this.config.urlRoot.split('?')[0]
            : this.config.urlRoot.includes('#')
                ? this.config.urlRoot.split('#')[0]
                : this.config.urlRoot || window.location.pathname;
        var params = this.stateToParams(state);
        var queryParams = params.filter(function (p) { return p.type == types_1.ParamLocationType.query; });
        var hashParams = params.filter(function (p) { return p.type == types_1.ParamLocationType.hash; });
        var queryParamString = queryParams.length
            ? '?' +
                queryParams
                    .map(function (param) {
                    var keyString = encodeURIComponent(param.key.join('.'));
                    var valueString = param.value ? '=' + encodeURIComponent(param.value) : '';
                    return keyString + valueString;
                })
                    .join('&')
            : '';
        var hashParamString = hashParams.length
            ? '#/' +
                hashParams
                    .map(function (param) {
                    var keyString = param.key.map(function (k) { return encodeHashComponent(k); }).join(':');
                    var valueString = param.value ? ':' + encodeHashComponent(param.value) : '';
                    return keyString + valueString;
                })
                    .join('/')
            : '';
        return "".concat(root).concat(queryParamString).concat(hashParamString);
    };
    // encode state into params
    UrlTranslator.prototype.stateToParams = function (state) {
        return __spreadArray(__spreadArray(__spreadArray(__spreadArray([], this.encodeOther(state), true), this.encodeCoreOther(state, ['filter', 'sort']), true), this.encodeCoreFilters(state), true), this.encodeCoreSorts(state), true);
    };
    UrlTranslator.prototype.encodeCoreFilters = function (state) {
        var filterConfig = this.config.parameters.core.filter;
        if (!state.filter || !filterConfig) {
            return [];
        }
        return Object.keys(state.filter).flatMap(function (key) {
            if (!state.filter || !state.filter[key]) {
                return [];
            }
            var filter = state.filter[key];
            return (filter instanceof Array ? filter : [filter]).flatMap(function (value) {
                var _a, _b, _c, _d;
                if (typeof value == 'string' || typeof value == 'number' || typeof value == 'boolean') {
                    return [
                        {
                            key: [filterConfig.name, key],
                            value: '' + value,
                            type: filterConfig.type,
                        },
                    ];
                }
                else if (typeof value == 'object' &&
                    typeof value[types_1.RangeValueProperties.LOW] != 'undefined' &&
                    typeof value[types_1.RangeValueProperties.HIGH] != 'undefined') {
                    if (filterConfig.type == types_1.ParamLocationType.query) {
                        return [
                            {
                                key: [filterConfig.name, key, types_1.RangeValueProperties.LOW],
                                value: '' + ((_a = value[types_1.RangeValueProperties.LOW]) !== null && _a !== void 0 ? _a : '*'),
                                type: filterConfig.type,
                            },
                            {
                                key: [filterConfig.name, key, types_1.RangeValueProperties.HIGH],
                                value: '' + ((_b = value[types_1.RangeValueProperties.HIGH]) !== null && _b !== void 0 ? _b : '*'),
                                type: filterConfig.type,
                            },
                        ];
                    }
                    else if (filterConfig.type == types_1.ParamLocationType.hash) {
                        return [
                            {
                                key: [filterConfig.name, key, '' + ((_c = value[types_1.RangeValueProperties.LOW]) !== null && _c !== void 0 ? _c : '*')],
                                value: '' + ((_d = value[types_1.RangeValueProperties.HIGH]) !== null && _d !== void 0 ? _d : '*'),
                                type: filterConfig.type,
                            },
                        ];
                    }
                }
                return [];
            });
        });
    };
    UrlTranslator.prototype.encodeCoreSorts = function (state) {
        var sortConfig = this.config.parameters.core.sort;
        if (!state.sort || !sortConfig) {
            return [];
        }
        return (state.sort instanceof Array ? state.sort : [state.sort]).map(function (sort) {
            return {
                key: [sortConfig.name, sort.field],
                value: sort.direction,
                type: sortConfig.type,
            };
        });
    };
    UrlTranslator.prototype.encodeCoreOther = function (state, except) {
        var _this = this;
        var params = [];
        Object.keys(state)
            // sorting to determine order of params in URL
            .sort(function (a, b) {
            return CORE_FIELDS.indexOf(a) - CORE_FIELDS.indexOf(b);
        })
            .map(function (param) {
            if (CORE_FIELDS.includes(param) && !except.includes(param)) {
                var paramConfig = _this.config.parameters.core[param];
                if (param == 'page' && state[param] == 1) {
                    // do not include page 1
                }
                else {
                    params.push({ key: [paramConfig.name], value: '' + state[param], type: paramConfig.type });
                }
            }
        });
        return params;
    };
    UrlTranslator.prototype.encodeOther = function (state) {
        var _this = this;
        var params = [];
        var addRecursive = function (obj, currentPath) {
            Object.keys(obj).forEach(function (key) {
                if (currentPath.length == 0 && CORE_FIELDS.includes(key)) {
                    return;
                }
                var value = obj[key];
                if (value instanceof Array) {
                    var customConfig = _this.config.parameters.custom[currentPath[0] || key];
                    var type_1 = (customConfig === null || customConfig === void 0 ? void 0 : customConfig.type) || _this.config.settings.customType;
                    if (value.length) {
                        params = params.concat(value.map(function (v) {
                            return { key: __spreadArray(__spreadArray([], currentPath, true), [key], false), value: v, type: type_1 };
                        }));
                    }
                    else {
                        params = params.concat({ key: __spreadArray(__spreadArray([], currentPath, true), [key], false), value: '', type: type_1 });
                    }
                }
                else if (typeof value == 'object' && Object.keys(value || {}).length) {
                    addRecursive(value, __spreadArray(__spreadArray([], currentPath, true), [key], false));
                }
                else {
                    var customConfig = _this.config.parameters.custom[currentPath[0] || key];
                    var type = (customConfig === null || customConfig === void 0 ? void 0 : customConfig.type) || _this.config.settings.customType;
                    var stringValue = (typeof value == 'object' ? undefined : value);
                    params = params.concat([{ key: __spreadArray(__spreadArray([], currentPath, true), [key], false), value: stringValue, type: type }]);
                }
            });
        };
        addRecursive(state, []);
        return params;
    };
    UrlTranslator.prototype.go = function (url, config) {
        var currentUrl = this.getCurrentUrl();
        if (url != currentUrl) {
            if ((config === null || config === void 0 ? void 0 : config.history) == 'replace') {
                history.replaceState(null, '', url);
            }
            else {
                history.pushState(null, '', url);
            }
        }
    };
    return UrlTranslator;
}());
exports.UrlTranslator = UrlTranslator;
function decodeHashComponent(string) {
    if (typeof string == 'string') {
        string = string.replace(/%2425/g, '$$25');
        string = string.replace(/\$25/g, '%');
        string = decodeURIComponent(string);
    }
    return string;
}
function encodeHashComponent(string) {
    if (typeof string == 'string') {
        string = encodeURIComponent(string);
        string = string.replace(/%/g, '$$25');
    }
    return string;
}
