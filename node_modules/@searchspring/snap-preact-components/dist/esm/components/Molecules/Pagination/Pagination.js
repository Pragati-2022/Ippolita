/** @jsx jsx */
import { Fragment } from 'preact';
import { observer } from 'mobx-react-lite';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { useTheme, CacheProvider } from '../../../providers';
import { defined } from '../../../utilities';
import { Icon } from '../../Atoms/Icon';
const CSS = {
    pagination: ({ theme }) => css({
        '& .ss__pagination__page': {
            padding: '5px',
            display: 'inline-block',
            minHeight: '1em',
            minWidth: '1em',
            textAlign: 'center',
            '&.ss__pagination__page--active': {
                fontWeight: 'bold',
            },
            '&:hover:not(.ss__pagination__page--active)': {
                backgroundColor: theme?.colors?.hover || '#f8f8f8',
            },
        },
    }),
};
export const Pagination = observer((properties) => {
    const globalTheme = useTheme();
    const theme = { ...globalTheme, ...properties.theme };
    const props = {
        // default props
        pages: 5,
        // global theme
        ...globalTheme?.components?.pagination,
        // props
        ...properties,
        ...properties.theme?.components?.pagination,
    };
    const { pagination, pages, pagesLeft, pagesRight, hideFirst, hideLast, hideEllipsis, hideNext, hidePrev, nextButton, prevButton, firstButton, lastButton, disableStyles, className, style, } = props;
    const subProps = {
        icon: {
            // default props
            className: 'ss__pagination__icon',
            size: '10px',
            // global theme
            ...globalTheme?.components?.icon,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
    };
    const store = pagination;
    const getPagesParams = Number.isInteger(pagesLeft) && Number.isInteger(pagesRight) ? [pagesLeft, pagesRight] : [pages];
    const _pages = store?.getPages(...getPagesParams);
    const pageNumbers = _pages?.map((page) => page.number);
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.pagination({ theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return store?.totalResults ? (jsx(CacheProvider, null,
        jsx("div", { ...styling, className: classnames('ss__pagination', className) },
            jsx("nav", { role: "navigation", "aria-label": "Pagination" },
                store.previous && !hidePrev && (jsx("a", { ...store.previous.url.link, className: classnames('ss__pagination__page', 'ss__pagination__page--previous'), "aria-label": 'go to previous page' }, prevButton ? prevButton : jsx(Icon, { ...subProps.icon, icon: 'angle-left' }))),
                !pageNumbers.includes(store.first.number) && !hideFirst && (jsx(Fragment, null,
                    jsx("a", { ...store.first.url.link, className: classnames('ss__pagination__page', 'ss__pagination__page--first'), "aria-label": 'go to first page' }, firstButton ? firstButton : store.first.number),
                    !pageNumbers.includes(2) && !hideEllipsis && jsx("span", null, "\u2026"))),
                _pages &&
                    _pages.map((page) => page.active ? (jsx("span", { className: classnames('ss__pagination__page', 'ss__pagination__page--active'), "aria-label": `go to page ${page.number}`, "aria-current": "true" }, page.number)) : (jsx("a", { ...page.url.link, className: "ss__pagination__page", "aria-label": `go to page ${page.number}` }, page.number))),
                !pageNumbers.includes(store.last.number) && !hideLast && (jsx(Fragment, null,
                    !pageNumbers.includes(store.totalPages - 1) && !hideEllipsis && jsx("span", null, "\u2026"),
                    jsx("a", { ...store.last.url.link, className: classnames('ss__pagination__page', 'ss__pagination__page--last'), "aria-label": `go to last page ${store.last.number}` }, lastButton ? lastButton : store.last.number))),
                store.next && !hideNext && (jsx("a", { ...store.next.url.link, className: classnames('ss__pagination__page', 'ss__pagination__page--next'), "aria-label": 'go to next page' }, nextButton ? nextButton : jsx(Icon, { ...subProps.icon, icon: 'angle-right' }))))))) : (jsx(Fragment, null));
});
