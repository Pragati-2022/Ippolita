/** @jsx jsx */
import { Fragment } from 'preact';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import { Filter } from '../../Molecules/Filter';
import { defined } from '../../../utilities';
import { useTheme, CacheProvider } from '../../../providers';
const CSS = {
    filterSummary: () => css({
        '& .ss__filter-summary__filter': {
            margin: '5px 10px 5px 0',
        },
        '& .ss__filter-summary__title': {
            fontSize: '1.2em',
        },
    }),
};
export const FilterSummary = observer((properties) => {
    const globalTheme = useTheme();
    const props = {
        // default props
        title: 'Current Filters',
        clearAllLabel: 'Clear All',
        clearAllIcon: 'close-thin',
        filterIcon: 'close-thin',
        filters: properties.controller?.store?.filters,
        onClearAllClick: () => properties.controller?.urlManager.remove('filter').remove('page').go(),
        separator: ':',
        // global theme
        ...globalTheme?.components?.filterSummary,
        // props
        ...properties,
        ...properties.theme?.components?.filterSummary,
    };
    const { filters, title, filterIcon, clearAllIcon, separator, hideFacetLabel, clearAllLabel, hideClearAll, onClick, onClearAllClick, disableStyles, className, style, } = props;
    const subProps = {
        filter: {
            // default props
            clearAllLabel: '',
            className: 'ss__filter-summary__filter',
            // global theme
            ...globalTheme?.components?.filter,
            // inherited props
            ...defined({
                disableStyles,
                separator,
                hideFacetLabel,
                icon: filterIcon,
            }),
            // component theme overrides
            theme: props.theme,
        },
    };
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.filterSummary(), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return filters?.length ? (jsx(CacheProvider, null,
        jsx("div", { ...styling, className: classnames('ss__filter-summary', className) },
            jsx("div", { className: "ss__filter-summary__title" }, title),
            filters.map((filter) => (jsx(Filter, { ...subProps.filter, filter: filter, onClick: (e) => onClick && onClick(e, filter) }))),
            !hideClearAll && (jsx(Filter, { ...subProps.filter, icon: clearAllIcon, className: `${subProps?.filter?.className} ss__filter-summary__clear-all`, hideFacetLabel: true, valueLabel: clearAllLabel, onClick: (e) => onClearAllClick && onClearAllClick(e) }))))) : (jsx(Fragment, null));
});
