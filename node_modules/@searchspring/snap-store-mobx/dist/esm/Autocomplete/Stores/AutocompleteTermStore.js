import { observable, makeObservable } from 'mobx';
export class AutocompleteTermStore extends Array {
    static get [Symbol.species]() {
        return Array;
    }
    constructor(services, autocomplete, paginationData, search, resetTerms, rootState, config) {
        const suggestions = [...(autocomplete?.alternatives ? autocomplete.alternatives : []).map((term) => term.text)];
        if (config.settings?.integratedSpellCorrection) {
            if (autocomplete?.correctedQuery && search?.query && autocomplete.correctedQuery.toLowerCase() != search.query.toLowerCase()) {
                // the query was corrected
                suggestions.unshift(autocomplete.correctedQuery);
            }
            search?.query && suggestions.unshift(search.query);
        }
        else {
            if (autocomplete?.suggested?.text) {
                // a suggestion for query
                suggestions.unshift(autocomplete.suggested.text);
            }
            else if (autocomplete?.correctedQuery && paginationData.totalResults) {
                // the query was corrected
                suggestions.unshift(autocomplete.correctedQuery);
            }
            else if (autocomplete?.query && paginationData.totalResults) {
                // there were no suggestions or corrections,
                suggestions.unshift(autocomplete?.query);
            }
        }
        const terms = [];
        suggestions.map((term, index) => terms.push(new Term(services, {
            active: index === 0,
            value: term,
        }, terms, resetTerms, rootState)));
        super(...terms);
    }
}
export class Term {
    constructor(services, term, terms, resetTerms, rootState) {
        this.active = term.active;
        this.value = term.value;
        this.url = services?.urlManager?.set({ query: this.value });
        this.preview = () => {
            resetTerms();
            terms.map((term) => {
                term.active = false;
            });
            this.active = true;
            rootState.locks.terms.lock();
            rootState.locks.facets.unlock();
            this.url?.set({ query: this.value }).go();
        };
        makeObservable(this, {
            active: observable,
            value: observable,
        });
    }
}
