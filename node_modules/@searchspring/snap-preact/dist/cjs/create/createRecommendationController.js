"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var snap_controller_1 = require("@searchspring/snap-controller");
var snap_client_1 = require("@searchspring/snap-client");
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var snap_url_manager_1 = require("@searchspring/snap-url-manager");
var snap_event_manager_1 = require("@searchspring/snap-event-manager");
var snap_profiler_1 = require("@searchspring/snap-profiler");
var snap_logger_1 = require("@searchspring/snap-logger");
var snap_tracker_1 = require("@searchspring/snap-tracker");
exports.default = (function (config, services) {
    var urlManager = ((services === null || services === void 0 ? void 0 : services.urlManager) || new snap_url_manager_1.UrlManager(new snap_url_manager_1.UrlTranslator(config.url), snap_url_manager_1.reactLinker)).detach(true);
    // set client mode
    if (config.mode && config.client) {
        config.client.config = config.client.config || {};
        config.client.config.mode = config.mode;
    }
    var cntrlr = new snap_controller_1.RecommendationController(config.controller, {
        client: (services === null || services === void 0 ? void 0 : services.client) || new snap_client_1.Client(config.client.globals, config.client.config),
        store: (services === null || services === void 0 ? void 0 : services.store) || new snap_store_mobx_1.RecommendationStore(config.controller, { urlManager: urlManager }),
        urlManager: urlManager,
        eventManager: (services === null || services === void 0 ? void 0 : services.eventManager) || new snap_event_manager_1.EventManager(),
        profiler: (services === null || services === void 0 ? void 0 : services.profiler) || new snap_profiler_1.Profiler(),
        logger: (services === null || services === void 0 ? void 0 : services.logger) || new snap_logger_1.Logger({ mode: config.mode }),
        tracker: (services === null || services === void 0 ? void 0 : services.tracker) || new snap_tracker_1.Tracker(config.client.globals),
    }, config.context);
    return cntrlr;
});
