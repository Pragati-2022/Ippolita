/** @jsx jsx */
import { Fragment } from 'preact';
import { observer } from 'mobx-react-lite';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { defined } from '../../../utilities';
import { useTheme, CacheProvider } from '../../../providers';
import { Button } from '../../Atoms/Button';
import { Icon } from '../../Atoms/Icon';
const CSS = {
    filter: () => css({
        textDecoration: 'none',
        display: 'inline-flex',
        '& .ss__filter__button': {
            alignItems: 'center',
            '& .ss__filter__button__icon': {
                marginRight: '5px',
            },
        },
        '& .ss__filter__label': {
            marginRight: '5px',
            fontWeight: 'bold',
        },
    }),
};
// TODO: look into urlManager and how it connects in this case, left the href out for the time being
export const Filter = observer((properties) => {
    const globalTheme = useTheme();
    const props = {
        // default props
        // global theme
        ...globalTheme?.components?.filter,
        //props
        ...properties,
        ...properties.theme?.components?.filter,
    };
    const { filter, facetLabel, valueLabel, url, hideFacetLabel, onClick, icon, separator, disableStyles, className, style } = props;
    const link = filter?.url?.link || url?.link;
    const value = filter?.value.label || valueLabel;
    const label = filter?.facet.label || facetLabel;
    const subProps = {
        button: {
            // default props
            className: 'ss__filter__button',
            // global theme
            ...globalTheme?.components?.button,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props.theme,
        },
        icon: {
            // default props
            icon: 'close-thin',
            className: 'ss__filter__button__icon',
            size: '10px',
            // global theme
            ...globalTheme?.components?.icon,
            // inherited props
            ...defined({
                disableStyles,
                icon,
            }),
            // component theme overrides
            theme: props.theme,
        },
    };
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.filter(), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return value ? (jsx(CacheProvider, null,
        jsx("a", { ...styling, className: classnames('ss__filter', className), "aria-label": !label ? value : `remove selected ${label} filter ${value}`, onClick: (e) => {
                link?.onClick && link.onClick(e);
                onClick && onClick(e);
            }, href: link?.href },
            jsx(Button, { ...subProps.button, disableA11y: true },
                jsx(Icon, { ...subProps.icon }),
                !hideFacetLabel && (jsx("span", { className: "ss__filter__label" },
                    label,
                    separator && jsx("span", { className: "ss__filter__label__separator" }, separator))),
                jsx("span", { className: "ss__filter__value" }, value))))) : (jsx(Fragment, null));
});
