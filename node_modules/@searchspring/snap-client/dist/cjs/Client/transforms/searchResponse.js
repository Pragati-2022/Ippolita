"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformSearchResponse = void 0;
var htmlUnescape_1 = require("../utils/htmlUnescape");
// TODO: Add all core fields
var CORE_FIELDS = [
    'uid',
    'sku',
    'name',
    'url',
    'addToCartUrl',
    'price',
    'msrp',
    'imageUrl',
    'secureImageUrl',
    'thumbnailImageUrl',
    'secureThumbnailImageUrl',
    'rating',
    'ratingCount',
    'description',
    'stockMessage',
    'brand',
    'popularity',
    'caption',
];
var Result = /** @class */ (function () {
    function Result(result) {
        Object.assign(this, result);
    }
    return Result;
}());
function transformSearchResponse(response, request) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, transformSearchResponse.pagination(response)), transformSearchResponse.results(response)), transformSearchResponse.filters(response)), transformSearchResponse.facets(response, request)), transformSearchResponse.sorting(response)), transformSearchResponse.merchandising(response)), transformSearchResponse.search(response, request));
}
exports.transformSearchResponse = transformSearchResponse;
transformSearchResponse.pagination = function (response) {
    var pagination = response === null || response === void 0 ? void 0 : response.pagination;
    return {
        pagination: {
            totalResults: pagination === null || pagination === void 0 ? void 0 : pagination.totalResults,
            page: pagination === null || pagination === void 0 ? void 0 : pagination.currentPage,
            pageSize: pagination === null || pagination === void 0 ? void 0 : pagination.perPage,
            totalPages: pagination === null || pagination === void 0 ? void 0 : pagination.totalPages,
        },
    };
};
transformSearchResponse.results = function (response) {
    var results = (response === null || response === void 0 ? void 0 : response.results) || [];
    return { results: results.map(transformSearchResponse.result) };
};
transformSearchResponse.result = function (rawResult) {
    var _a;
    var coreFieldValues = CORE_FIELDS.reduce(function (coreFields, key) {
        var _a;
        if (typeof rawResult[key] != 'undefined') {
            return __assign(__assign({}, coreFields), (_a = {}, _a[key] = decodeProperty(rawResult[key] || ''), _a));
        }
        return coreFields;
    }, {});
    if (coreFieldValues.price)
        coreFieldValues.price = +coreFieldValues.price;
    if (coreFieldValues.msrp)
        coreFieldValues.msrp = +coreFieldValues.msrp;
    var attributes = Object.keys(rawResult)
        .filter(function (k) { return CORE_FIELDS.indexOf(k) == -1; })
        .reduce(function (attributes, key) {
        var _a;
        return __assign(__assign({}, attributes), (_a = {}, _a[key] = decodeProperty(rawResult[key] || ''), _a));
    }, {});
    var children = ((_a = rawResult === null || rawResult === void 0 ? void 0 : rawResult.children) === null || _a === void 0 ? void 0 : _a.map(function (child) {
        return {
            attributes: __assign({}, Object.keys(child).reduce(function (attributes, key) {
                var _a;
                return __assign(__assign({}, attributes), (_a = {}, _a[key] = decodeProperty(child[key]), _a));
            }, {})),
        };
    })) || [];
    return new Result({
        id: rawResult.uid,
        mappings: {
            core: coreFieldValues,
        },
        attributes: attributes,
        children: children,
    });
};
transformSearchResponse.filters = function (response) {
    var filterSummary = (response === null || response === void 0 ? void 0 : response.filterSummary) || [];
    return {
        filters: filterSummary.map(function (filter) {
            var value = filter.value;
            var type = 'value';
            if (typeof filter.value == 'object') {
                if (filter && filter.value && filter.value.rangeHigh && filter.value.rangeLow) {
                    (type = 'range'),
                        (value = {
                            low: +filter.value.rangeLow,
                            high: +filter.value.rangeHigh,
                        });
                }
            }
            return {
                type: type,
                field: filter.field,
                label: filter.filterValue,
                value: value,
            };
        }),
    };
};
transformSearchResponse.facets = function (response, request) {
    var _a, _b;
    if (request === void 0) { request = {}; }
    var filters = request.filters || [];
    var facets = (response === null || response === void 0 ? void 0 : response.facets) || [];
    var limit = (_a = request === null || request === void 0 ? void 0 : request.facets) === null || _a === void 0 ? void 0 : _a.limit;
    var valueLimit = (_b = request === null || request === void 0 ? void 0 : request.facets) === null || _b === void 0 ? void 0 : _b.valueLimit;
    var transformedFacets = facets.map(function (facet) {
        var _a;
        var transformedFacet = {
            field: facet.field,
            type: 'value',
            filtered: Boolean(facet.facet_active),
        };
        if (facet.step) {
            if (facet.range) {
                transformedFacet = __assign(__assign({}, transformedFacet), { type: 'range', step: facet.step, range: {
                        // TODO: change to null
                        low: facet.range[0] == '*' ? undefined : +facet.range[0],
                        high: facet.range[1] == '*' ? undefined : +facet.range[1],
                    } });
            }
            if (facet.active && typeof facet.active != 'boolean' && facet.active.length > 1) {
                transformedFacet.active = {
                    // TODO: change to null
                    low: facet.active[0] == '*' ? undefined : +facet.active[0],
                    high: facet.active[1] == '*' ? undefined : +facet.active[1],
                };
            }
        }
        else if (facet.values instanceof Array) {
            if (facet.type == 'hierarchy') {
                transformedFacet.type = 'value';
                transformedFacet.values = (facet.values || []).map(function (value) {
                    return {
                        filtered: Boolean(value.active),
                        value: value.value,
                        label: value.label,
                        count: value.count,
                    };
                });
                var filterSelected = filters.find(function (f) { return f.field == facet.field; });
                var newValues = [];
                if (filterSelected && !filterSelected.background) {
                    var valueLevels = (_a = filterSelected.value) === null || _a === void 0 ? void 0 : _a.split(facet.hierarchyDelimiter || '>');
                    if (valueLevels) {
                        for (var i = valueLevels.length - 1; i >= 0; i--) {
                            var valueSplit = valueLevels.slice(0, i + 1);
                            var value = valueSplit.join(facet.hierarchyDelimiter);
                            newValues.unshift({
                                value: value,
                                filtered: value == filterSelected.value,
                                label: valueSplit[valueSplit.length - 1],
                            });
                        }
                    }
                    newValues.unshift({
                        value: null,
                        filtered: false,
                        label: 'View All',
                    });
                }
                transformedFacet.values = newValues.concat(transformedFacet.values);
            }
            else if (facet.values[0].type == 'value') {
                transformedFacet.type = 'value';
                transformedFacet.values = facet.values.map(function (value) {
                    return {
                        filtered: value.active,
                        value: value.value,
                        label: value.label,
                        count: value.count,
                    };
                });
            }
            else if (facet.values[0].type == 'range') {
                transformedFacet.type = 'range-buckets';
                transformedFacet.values = facet.values.map(function (value) {
                    return {
                        filtered: value.active,
                        low: value.low == '*' ? null : value.low ? +value.low : null,
                        high: value.high == '*' ? null : value.high ? +value.high : null,
                        label: value.label,
                        count: value.count,
                    };
                });
            }
        }
        return transformedFacet;
    });
    // limit facets based on request
    if (limit) {
        transformedFacets = transformedFacets.slice(0, limit);
    }
    // limit facet values based on request
    if (valueLimit) {
        transformedFacets = transformedFacets.map(function (facet) {
            if (facet.values) {
                facet.values = facet.values.slice(0, valueLimit);
            }
            return facet;
        });
    }
    return {
        facets: transformedFacets,
    };
};
transformSearchResponse.sorting = function (response) {
    var _a;
    var sorts = ((_a = response === null || response === void 0 ? void 0 : response.sorting) === null || _a === void 0 ? void 0 : _a.options) || [];
    var transformedSorting = sorts
        .filter(function (sort) { return sort.active; })
        .map(function (sort) {
        return {
            field: sort.field,
            direction: sort.direction,
        };
    });
    return {
        sorting: transformedSorting,
    };
};
transformSearchResponse.merchandising = function (response) {
    var merchandising = response === null || response === void 0 ? void 0 : response.merchandising;
    if (merchandising.content && Array.isArray(merchandising.content) && !merchandising.content.length) {
        merchandising.content = {};
    }
    var transformedMerchandising = {
        redirect: (merchandising === null || merchandising === void 0 ? void 0 : merchandising.redirect) || '',
        content: merchandising.content || {},
        campaigns: (merchandising === null || merchandising === void 0 ? void 0 : merchandising.triggeredCampaigns) || [],
        personalized: merchandising === null || merchandising === void 0 ? void 0 : merchandising.personalized,
    };
    return {
        merchandising: transformedMerchandising,
    };
};
transformSearchResponse.search = function (response, request) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    var searchObj = {
        search: {
            query: (_b = (_a = request === null || request === void 0 ? void 0 : request.search) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.string,
            didYouMean: (_c = response === null || response === void 0 ? void 0 : response.didYouMean) === null || _c === void 0 ? void 0 : _c.query,
            matchType: (_d = response === null || response === void 0 ? void 0 : response.query) === null || _d === void 0 ? void 0 : _d.matchType,
        },
    };
    if (((_e = response === null || response === void 0 ? void 0 : response.query) === null || _e === void 0 ? void 0 : _e.corrected) && (response === null || response === void 0 ? void 0 : response.query.original)) {
        // integrated spell correction is enabled
        searchObj.search.query = (_f = response === null || response === void 0 ? void 0 : response.query) === null || _f === void 0 ? void 0 : _f.corrected;
        searchObj.search.originalQuery = (_g = response === null || response === void 0 ? void 0 : response.query) === null || _g === void 0 ? void 0 : _g.original;
    }
    else if ((_h = request === null || request === void 0 ? void 0 : request.search) === null || _h === void 0 ? void 0 : _h.originalQuery) {
        // using 'oq'
        searchObj.search.originalQuery = (_j = request === null || request === void 0 ? void 0 : request.search) === null || _j === void 0 ? void 0 : _j.originalQuery;
    }
    return searchObj;
};
// used for HTML entities decoding
function decodeProperty(encoded) {
    if (Array.isArray(encoded)) {
        return encoded.map(function (item) { return (0, htmlUnescape_1.htmlUnescape)(String(item)); });
    }
    else {
        return (0, htmlUnescape_1.htmlUnescape)(String(encoded));
    }
}
