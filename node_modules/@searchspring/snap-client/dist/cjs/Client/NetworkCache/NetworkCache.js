"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkCache = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var CACHE_STORAGE_KEY = 'ss-networkcache';
var defaultConfig = {
    enabled: true,
    ttl: 300000,
    maxSize: 200,
    purgeable: true,
};
var NetworkCache = /** @class */ (function () {
    function NetworkCache(config) {
        var _this = this;
        var _a;
        this.memoryCache = {};
        this.config = (0, deepmerge_1.default)(defaultConfig, config || {});
        ((_a = this.config) === null || _a === void 0 ? void 0 : _a.entries) &&
            Object.keys(this.config.entries).map(function (key) {
                if (_this.config.entries && _this.config.entries[key]) {
                    _this.set(key, _this.config.entries[key]);
                }
            });
    }
    NetworkCache.prototype.get = function (key) {
        if (this.config.enabled) {
            try {
                if (this.memoryCache[key]) {
                    if (Date.now() < this.memoryCache[key].expires) {
                        return (0, deepmerge_1.default)({}, this.memoryCache[key].value);
                    }
                }
                var stored = sessionStorage.getItem(CACHE_STORAGE_KEY);
                var localData = stored && JSON.parse(stored);
                if (localData && key && localData[key]) {
                    // compare the expiry time of the item with the current time
                    if (Date.now() >= localData[key].expires) {
                        // remove item
                        var newStored = __assign({}, localData);
                        delete newStored[key];
                        // update storage
                        sessionStorage.setItem(CACHE_STORAGE_KEY, JSON.stringify(newStored));
                    }
                    else {
                        return localData[key].value;
                    }
                }
            }
            catch (err) {
                console.warn('something went wrong, browser might not have cookies enabled');
            }
        }
    };
    NetworkCache.prototype.set = function (key, value) {
        if (this.config.enabled) {
            try {
                var cacheObject = {
                    value: value,
                    expires: Date.now() + this.config.ttl,
                    purgeable: this.config.purgeable,
                };
                this.memoryCache[key] = cacheObject;
                var stored = sessionStorage.getItem(CACHE_STORAGE_KEY);
                var newStored_1 = __assign({}, (stored && JSON.parse(stored)));
                newStored_1[key] = cacheObject;
                var size = new Blob([JSON.stringify(newStored_1)], { endings: 'native' }).size / 1024;
                while (size > this.config.maxSize) {
                    var oldestKey = Object.keys(newStored_1)
                        .filter(function (key) { return newStored_1[key].purgeable; })
                        .sort(function (a, b) {
                        return newStored_1[a].expires - newStored_1[b].expires;
                    })[0];
                    if (!oldestKey)
                        break;
                    delete newStored_1[oldestKey];
                    // recalculate size after removing oldest
                    size = new Blob([JSON.stringify(newStored_1)], { endings: 'native' }).size / 1024;
                }
                if (size < this.config.maxSize) {
                    sessionStorage.setItem(CACHE_STORAGE_KEY, JSON.stringify(newStored_1));
                }
            }
            catch (err) {
                console.warn('something went wrong, browser might not have cookies enabled');
            }
        }
    };
    NetworkCache.prototype.clear = function () {
        try {
            this.memoryCache = {};
            sessionStorage.setItem(CACHE_STORAGE_KEY, '');
        }
        catch (err) {
            console.warn('something went wrong, browser might not have cookies enabled');
        }
    };
    return NetworkCache;
}());
exports.NetworkCache = NetworkCache;
