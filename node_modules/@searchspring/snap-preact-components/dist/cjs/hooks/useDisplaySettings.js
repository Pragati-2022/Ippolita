"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDisplaySettings = void 0;
var hooks_1 = require("preact/hooks");
var useDeepCompareEffect_1 = require("./useDeepCompareEffect");
function useDisplaySettings(breakpointsObj) {
    if (!breakpointsObj || !Object.keys(breakpointsObj).length)
        return;
    // Call getDisplaySettings right away to prevent flashing
    var _a = (0, hooks_1.useState)(getDisplaySettings(breakpointsObj)), displaySettings = _a[0], setDisplaySettings = _a[1];
    var debouncedHandleResize;
    var resetResizeListener = function () {
        function handleResize() {
            // Set display settings to state
            setDisplaySettings(getDisplaySettings(breakpointsObj));
        }
        // Add event listener
        debouncedHandleResize = debounce(function () {
            handleResize();
        }, 50);
        window.addEventListener('resize', debouncedHandleResize);
    };
    (0, hooks_1.useEffect)(function () {
        resetResizeListener();
        // Remove event listener on cleanup
        return function () { return window.removeEventListener('resize', debouncedHandleResize); };
    }, []);
    // when breakpointsObj changes (due to computed values)
    (0, useDeepCompareEffect_1.useDeepCompareEffect)(function () {
        setDisplaySettings(getDisplaySettings(breakpointsObj));
        resetResizeListener();
    }, [breakpointsObj]);
    return displaySettings;
}
exports.useDisplaySettings = useDisplaySettings;
var getDisplaySettings = function (breakpoints) {
    var breakpointsSettings;
    var currentScreenWidth = window.innerWidth;
    var sortedList = Object.keys(breakpoints)
        .map(function (str) { return +str; })
        .sort(function (a, b) { return a - b; })
        .map(function (vp) {
        var _a;
        return (_a = {}, _a[vp] = breakpoints[vp], _a);
    });
    if (sortedList.length) {
        //loop through and find the desired breakpoints setting
        for (var i = 0; i < sortedList.length; i++) {
            var entry = sortedList[i];
            var breakpoint = parseInt(Object.keys(entry)[0]);
            var isLastEntry = i + 1 === sortedList.length;
            var isFirstEntry = i === 0;
            if (isLastEntry || (isFirstEntry && currentScreenWidth < breakpoint)) {
                // last entry or a '0' value breakpoint was not provided
                breakpointsSettings = sortedList[i][breakpoint];
                break;
            }
            else {
                var nextBreakpoint = parseInt(Object.keys(sortedList[i + 1])[0]);
                if (currentScreenWidth >= breakpoint && currentScreenWidth < nextBreakpoint) {
                    breakpointsSettings = sortedList[i][breakpoint];
                    break;
                }
            }
        }
        return breakpointsSettings;
    }
    return breakpointsSettings;
};
var debounce = function (func, timeout) {
    if (timeout === void 0) { timeout = 200; }
    var timer;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        clearTimeout(timer);
        timer = window.setTimeout(function () {
            func.apply(_this, args);
        }, timeout);
    };
};
