"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BranchOverride = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var hooks_1 = require("preact/hooks");
var Icon_1 = require("../../Atoms/Icon/Icon");
var utilities_1 = require("../../../utilities");
var providers_1 = require("../../../providers");
var CSS = {
    override: function (_a) {
        var componentTheme = _a.componentTheme;
        return (0, react_1.css)({
            width: '360px',
            height: '120px',
            overflow: 'hidden',
            fontSize: '14px',
            position: 'fixed',
            zIndex: '9999',
            cursor: 'auto',
            bottom: '50px',
            right: 0,
            background: componentTheme.main.background,
            color: componentTheme.main.color,
            border: componentTheme.main.border,
            borderRight: 0,
            borderTopLeftRadius: '5px',
            borderBottomLeftRadius: '5px',
            boxShadow: componentTheme.main.boxShadow,
            transition: 'height ease 0.2s, right ease 0.5s 0.2s',
            '&.ss__branch-override--collapsed': {
                transition: 'height ease 0.5s 0.5s, right ease 0.5s',
                right: '-316px',
                height: '50px',
                cursor: 'pointer',
            },
            '.ss__branch-override__top': {
                padding: '10px',
                background: componentTheme.top.background,
                borderBottom: componentTheme.top.border,
                '.ss__branch-override__top__logo': {
                    display: 'inline-block',
                    height: '30px',
                    maxHeight: '30px',
                    verticalAlign: 'middle',
                },
                '.ss__branch-override__top__collapse': {
                    display: 'inline-block',
                    float: 'right',
                    padding: '5px',
                    cursor: 'pointer',
                },
                '.ss__branch-override__top__button': {
                    borderRadius: '5px',
                    padding: '6px',
                    height: '100%',
                    lineHeight: '14px',
                    textAlign: 'center',
                    cursor: 'pointer',
                    fontSize: '10px',
                    border: componentTheme.top.button.border,
                    color: componentTheme.top.button.color,
                    float: 'right',
                    marginRight: '14px',
                },
            },
            '.ss__branch-override__bottom': {
                padding: '10px 15px',
                fontSize: '12px',
                '.ss__branch-override__bottom__left': {
                    fontWeight: 'bold',
                    fontStyle: componentTheme.bottom.branch.style,
                    color: componentTheme.bottom.branch.color,
                    fontSize: '14px',
                    lineHeight: '20px',
                    display: 'inline-flex',
                    alignItems: 'center',
                    maxWidth: '180px',
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    svg: {
                        marginRight: '10px',
                    },
                },
                '.ss__branch-override__bottom__right': {
                    float: 'right',
                    fontStyle: 'italic',
                    color: componentTheme.bottom.additional.color,
                    fontSize: '12px',
                    lineHeight: '20px',
                },
                '.ss__branch-override__bottom__content': {
                    marginTop: '10px',
                },
            },
        });
    },
};
var darkTheme = {
    class: 'ss__branch-override--dark',
    main: {
        border: '0',
        background: 'rgba(59, 35, 173, 0.9)',
        color: '#fff',
        boxShadow: '#4c3ce2 1px 1px 3px 0px',
    },
    top: {
        background: 'rgba(59, 35, 173, 0.3)',
        border: '1px solid #4c3de1',
        logo: {
            src: 'https://snapui.searchspring.io/searchspring_light.svg',
        },
        button: {
            border: '1px solid #fff',
            color: '#fff',
            content: 'STOP PREVIEW',
        },
        close: {
            fill: '#fff',
        },
    },
    bottom: {
        content: 'Preview functionality may differ from production.',
        branch: {
            color: '#03cee1',
            style: 'italic',
        },
        additional: {
            color: '#03cee1',
        },
    },
};
var lightTheme = {
    class: 'ss__branch-override--light',
    main: {
        border: '1px solid #ccc',
        background: 'rgba(255, 255, 255, 0.95)',
        color: '#515151',
        boxShadow: 'rgba(81, 81, 81, 0.5) 1px 1px 3px 0px',
    },
    top: {
        border: '1px solid #ccc',
        logo: {
            src: 'https://snapui.searchspring.io/searchspring.svg',
        },
        button: {
            border: '1px solid #515151',
            color: '#515151',
            content: 'STOP PREVIEW',
        },
        close: {
            fill: '#515151',
        },
    },
    bottom: {
        content: 'Preview functionality may differ from production.',
        branch: {
            color: '#3a23ad',
            style: 'italic',
        },
        additional: {
            color: '#3a23ad',
        },
    },
};
var failureTheme = {
    class: 'ss__branch-override--error',
    main: {
        border: '0',
        background: 'rgba(130, 6, 6, 0.9)',
        color: '#fff',
        boxShadow: 'rgba(130, 6, 6, 0.4) 1px 1px 3px 0px',
    },
    top: {
        background: 'rgba(130, 6, 6, 0.3)',
        border: '1px solid #760000',
        logo: {
            src: 'https://snapui.searchspring.io/searchspring_light.svg',
        },
        button: {
            border: '1px solid #fff',
            color: '#fff',
            content: 'REMOVE',
        },
        close: {
            fill: '#fff',
        },
    },
    bottom: {
        content: 'Incorrect branch name or branch no longer exists.',
        branch: {
            color: '#be9628',
            style: 'italic',
        },
        additional: {
            color: '#be9628',
        },
    },
};
var componentThemes = {
    darkTheme: darkTheme,
    lightTheme: lightTheme,
    failureTheme: failureTheme,
};
var BranchOverride = function (properties) {
    var _a, _b, _c, _d;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({}, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.branchOverride), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.branchOverride);
    var name = props.name, details = props.details, error = props.error, className = props.className, darkMode = props.darkMode, disableStyles = props.disableStyles, style = props.style, onRemoveClick = props.onRemoveClick;
    var subProps = {
        icon: __assign(__assign(__assign({ 
            // default props
            className: 'ss__branch-override__bottom__left__icon', size: '12px' }, (_d = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _d === void 0 ? void 0 : _d.icon), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
    };
    var prefersDark = typeof darkMode == 'boolean' ? darkMode : window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)').matches : false;
    var _e = (0, hooks_1.useState)(prefersDark ? 'darkTheme' : 'lightTheme'), themeName = _e[0], setThemeName = _e[1];
    var _f = (0, hooks_1.useState)(0), collapsed = _f[0], setCollapsed = _f[1];
    if (error) {
        setThemeName('failureTheme');
    }
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.override({ componentTheme: componentThemes[themeName] }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return (details || error) && name ? ((0, react_1.jsx)("div", __assign({ className: (0, classnames_1.default)('ss__branch-override', componentThemes[themeName].class, { 'ss__branch-override--collapsed': collapsed }, className) }, styling, { onClick: function (e) {
            e.preventDefault();
            e.stopPropagation();
            setCollapsed(0);
        } }),
        (0, react_1.jsx)("div", { className: "ss__branch-override__top" },
            (0, react_1.jsx)("img", { className: "ss__branch-override__top__logo", src: componentThemes[themeName].top.logo.src }),
            (0, react_1.jsx)("div", { className: "ss__branch-override__top__collapse", onClick: function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    setCollapsed(1);
                } },
                (0, react_1.jsx)(Icon_1.Icon, __assign({ size: "18px", color: componentThemes[themeName].top.close.fill }, subProps.icon, { icon: "close-thin" }))),
            (0, react_1.jsx)("div", { className: "ss__branch-override__top__button", onClick: function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    onRemoveClick && onRemoveClick(e, name);
                } }, componentThemes[themeName].top.button.content)),
        (0, react_1.jsx)("div", { className: "ss__branch-override__bottom" },
            (0, react_1.jsx)("span", { className: "ss__branch-override__bottom__left" }, error ? ((0, react_1.jsx)(preact_1.Fragment, null,
                (0, react_1.jsx)(Icon_1.Icon, __assign({ size: "12px", color: componentThemes[themeName].bottom.branch.color }, subProps.icon, { icon: "warn" })),
                (0, react_1.jsx)("span", null, error.message))) : (name)),
            (0, react_1.jsx)("span", { className: "ss__branch-override__bottom__right" }, error ? name : details === null || details === void 0 ? void 0 : details.lastModified),
            (0, react_1.jsx)("div", { className: "ss__branch-override__bottom__content" }, (error === null || error === void 0 ? void 0 : error.description) || componentThemes[themeName].bottom.content)))) : ((0, react_1.jsx)(preact_1.Fragment, null));
};
exports.BranchOverride = BranchOverride;
