"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = exports.PageSizeOption = exports.SearchPaginationStore = void 0;
var mobx_1 = require("mobx");
var SearchPaginationStore = /** @class */ (function () {
    function SearchPaginationStore(config, services, paginationData, meta) {
        if (paginationData === void 0) { paginationData = {
            page: undefined,
            pageSize: undefined,
            totalResults: undefined,
            totalPages: undefined,
        }; }
        var _this = this;
        var _a, _b;
        var paginationSettings = (_a = config === null || config === void 0 ? void 0 : config.settings) === null || _a === void 0 ? void 0 : _a.pagination;
        this.services = services;
        this.controllerConfig = config;
        this.page = paginationData.page;
        this.pageSize = paginationData.pageSize;
        this.totalResults = paginationData.totalResults;
        this.defaultPageSize = (_b = meta === null || meta === void 0 ? void 0 : meta.pagination) === null || _b === void 0 ? void 0 : _b.defaultPageSize;
        this.totalPages = paginationData.totalPages;
        var pageSizeOptions = (paginationSettings === null || paginationSettings === void 0 ? void 0 : paginationSettings.pageSizeOptions) || [
            {
                label: "Show ".concat(this.defaultPageSize),
                value: this.defaultPageSize,
            },
            {
                label: "Show ".concat(this.defaultPageSize * 2),
                value: this.defaultPageSize * 2,
            },
            {
                label: "Show ".concat(this.defaultPageSize * 3),
                value: this.defaultPageSize * 3,
            },
        ];
        this.pageSizeOptions = pageSizeOptions.map(function (pageOption) {
            return new PageSizeOption(_this.services, _this.pageSize, {
                label: pageOption.label,
                value: pageOption.value,
            });
        });
        (0, mobx_1.makeObservable)(this, {
            page: mobx_1.observable,
            pageSize: mobx_1.observable,
            totalResults: mobx_1.observable,
            totalPages: mobx_1.observable,
            begin: mobx_1.computed,
            end: mobx_1.computed,
            multiplePages: mobx_1.computed,
            current: mobx_1.computed,
            first: mobx_1.computed,
            last: mobx_1.computed,
            next: mobx_1.computed,
            previous: mobx_1.computed,
            getPages: mobx_1.action,
            setPageSize: mobx_1.action,
        });
    }
    Object.defineProperty(SearchPaginationStore.prototype, "begin", {
        get: function () {
            var _a;
            if ((_a = this.controllerConfig.settings) === null || _a === void 0 ? void 0 : _a.infinite) {
                return 1;
            }
            return this.pageSize * (this.page - 1) + 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SearchPaginationStore.prototype, "end", {
        get: function () {
            if (this.pageSize * this.page > this.totalResults) {
                return this.totalResults;
            }
            return this.pageSize * this.page;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SearchPaginationStore.prototype, "multiplePages", {
        get: function () {
            return this.pageSize < this.totalResults;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SearchPaginationStore.prototype, "current", {
        get: function () {
            return new Page(this.services, {
                number: this.page,
                active: true,
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SearchPaginationStore.prototype, "first", {
        get: function () {
            return new Page(this.services, {
                number: 1,
                active: this.page == 1,
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SearchPaginationStore.prototype, "last", {
        get: function () {
            return new Page(this.services, {
                number: this.totalPages,
                active: this.totalPages == this.page,
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SearchPaginationStore.prototype, "next", {
        get: function () {
            if (this.page < this.totalPages) {
                return new Page(this.services, {
                    number: this.page + 1,
                });
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SearchPaginationStore.prototype, "previous", {
        get: function () {
            if (this.page > 1) {
                return new Page(this.services, {
                    number: this.page - 1,
                });
            }
        },
        enumerable: false,
        configurable: true
    });
    SearchPaginationStore.prototype.getPages = function (min, max) {
        if (min === void 0) { min = 5; }
        if (!Number.isInteger(min)) {
            return [];
        }
        if (typeof max == 'undefined' || !Number.isInteger(max)) {
            var surrounding = min - 1;
            var from = this.page;
            var to = this.page;
            var last = to - from;
            do {
                last = to - from;
                if (to < this.totalPages) {
                    to++;
                }
                if (to - from >= surrounding) {
                    break;
                }
                if (from > 1) {
                    from--;
                }
            } while (last != to - from && to - from < surrounding);
            min = from - this.page;
            max = to - this.page;
        }
        else {
            min = -Math.abs(min);
            max = Math.abs(max);
        }
        var pages = [];
        for (var i = this.page + min; i <= this.page + max; i++) {
            if (i > 0 && i <= this.totalPages) {
                pages.push(new Page(this.services, {
                    number: i,
                    active: i == this.page,
                }));
            }
        }
        return pages;
    };
    SearchPaginationStore.prototype.setPageSize = function (num) {
        if (num) {
            this.services.urlManager.remove('page').set('pageSize', num).go();
        }
    };
    return SearchPaginationStore;
}());
exports.SearchPaginationStore = SearchPaginationStore;
var PageSizeOption = /** @class */ (function () {
    function PageSizeOption(services, currentPageSize, option) {
        var _a;
        this.services = services;
        this.value = option.value;
        this.label = option.label;
        this.url = (_a = this.services) === null || _a === void 0 ? void 0 : _a.urlManager.remove('page').set('pageSize', option.value);
        this.active = Boolean(currentPageSize == option.value);
    }
    return PageSizeOption;
}());
exports.PageSizeOption = PageSizeOption;
var Page = /** @class */ (function () {
    function Page(services, page) {
        var _a, _b;
        this.services = services;
        this.number = page.number;
        this.active = page.active || false;
        this.url = (_b = (_a = this.services) === null || _a === void 0 ? void 0 : _a.urlManager) === null || _b === void 0 ? void 0 : _b.set('page', this.number);
        this.key = this.url.href;
    }
    return Page;
}());
exports.Page = Page;
