import { AppMode } from '@searchspring/snap-toolbox';
import type { MetaRequestModel, SearchResponseModelResult, SearchRequestModel, AutocompleteRequestModel } from '@searchspring/snapi-types';
export declare type HTTPHeaders = {
    [key: string]: string;
};
declare type RequesterConfig<T> = {
    origin?: string;
    headers?: HTTPHeaders;
    cache?: CacheConfig;
    globals?: Partial<T>;
};
export declare type ClientConfig = {
    mode?: keyof typeof AppMode | AppMode;
    meta?: RequesterConfig<MetaRequestModel>;
    search?: RequesterConfig<SearchRequestModel>;
    autocomplete?: RequesterConfig<AutocompleteRequestModel> & {
        requesters?: HybridRequesterConfig;
    };
    finder?: RequesterConfig<SearchRequestModel>;
    recommend?: RequesterConfig<RecommendRequestModel>;
    suggest?: RequesterConfig<SuggestRequestModel>;
};
export declare type HybridRequesterConfig = {
    suggest?: RequesterConfig<SuggestRequestModel>;
    legacy?: RequesterConfig<SearchRequestModel | AutocompleteRequestModel>;
};
export declare type CacheConfig = Partial<DefaultCacheConfig>;
export declare type DefaultCacheConfig = {
    enabled: boolean;
    ttl: number;
    maxSize: number;
    purgeable: boolean;
    entries?: {
        [key: string]: Response;
    };
};
export declare type CacheEntry = {
    value: Response;
    expires: number;
    purgeable?: boolean;
};
export declare type Cache = {
    [key: string]: CacheEntry;
};
export declare type GenericGlobals = {
    [configurationPath: string]: any;
};
export declare type ClientGlobals = GenericGlobals & {
    siteId: string;
};
export declare type SuggestRequestModel = {
    siteId: string;
    query: string;
    language?: string;
    suggestionCount?: number;
    productCount?: number;
    disableSpellCorrect?: boolean;
    integratedSpellCorrection?: boolean;
};
export declare type SuggestResponseModelSuggestion = {
    text: string;
    type?: string;
    source?: string;
    popularity?: number;
    completed?: {
        token: string;
        query: string;
        type: string;
    }[];
};
export declare type SuggestResponseModel = {
    query: string;
    'corrected-query'?: string;
    suggested?: SuggestResponseModelSuggestion;
    alternatives?: SuggestResponseModelSuggestion[];
};
export declare type TrendingRequestModel = {
    siteId: string;
    limit?: number;
};
export declare type TrendingResponseModel = {
    trending: {
        queries: {
            popularity: number;
            searchQuery: string;
        }[];
    };
};
export declare type RecommendRequestModel = {
    tags: string[];
    siteId: string;
    product?: string;
    shopper?: string;
    categories?: string[];
    cart?: string[];
    lastViewed?: string[];
    test?: boolean;
    batched?: boolean;
    limits?: number | number[];
    order?: number;
};
export declare type RecommendResponseModel = {
    profile: {
        tag: string;
    };
    results: SearchResponseModelResult[];
}[];
export declare type ProfileRequestModel = {
    siteId: string;
    tag: string;
    branch?: string;
};
export declare type ProfileResponseModel = {
    profile: {
        tag: string;
        placement: string;
        display: {
            threshold: number;
            template: {
                name: string;
                uuid: string;
                markup?: string;
                styles?: string;
                component?: string;
                branch?: string;
                group?: string;
            };
            templateParameters: {
                [any: string]: unknown;
            };
        };
    };
};
export declare type RecommendCombinedRequestModel = {
    tag: string;
    siteId: string;
    product?: string;
    shopper?: string;
    categories?: string[];
    cart?: string[];
    lastViewed?: string[];
    test?: boolean;
    branch?: string;
};
export declare type RecommendCombinedResponseModel = ProfileResponseModel & {
    results: SearchResponseModelResult[];
};
export {};
//# sourceMappingURL=types.d.ts.map