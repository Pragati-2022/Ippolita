import { Product } from '@searchspring/snap-store-mobx';
import { BeaconEvent } from '@searchspring/snap-tracker';
import { AbstractController } from '../Abstract/AbstractController';
import { ControllerTypes } from '../types';
import type { RecommendationStore } from '@searchspring/snap-store-mobx';
import type { RecommendationControllerConfig, ControllerServices, ContextVariables } from '../types';
declare type RecommendationTrackMethods = {
    product: {
        click: (e: MouseEvent, result: any) => BeaconEvent | undefined;
        render: (result: any) => BeaconEvent | undefined;
        impression: (result: any) => BeaconEvent | undefined;
    };
    click: (e: MouseEvent) => BeaconEvent | undefined;
    impression: () => BeaconEvent | undefined;
    render: (results?: Product[]) => BeaconEvent | undefined;
};
declare type RecommendCombinedRequestModel = {
    tag: string;
    siteId: string;
    product?: string;
    shopper?: string;
    categories?: string[];
    cart?: string[];
    lastViewed?: string[];
    test?: boolean;
    branch?: string;
};
export declare class RecommendationController extends AbstractController {
    type: ControllerTypes;
    store: RecommendationStore;
    config: RecommendationControllerConfig;
    events: {
        click?: BeaconEvent;
        impression?: BeaconEvent;
        render?: BeaconEvent;
        product?: Record<string, {
            impression?: BeaconEvent;
            render?: BeaconEvent;
        }>;
    };
    constructor(config: RecommendationControllerConfig, { client, store, urlManager, eventManager, profiler, logger, tracker }: ControllerServices, context?: ContextVariables);
    track: RecommendationTrackMethods;
    get params(): RecommendCombinedRequestModel;
    search: () => Promise<void>;
}
export {};
//# sourceMappingURL=RecommendationController.d.ts.map