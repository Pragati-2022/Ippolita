/** @jsx jsx */
import { Fragment } from 'preact';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import deepmerge from 'deepmerge';
import { Carousel, defaultCarouselBreakpoints, defaultVerticalCarouselBreakpoints } from '../../Molecules/Carousel';
import { Result } from '../../Molecules/Result';
import { defined } from '../../../utilities';
import { useTheme, CacheProvider } from '../../../providers';
import { useDisplaySettings } from '../../../hooks/useDisplaySettings';
import { RecommendationProfileTracker } from '../../Trackers/Recommendation/ProfileTracker';
import { RecommendationResultTracker } from '../../Trackers/Recommendation/ResultTracker';
const CSS = {
    recommendation: ({ vertical }) => css({
        height: vertical ? '100%' : undefined,
        '.ss__result__image-wrapper': {
            height: vertical ? '85%' : undefined,
        },
    }),
};
export const Recommendation = observer((properties) => {
    const globalTheme = useTheme();
    let props = {
        // default props
        breakpoints: properties.vertical
            ? JSON.parse(JSON.stringify(defaultVerticalCarouselBreakpoints))
            : JSON.parse(JSON.stringify(defaultCarouselBreakpoints)),
        pagination: false,
        loop: true,
        // global theme
        ...globalTheme?.components?.recommendation,
        ...properties,
        // props
        ...properties.theme?.components?.recommendation,
    };
    const displaySettings = useDisplaySettings(props.breakpoints);
    if (displaySettings && Object.keys(displaySettings).length) {
        const theme = deepmerge(props?.theme || {}, displaySettings?.theme || {}, { arrayMerge: (destinationArray, sourceArray) => sourceArray });
        props = {
            ...props,
            ...displaySettings,
            theme,
        };
    }
    const { title, controller, children, breakpoints, loop, results, pagination, nextButton, prevButton, hideButtons, disableStyles, style, className, vertical, ...additionalProps } = props;
    if (!controller || controller.type !== 'recommendation') {
        throw new Error(`<Recommendation> Component requires 'controller' prop with an instance of RecommendationController`);
    }
    const resultsToRender = results || controller.store?.results;
    if (Array.isArray(children) && children.length !== resultsToRender.length) {
        controller.log.error(`<Recommendation> Component received invalid number of children. Must match length of 'results' prop or 'controller.store.results'`);
        return jsx(Fragment, null);
    }
    const subProps = {
        carousel: {
            // default props
            className: 'ss__recommendation__Carousel',
            // global theme
            ...globalTheme?.components?.carousel,
            // inherited props
            ...defined({
                disableStyles,
                vertical,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        result: {
            // default props
            className: 'ss__recommendation__result',
            // global theme
            ...globalTheme?.components?.result,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
    };
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.recommendation({ vertical }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return children || resultsToRender?.length ? (jsx(CacheProvider, null,
        jsx("div", { ...styling, className: classnames('ss__recommendation', className) },
            jsx(RecommendationProfileTracker, { controller: controller },
                title && jsx("h3", { className: "ss__recommendation__title" }, title),
                jsx(Carousel, { prevButton: prevButton, nextButton: nextButton, hideButtons: hideButtons, loop: loop, pagination: pagination, breakpoints: breakpoints, ...subProps.carousel, ...additionalProps, ...displaySettings }, Array.isArray(children) && children.length
                    ? children.map((child, idx) => (jsx(RecommendationResultTracker, { controller: controller, result: resultsToRender[idx] }, child)))
                    : resultsToRender.map((result) => (jsx(RecommendationResultTracker, { controller: controller, result: result },
                        jsx(Result, { ...subProps.result, controller: controller, result: result }))))))))) : (jsx(Fragment, null));
});
