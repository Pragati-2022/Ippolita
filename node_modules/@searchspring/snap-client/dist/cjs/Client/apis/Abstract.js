"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.querystring = exports.ApiConfiguration = exports.API = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var fibonacci_1 = require("../utils/fibonacci");
var NetworkCache_1 = require("../NetworkCache/NetworkCache");
var isBlob = function (value) { return typeof Blob !== 'undefined' && value instanceof Blob; };
var API = /** @class */ (function () {
    function API(configuration) {
        this.configuration = configuration;
        this.retryDelay = 1000;
        this.retryCount = 0;
        this.cache = new NetworkCache_1.NetworkCache(this.configuration.cache);
    }
    Object.defineProperty(API.prototype, "mode", {
        get: function () {
            return this.configuration.mode;
        },
        enumerable: false,
        configurable: true
    });
    API.prototype.request = function (context, cacheKey) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, url, init, cachedResponse, response, responseJSON, err_1;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = this.createFetchParams(context), url = _b.url, init = _b.init;
                        if (cacheKey) {
                            cachedResponse = this.cache.get(cacheKey);
                            if (cachedResponse) {
                                this.retryCount = 0; // reset count and delay incase rate limit occurs again before a page refresh
                                this.retryDelay = 1000;
                                return [2 /*return*/, cachedResponse];
                            }
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 10, , 13]);
                        return [4 /*yield*/, this.fetchApi(url, init)];
                    case 2:
                        response = _c.sent();
                        return [4 /*yield*/, (response === null || response === void 0 ? void 0 : response.json())];
                    case 3:
                        responseJSON = _c.sent();
                        if (!(response.status >= 200 && response.status < 300)) return [3 /*break*/, 4];
                        this.retryCount = 0; // reset count and delay incase rate limit occurs again before a page refresh
                        this.retryDelay = 1000;
                        if (cacheKey) {
                            // save in the cache before returning
                            this.cache.set(cacheKey, responseJSON);
                        }
                        return [2 /*return*/, responseJSON];
                    case 4:
                        if (!(response.status == 429)) return [3 /*break*/, 8];
                        if (!(this.retryCount < this.configuration.maxRetry)) return [3 /*break*/, 6];
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, _this.retryDelay); })];
                    case 5:
                        _c.sent(); // delay retry
                        this.retryDelay = (0, fibonacci_1.fibonacci)(this.retryCount) * 1000;
                        this.retryCount++;
                        throw new Error('Rate limited.');
                    case 6: throw new Error('Retry rate limit exceeded.');
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        if (response.status == 404 && (responseJSON === null || responseJSON === void 0 ? void 0 : responseJSON.message) == 'Profile is currently paused') {
                            //dont throw if profile is paused.
                            throw new Error("".concat(responseJSON.message, ": ").concat((_a = context.query) === null || _a === void 0 ? void 0 : _a.tag));
                        }
                        _c.label = 9;
                    case 9: throw new Error('Unexpected Response Status.');
                    case 10:
                        err_1 = _c.sent();
                        if (!(err_1.message == 'Rate limited.')) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.request(context, cacheKey)];
                    case 11: return [2 /*return*/, _c.sent()];
                    case 12: 
                    // throw an object with fetch details
                    throw { err: err_1, fetchDetails: __assign({ status: response === null || response === void 0 ? void 0 : response.status, message: (response === null || response === void 0 ? void 0 : response.statusText) || 'FAILED', url: url }, init) };
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    API.prototype.createFetchParams = function (context) {
        var _a, _b;
        // grab siteID out of context to generate apiHost fo URL
        var siteId = ((_a = context === null || context === void 0 ? void 0 : context.body) === null || _a === void 0 ? void 0 : _a.siteId) || ((_b = context === null || context === void 0 ? void 0 : context.query) === null || _b === void 0 ? void 0 : _b.siteId);
        if (!siteId) {
            throw new Error("Request failed. Missing \"siteId\" parameter.");
        }
        var siteIdHost = "https://".concat(siteId, ".a.searchspring.io");
        var origin = (this.configuration.origin || siteIdHost).replace(/\/$/, '');
        var url = "".concat(origin, "/").concat(context.path.replace(/^\//, ''));
        // merging globals to request query
        var combinedQuery = (0, deepmerge_1.default)(context.query || {}, this.configuration.globals);
        if (Object.keys(combinedQuery).length !== 0) {
            // only add the querystring to the URL if there are query parameters.
            url += '?' + this.configuration.queryParamsStringify(combinedQuery);
        }
        // merging globals to request body
        var body = (typeof FormData !== 'undefined' && context.body instanceof FormData) || context.body instanceof URLSearchParams || isBlob(context.body)
            ? context.body
            : JSON.stringify(context.body ? (0, deepmerge_1.default)(context.body, this.configuration.globals) : context.body);
        var headers = __assign(__assign({}, this.configuration.headers), context.headers);
        var init = {
            method: context.method,
            headers: headers,
            body: body,
        };
        return { url: url, init: init };
    };
    API.prototype.fetchApi = function (url, init) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.configuration.fetchApi(url, init)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return API;
}());
exports.API = API;
var ApiConfiguration = /** @class */ (function () {
    function ApiConfiguration(config) {
        if (config === void 0) { config = {}; }
        this.config = config;
        if (!config.maxRetry) {
            this.config.maxRetry = 8;
        }
        this.config.cache = this.config.cache || {};
        this.config.mode = this.config.mode || snap_toolbox_1.AppMode.production;
        if (this.config.mode == snap_toolbox_1.AppMode.development) {
            this.config.cache.enabled = false;
        }
    }
    Object.defineProperty(ApiConfiguration.prototype, "cache", {
        get: function () {
            var _a;
            return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.cache) || {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiConfiguration.prototype, "maxRetry", {
        get: function () {
            return this.config.maxRetry || 8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiConfiguration.prototype, "origin", {
        get: function () {
            return this.config.origin || '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiConfiguration.prototype, "fetchApi", {
        get: function () {
            return this.config.fetchApi || window.fetch.bind(window);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiConfiguration.prototype, "queryParamsStringify", {
        get: function () {
            return this.config.queryParamsStringify || querystring;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiConfiguration.prototype, "headers", {
        get: function () {
            return this.config.headers || {};
        },
        set: function (newHeaders) {
            this.config.headers = newHeaders;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiConfiguration.prototype, "globals", {
        get: function () {
            return this.config.globals || {};
        },
        set: function (newGlobals) {
            this.config.globals = newGlobals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiConfiguration.prototype, "mode", {
        get: function () {
            return this.config.mode;
        },
        enumerable: false,
        configurable: true
    });
    return ApiConfiguration;
}());
exports.ApiConfiguration = ApiConfiguration;
function querystring(params, prefix) {
    if (prefix === void 0) { prefix = ''; }
    return Object.keys(params)
        .map(function (key) {
        var fullKey = prefix + (prefix.length ? "[".concat(key, "]") : key);
        var value = params[key];
        if (value instanceof Array) {
            var multiValue = value.map(function (singleValue) { return encodeURIComponent(String(singleValue)); }).join("&".concat(encodeURIComponent(fullKey), "="));
            return "".concat(encodeURIComponent(fullKey), "=").concat(multiValue);
        }
        if (value instanceof Date) {
            return "".concat(encodeURIComponent(fullKey), "=").concat(encodeURIComponent(value.toISOString()));
        }
        if (value instanceof Object) {
            return querystring(value, fullKey);
        }
        return "".concat(encodeURIComponent(fullKey), "=").concat(encodeURIComponent(String(value)));
    })
        .filter(function (part) { return part.length > 0; })
        .join('&');
}
exports.querystring = querystring;
