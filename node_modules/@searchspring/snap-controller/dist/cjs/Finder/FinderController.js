"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinderController = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var AbstractController_1 = require("../Abstract/AbstractController");
var getParams_1 = require("../utils/getParams");
var types_1 = require("../types");
var defaultConfig = {
    id: 'finder',
    globals: {
        pagination: {
            pageSize: 0,
        },
    },
    fields: [],
    persist: {
        enabled: false,
        lockSelections: true,
        expiration: 0,
    },
};
var FinderController = /** @class */ (function (_super) {
    __extends(FinderController, _super);
    function FinderController(config, _a, context) {
        var client = _a.client, store = _a.store, urlManager = _a.urlManager, eventManager = _a.eventManager, profiler = _a.profiler, logger = _a.logger, tracker = _a.tracker;
        var _this = _super.call(this, config, { client: client, store: store, urlManager: urlManager, eventManager: eventManager, profiler: profiler, logger: logger, tracker: tracker }, context) || this;
        _this.type = types_1.ControllerTypes.finder;
        _this.find = function () { return __awaiter(_this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.store.save()];
                    case 1:
                        _a.sent(); // save current selections to storage
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.eventManager.fire('beforeFind', {
                                controller: this,
                            })];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        if ((err_1 === null || err_1 === void 0 ? void 0 : err_1.message) == 'cancelled') {
                            this.log.warn("'beforeFind' middleware cancelled");
                        }
                        else {
                            this.log.error("error in 'beforeFind' middleware");
                            this.log.error(err_1);
                        }
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        _this.reset = function () {
            _this.store.reset();
            _this.urlManager.remove('filter').go();
            _this.store.setService('urlManager', _this.urlManager);
        };
        _this.search = function () { return __awaiter(_this, void 0, void 0, function () {
            var params, err_2, searchProfile, _a, meta, response, afterSearchProfile, err_3, afterStoreProfile, err_4, err_5;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.initialized) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        if (this.store.state.persisted) {
                            return [2 /*return*/];
                        }
                        params = this.params;
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 17, , 18]);
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.eventManager.fire('beforeSearch', {
                                controller: this,
                                request: params,
                            })];
                    case 5:
                        _b.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _b.sent();
                        if ((err_2 === null || err_2 === void 0 ? void 0 : err_2.message) == 'cancelled') {
                            this.log.warn("'beforeSearch' middleware cancelled");
                            return [2 /*return*/];
                        }
                        else {
                            this.log.error("error in 'beforeSearch' middleware");
                            throw err_2;
                        }
                        return [3 /*break*/, 7];
                    case 7:
                        searchProfile = this.profiler.create({ type: 'event', name: 'search', context: params }).start();
                        return [4 /*yield*/, this.client.finder(params)];
                    case 8:
                        _a = _b.sent(), meta = _a[0], response = _a[1];
                        // @ts-ignore : MockClient will overwrite the client search() method and use SearchData to return mock data which already contains meta data
                        if (!response.meta) {
                            // @ts-ignore : MockClient will overwrite the client search() method and use SearchData to return mock data which already contains meta data
                            response.meta = meta;
                        }
                        searchProfile.stop();
                        this.log.profile(searchProfile);
                        afterSearchProfile = this.profiler.create({ type: 'event', name: 'afterSearch', context: params }).start();
                        _b.label = 9;
                    case 9:
                        _b.trys.push([9, 11, , 12]);
                        return [4 /*yield*/, this.eventManager.fire('afterSearch', {
                                controller: this,
                                request: params,
                                response: response,
                            })];
                    case 10:
                        _b.sent();
                        return [3 /*break*/, 12];
                    case 11:
                        err_3 = _b.sent();
                        if ((err_3 === null || err_3 === void 0 ? void 0 : err_3.message) == 'cancelled') {
                            this.log.warn("'afterSearch' middleware cancelled");
                            afterSearchProfile.stop();
                            return [2 /*return*/];
                        }
                        else {
                            this.log.error("error in 'afterSearch' middleware");
                            throw err_3;
                        }
                        return [3 /*break*/, 12];
                    case 12:
                        afterSearchProfile.stop();
                        this.log.profile(afterSearchProfile);
                        // update the store
                        // @ts-ignore : MockClient will overwrite the client search() method and use SearchData to return mock data which already contains meta data
                        this.store.update(response);
                        afterStoreProfile = this.profiler.create({ type: 'event', name: 'afterStore', context: params }).start();
                        _b.label = 13;
                    case 13:
                        _b.trys.push([13, 15, , 16]);
                        return [4 /*yield*/, this.eventManager.fire('afterStore', {
                                controller: this,
                                request: params,
                                response: response,
                            })];
                    case 14:
                        _b.sent();
                        return [3 /*break*/, 16];
                    case 15:
                        err_4 = _b.sent();
                        if ((err_4 === null || err_4 === void 0 ? void 0 : err_4.message) == 'cancelled') {
                            this.log.warn("'afterStore' middleware cancelled");
                            afterStoreProfile.stop();
                            return [2 /*return*/];
                        }
                        else {
                            this.log.error("error in 'afterStore' middleware");
                            throw err_4;
                        }
                        return [3 /*break*/, 16];
                    case 16:
                        afterStoreProfile.stop();
                        this.log.profile(afterStoreProfile);
                        return [3 /*break*/, 18];
                    case 17:
                        err_5 = _b.sent();
                        if (err_5) {
                            if (err_5.err && err_5.fetchDetails) {
                                switch (err_5.fetchDetails.status) {
                                    case 429: {
                                        this.store.error = {
                                            code: 429,
                                            type: snap_store_mobx_1.ErrorType.WARNING,
                                            message: 'Too many requests try again later',
                                        };
                                        break;
                                    }
                                    case 500: {
                                        this.store.error = {
                                            code: 500,
                                            type: snap_store_mobx_1.ErrorType.ERROR,
                                            message: 'Invalid Search Request or Service Unavailable',
                                        };
                                        break;
                                    }
                                    default: {
                                        this.store.error = {
                                            type: snap_store_mobx_1.ErrorType.ERROR,
                                            message: err_5.err.message,
                                        };
                                        break;
                                    }
                                }
                                this.log.error(this.store.error);
                                this.handleError(err_5.err, err_5.fetchDetails);
                            }
                            else {
                                this.store.error = {
                                    type: snap_store_mobx_1.ErrorType.ERROR,
                                    message: "Something went wrong... - ".concat(err_5),
                                };
                                this.log.error(err_5);
                                this.handleError(err_5);
                            }
                            this.store.loading = false;
                        }
                        return [3 /*break*/, 18];
                    case 18: return [2 /*return*/];
                }
            });
        }); };
        // deep merge config with defaults
        _this.config = (0, deepmerge_1.default)(defaultConfig, _this.config);
        _this.store.setConfig(_this.config);
        // set the root URL on urlManager
        if (_this.config.url) {
            _this.urlManager = _this.urlManager.withConfig(function (translatorConfig) {
                return __assign(__assign({}, translatorConfig), { urlRoot: _this.config.url });
            });
        }
        _this.eventManager.on('beforeSearch', function (finder, next) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        finder.controller.store.loading = true;
                        return [4 /*yield*/, next()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        // TODO: move this to afterStore
        _this.eventManager.on('afterSearch', function (finder, next) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, next()];
                    case 1:
                        _a.sent();
                        finder.controller.store.loading = false;
                        return [2 /*return*/];
                }
            });
        }); });
        _this.eventManager.on('beforeFind', function (finder, next) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, next()];
                    case 1:
                        _a.sent();
                        window.location.href = this.urlManager.href;
                        return [2 /*return*/];
                }
            });
        }); });
        // attach config plugins and event middleware
        _this.use(_this.config);
        _this.store.loadPersisted();
        return _this;
    }
    Object.defineProperty(FinderController.prototype, "params", {
        get: function () {
            var urlState = this.urlManager.state;
            var userId = this.tracker.getUserId();
            var sessionId = this.tracker.getContext().sessionId;
            var pageLoadId = this.tracker.getContext().pageLoadId;
            var tracking = {};
            if (userId) {
                tracking.userId = userId;
            }
            if (sessionId) {
                tracking.sessionId = sessionId;
            }
            if (pageLoadId) {
                tracking.pageLoadId = pageLoadId;
            }
            tracking.domain = window.location.href;
            // get only the finder fields and disable auto drill down
            var defaultParams = {
                facets: {
                    include: this.config.fields.map(function (fieldConfig) { return fieldConfig.field; }),
                    autoDrillDown: false,
                },
                tracking: tracking,
            };
            var params = (0, deepmerge_1.default)(__assign({}, (0, getParams_1.getSearchParams)(urlState)), (0, deepmerge_1.default)(defaultParams, this.config.globals));
            return params;
        },
        enumerable: false,
        configurable: true
    });
    return FinderController;
}(AbstractController_1.AbstractController));
exports.FinderController = FinderController;
