/** @jsx jsx */
/** @jsx h */
import { Fragment } from 'preact';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import { useTheme, CacheProvider } from '../../../providers';
import { useA11y } from '../../../hooks/useA11y';
const CSS = {
    button: ({ color, backgroundColor, borderColor, theme }) => css({
        display: 'inline-flex',
        padding: '5px 10px',
        position: 'relative',
        color: color || theme?.colors?.primary,
        outline: 0,
        backgroundColor: backgroundColor || '#fff',
        border: `1px solid ${borderColor || color || theme?.colors?.primary || '#333'}`,
        '&:hover': {
            cursor: 'pointer',
            backgroundColor: theme?.colors?.hover || '#f8f8f8',
        },
        '&.ss__button--disabled': {
            opacity: 0.7,
            borderColor: 'rgba(51,51,51,0.7)',
            backgroundColor: 'initial',
            '&:hover': {
                cursor: 'default',
            },
        },
    }),
    native: () => css({}),
};
export const Button = observer((properties) => {
    const globalTheme = useTheme();
    const theme = { ...globalTheme, ...properties.theme };
    const props = {
        // default props
        disableA11y: false,
        // global theme
        ...globalTheme?.components?.button,
        // props
        ...properties,
        ...properties.theme?.components?.button,
    };
    const { backgroundColor, borderColor, color, content, children, disabled, native, onClick, disableA11y, disableStyles, className, style } = props;
    const elementProps = {
        css: disableStyles
            ? [style]
            : native
                ? [CSS.native(), style]
                : [
                    CSS.button({
                        color,
                        backgroundColor,
                        borderColor,
                        theme,
                    }),
                    style,
                ],
        className: classnames('ss__button', { 'ss__button--disabled': disabled }, className),
        disabled,
        onClick: (e) => !disabled && onClick && onClick(e),
    };
    const a11yProps = {
        ref: (e) => useA11y(e),
    };
    return content || children ? (jsx(CacheProvider, null, native ? (jsx("button", { ...elementProps },
        content,
        children)) : (jsx("div", { ...(!disableA11y ? a11yProps : {}), ...elementProps, role: 'button', "aria-disabled": disabled },
        content,
        children)))) : (jsx(Fragment, null));
});
