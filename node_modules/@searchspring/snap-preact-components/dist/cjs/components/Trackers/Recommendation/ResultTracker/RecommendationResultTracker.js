"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationResultTracker = void 0;
var react_1 = require("@emotion/react");
var hooks_1 = require("preact/hooks");
var mobx_react_lite_1 = require("mobx-react-lite");
var providers_1 = require("../../../../providers");
var hooks_2 = require("../../../../hooks");
var classnames_1 = __importDefault(require("classnames"));
var CSS = {
    RecommendationResultTracker: function () { return (0, react_1.css)({}); },
};
exports.RecommendationResultTracker = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({}, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.RecommendationResultTracker), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.RecommendationResultTracker);
    var children = props.children, result = props.result, controller = props.controller, className = props.className, disableStyles = props.disableStyles, style = props.style;
    var resultRef = (0, hooks_1.useRef)(null);
    var resultInViewport = (0, hooks_2.useIntersection)(resultRef, '0px');
    if (!controller.events.render) {
        controller.log.warn('<RecommendationResultTracker> used without <RecommendationProfileTracker>');
    }
    controller.track.product.render(result);
    if (resultInViewport) {
        // intersection observer can trigger in any random order,
        // so we need to check if profile impression has been sent and send if not.
        if (!controller.events.impression) {
            controller.track.impression();
        }
        controller.track.product.impression(result);
    }
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.RecommendationResultTracker(), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return ((0, react_1.jsx)("div", __assign({ className: (0, classnames_1.default)('ss__recommendation-result-tracker', className), onClick: function (e) { return controller.track.product.click(e, result); }, ref: resultRef }, styling), children));
});
