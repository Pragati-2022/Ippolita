"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkbox = void 0;
var hooks_1 = require("preact/hooks");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var mobx_react_lite_1 = require("mobx-react-lite");
var utilities_1 = require("../../../utilities");
var providers_1 = require("../../../providers");
var Icon_1 = require("../../Atoms/Icon");
var useA11y_1 = require("../../../hooks/useA11y");
var CSS = {
    checkbox: function (_a) {
        var _b;
        var size = _a.size, color = _a.color, theme = _a.theme;
        return (0, react_1.css)({
            display: 'inline-flex',
            alignItems: 'center',
            justifyContent: 'center',
            height: size,
            width: size,
            border: "1px solid ".concat(color || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary) || '#333'),
            '&.ss__checkbox--disabled': {
                opacity: 0.7,
            },
            '& .ss__checkbox__empty': {
                display: 'inline-block',
                width: "calc(".concat(size, " - 30%)"),
                height: "calc(".concat(size, " - 30%)"),
            },
        });
    },
    native: function () { return (0, react_1.css)({}); },
};
exports.Checkbox = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a;
    var _b, _c, _d, _e, _f;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({ 
        // default props
        size: '12px', startChecked: false, disableA11y: false }, (_b = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _b === void 0 ? void 0 : _b.checkbox), properties), (_d = (_c = properties.theme) === null || _c === void 0 ? void 0 : _c.components) === null || _d === void 0 ? void 0 : _d.checkbox);
    var checked = props.checked, color = props.color, disabled = props.disabled, icon = props.icon, iconColor = props.iconColor, onClick = props.onClick, size = props.size, startChecked = props.startChecked, native = props.native, disableA11y = props.disableA11y, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var subProps = {
        icon: __assign(__assign(__assign({ 
            // default props
            className: 'ss__checkbox__icon', icon: 'check-thin' }, (_e = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _e === void 0 ? void 0 : _e.icon), (0, utilities_1.defined)({
            color: iconColor || color || ((_f = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _f === void 0 ? void 0 : _f.primary),
            disableStyles: disableStyles,
            icon: icon,
            size: size && "calc(".concat(size, " - 30%)"),
        })), { 
            // component theme overrides
            theme: props.theme }),
    };
    var checkedState, setCheckedState;
    var stateful = checked === undefined;
    if (stateful) {
        _a = (0, hooks_1.useState)(startChecked), checkedState = _a[0], setCheckedState = _a[1];
    }
    else {
        checkedState = checked;
    }
    var clickFunc = function (e) {
        if (!disabled) {
            if (stateful) {
                setCheckedState &&
                    setCheckedState(function (prev) {
                        return !prev;
                    });
            }
            onClick && onClick(e);
        }
    };
    var styling = {};
    if (!disableStyles) {
        if (native) {
            styling.css = [CSS.native(), style];
        }
        else {
            styling.css = [CSS.checkbox({ size: size, color: color, theme: theme }), style];
        }
    }
    else if (style) {
        styling.css = [style];
    }
    return ((0, react_1.jsx)(providers_1.CacheProvider, null, native ? ((0, react_1.jsx)("input", __assign({}, styling, { className: (0, classnames_1.default)('ss__checkbox', { 'ss__checkbox--disabled': disabled }, className), type: "checkbox", onClick: function (e) { return clickFunc(e); }, disabled: disabled, checked: checkedState }))) : ((0, react_1.jsx)("span", __assign({}, styling, { className: (0, classnames_1.default)('ss__checkbox', { 'ss__checkbox--disabled': disabled }, className), onClick: function (e) { return clickFunc(e); }, ref: function (e) { return (!disableA11y ? (0, useA11y_1.useA11y)(e) : null); }, "aria-label": "".concat(disabled ? 'disabled' : '', " ").concat(checkedState ? 'checked' : 'unchecked', " checkbox"), role: "checkbox" }), checkedState ? (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon)) : (0, react_1.jsx)("span", { className: "ss__checkbox__empty" })))));
});
