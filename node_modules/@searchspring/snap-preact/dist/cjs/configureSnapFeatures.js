"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureSnapFeatures = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
function configureSnapFeatures(config) {
    /* configure snap features by mutating the config as needed */
    configureIntegratedSpellCorrection(config);
}
exports.configureSnapFeatures = configureSnapFeatures;
function configureIntegratedSpellCorrection(config) {
    var _a, _b;
    if ((_b = (_a = config.features) === null || _a === void 0 ? void 0 : _a.integratedSpellCorrection) === null || _b === void 0 ? void 0 : _b.enabled) {
        if (config.client) {
            config.client.config = (0, deepmerge_1.default)({
                autocomplete: {
                    requesters: {
                        suggest: {
                            globals: {
                                integratedSpellCorrection: true,
                            },
                        },
                    },
                },
            }, config.client.config || {});
        }
        // loop through controllers config and toggle integratedSpellCorrection setting
        Object.keys((config === null || config === void 0 ? void 0 : config.controllers) || {}).forEach(function (type) {
            switch (type) {
                case 'autocomplete': {
                    config.controllers[type].forEach(function (controller) {
                        var _a, _b, _c, _d;
                        if (typeof ((_b = (_a = controller.config) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.integratedSpellCorrection) == 'undefined') {
                            // enable integratedSpellCorrection controller setting
                            controller.config.settings = (0, deepmerge_1.default)({ integratedSpellCorrection: true }, controller.config.settings || {});
                        }
                        if ((_d = (_c = controller.config) === null || _c === void 0 ? void 0 : _c.settings) === null || _d === void 0 ? void 0 : _d.integratedSpellCorrection) {
                            // set spell correction globals for convenience
                            controller.config.globals = (0, deepmerge_1.default)({
                                search: {
                                    query: {
                                        spellCorrection: true,
                                    },
                                },
                            }, controller.config.globals || {});
                        }
                    });
                    break;
                }
            }
        });
    }
}
