import type { ImmutableObject } from 'seamless-immutable';
export declare type ImmutableUrlState = ImmutableObject<UrlState>;
export declare enum RangeValueProperties {
    LOW = "low",
    HIGH = "high"
}
export declare type UrlStateRangeValue = {
    [RangeValueProperties.LOW]: number | null;
    [RangeValueProperties.HIGH]: number | null;
};
export declare type UrlStateFilterType = string | number | boolean | UrlStateRangeValue;
export declare type UrlStateFilter = {
    [fieldName: string]: UrlStateFilterType | Array<UrlStateFilterType>;
};
export declare type UrlStateSort = {
    field: string;
    direction: string;
};
export declare type UrlState = {
    page?: number;
    pageSize?: number;
    query?: string;
    rq?: string;
    oq?: string;
    fallbackQuery?: string;
    filter?: UrlStateFilter;
    sort?: UrlStateSort | Array<UrlStateSort>;
    tag?: string;
    [any: string]: unknown;
};
export interface Translator {
    getCurrentUrl(): string;
    getConfig(): Record<string, unknown>;
    serialize(state: UrlState | ImmutableObject<UrlState>): string;
    deserialize(url: string): UrlState;
    bindExternalEvents?(update: () => void): void;
    go(url: string, config?: {
        [any: string]: unknown;
    }): void;
}
export interface TranslatorConfig {
    urlRoot?: string;
    settings?: {
        serializeUrlRoot?: boolean;
        [any: string]: unknown;
    };
    [any: string]: unknown;
}
export declare enum ParamLocationType {
    hash = "hash",
    query = "query"
}
//# sourceMappingURL=types.d.ts.map