"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HybridAPI = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var _1 = require(".");
var transforms_1 = require("../transforms");
var HybridAPI = /** @class */ (function (_super) {
    __extends(HybridAPI, _super);
    function HybridAPI(configuration, requesterConfigurations) {
        var _this = _super.call(this, configuration) || this;
        var legacyConfig = (0, deepmerge_1.default)({
            mode: configuration.mode,
            origin: configuration.origin,
            cache: _this.configuration.cache,
        }, (requesterConfigurations === null || requesterConfigurations === void 0 ? void 0 : requesterConfigurations.legacy) || {});
        if (configuration.mode == snap_toolbox_1.AppMode.development) {
            legacyConfig.headers = __assign(__assign({}, legacyConfig.headers), { 'searchspring-no-beacon': '' });
        }
        var suggestConfig = (0, deepmerge_1.default)({
            mode: configuration.mode,
            origin: configuration.origin,
            cache: _this.configuration.cache,
        }, (requesterConfigurations === null || requesterConfigurations === void 0 ? void 0 : requesterConfigurations.suggest) || {});
        var legacyConfiguration = new _1.ApiConfiguration(legacyConfig);
        var suggestConfiguration = new _1.ApiConfiguration(suggestConfig);
        _this.requesters = {
            legacy: new _1.LegacyAPI(legacyConfiguration),
            suggest: new _1.SuggestAPI(suggestConfiguration),
        };
        return _this;
    }
    HybridAPI.prototype.getMeta = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var legacyRequestParameters;
            return __generator(this, function (_a) {
                legacyRequestParameters = requestParameters;
                return [2 /*return*/, this.requesters.legacy.getMeta(legacyRequestParameters)];
            });
        });
    };
    HybridAPI.prototype.getSearch = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var legacyRequestParameters, legacyData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        legacyRequestParameters = (0, transforms_1.transformSearchRequest)(requestParameters);
                        return [4 /*yield*/, this.requesters.legacy.getSearch(legacyRequestParameters)];
                    case 1:
                        legacyData = _a.sent();
                        return [2 /*return*/, (0, transforms_1.transformSearchResponse)(legacyData, requestParameters)];
                }
            });
        });
    };
    HybridAPI.prototype.getFinder = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var legacyRequestParameters, legacyData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        legacyRequestParameters = (0, transforms_1.transformSearchRequest)(requestParameters);
                        return [4 /*yield*/, this.requesters.legacy.getFinder(legacyRequestParameters)];
                    case 1:
                        legacyData = _a.sent();
                        return [2 /*return*/, (0, transforms_1.transformSearchResponse)(legacyData, requestParameters)];
                }
            });
        });
    };
    HybridAPI.prototype.getAutocomplete = function (requestParameters) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var legacyRequestParameters, suggestParams, suggestResults, transformedSuggestResults, q, queryParameters, legacyResults, searchResults;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        legacyRequestParameters = (0, transforms_1.transformSearchRequest)(requestParameters);
                        suggestParams = {
                            siteId: legacyRequestParameters.siteId,
                            language: 'en',
                            query: legacyRequestParameters.q,
                            suggestionCount: (requestParameters.suggestions || {}).count || 5,
                        };
                        if (!((requestParameters.search || {}).query || {}).spellCorrection) {
                            suggestParams.disableSpellCorrect = true;
                        }
                        return [4 /*yield*/, this.requesters.suggest.getSuggest(suggestParams)];
                    case 1:
                        suggestResults = _e.sent();
                        transformedSuggestResults = (0, transforms_1.transformSuggestResponse)(suggestResults);
                        q = (transformedSuggestResults.suggested || {}).text || transformedSuggestResults.correctedQuery || transformedSuggestResults.query;
                        if ((_b = (_a = this.requesters.suggest.configuration) === null || _a === void 0 ? void 0 : _a.globals) === null || _b === void 0 ? void 0 : _b.integratedSpellCorrection) {
                            q = (transformedSuggestResults.suggested || {}).text || transformedSuggestResults.query || transformedSuggestResults.correctedQuery;
                        }
                        queryParameters = __assign(__assign({}, legacyRequestParameters), { redirectResponse: 'full', q: q });
                        // modify the original request parameter for the transform
                        if ((_d = (_c = requestParameters.search) === null || _c === void 0 ? void 0 : _c.query) === null || _d === void 0 ? void 0 : _d.string) {
                            requestParameters.search.query.string = q;
                        }
                        return [4 /*yield*/, this.requesters.legacy.getAutocomplete(queryParameters)];
                    case 2:
                        legacyResults = _e.sent();
                        searchResults = (0, transforms_1.transformSearchResponse)(legacyResults, requestParameters);
                        return [2 /*return*/, __assign(__assign({}, searchResults), { autocomplete: transformedSuggestResults })];
                }
            });
        });
    };
    return HybridAPI;
}(_1.API));
exports.HybridAPI = HybridAPI;
