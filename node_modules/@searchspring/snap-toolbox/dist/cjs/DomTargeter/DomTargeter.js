"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomTargeter = void 0;
var globallyTargetedElems = [];
var DomTargeter = /** @class */ (function () {
    function DomTargeter(targets, onTarget, document) {
        var _this = this;
        this.targets = [];
        this.styleBlockRefs = {};
        this.targetedElems = [];
        this.unhideTarget = function (selector) {
            if (_this.styleBlockRefs[selector]) {
                try {
                    _this.document.head.removeChild(_this.styleBlockRefs[selector]);
                    delete _this.styleBlockRefs[selector];
                }
                catch (err) {
                    // do nothing
                }
            }
        };
        this.hideTarget = function (selector) {
            if (_this.styleBlockRefs[selector])
                return;
            var styles = "".concat(selector, " { visibility: hidden !important }");
            var styleBlock = _this.document.createElement('style');
            styleBlock.setAttribute('type', 'text/css');
            styleBlock.appendChild(_this.document.createTextNode(styles));
            _this.document.head.appendChild(styleBlock);
            _this.styleBlockRefs[selector] = styleBlock;
        };
        this.document = document || window.document;
        this.targets = targets;
        this.onTarget = onTarget;
        this.retarget();
        this.targets.forEach(function (target) {
            var timeoutTime = 100;
            var checker = function () {
                // lets not just keep trying forever - this waits roughly 12 seconds before giving up.
                if (timeoutTime < 2000) {
                    // increase the time till next check
                    timeoutTime = timeoutTime + 200;
                    _this.retarget();
                    setTimeout(checker, timeoutTime);
                }
                else {
                    // timed out, lets unhide the target
                    target.hideTarget && _this.unhideTarget(target.selector);
                }
            };
            // add click event to restart retargeting check
            if (target.clickRetarget) {
                var clickElems = [];
                if (typeof target.clickRetarget == 'boolean') {
                    clickElems.push(_this.document);
                }
                else {
                    clickElems = Array.from(_this.document.querySelectorAll(target.clickRetarget));
                }
                clickElems.map(function (elem) {
                    elem.addEventListener('click', function () {
                        timeoutTime = 100;
                        checker();
                    });
                });
            }
            if (target.autoRetarget) {
                // do initial retargeting check
                checker();
            }
            else if (/complete|interactive|loaded/.test(_this.document.readyState)) {
                // DOMContent has loaded - unhide targets
                target.hideTarget && _this.unhideTarget(target.selector);
            }
            else {
                // attempt retarget on DOMContentLoaded
                _this.document.addEventListener('DOMContentLoaded', function () {
                    _this.retarget();
                    target.hideTarget && _this.unhideTarget(target.selector);
                });
            }
        });
    }
    DomTargeter.prototype.getTargets = function () {
        return this.targets;
    };
    DomTargeter.prototype.retarget = function () {
        var _this = this;
        var targetElemPairs = this.targets.flatMap(function (target) {
            var _a;
            // hide targets before found
            target.hideTarget && _this.hideTarget(target.selector);
            var elems = _this.domQuery(target.selector).filter(function (elem) {
                if (!globallyTargetedElems.find(function (e) { return e == elem; }) && !_this.targetedElems.find(function (e) { return e == elem; })) {
                    return true;
                }
                else {
                    // unhide retarget attempts
                    target.hideTarget && _this.unhideTarget(target.selector);
                }
            });
            if (!((_a = target.inject) === null || _a === void 0 ? void 0 : _a.element)) {
                globallyTargetedElems = globallyTargetedElems.concat(elems);
            }
            return elems.map(function (elem) { return ({ target: target, elem: elem }); });
        });
        var errors = [];
        targetElemPairs.forEach(function (_a) {
            var _b;
            var target = _a.target, elem = _a.elem;
            if (target.inject) {
                try {
                    var injectedElem = _this.inject(elem, target);
                    _this.targetedElems = _this.targetedElems.concat(elem);
                    _this.onTarget(target, injectedElem, elem);
                }
                catch (e) {
                    errors.push(String(e));
                }
            }
            else {
                // empty target selector by default
                target.emptyTarget = (_b = target.emptyTarget) !== null && _b !== void 0 ? _b : true;
                if (target.emptyTarget)
                    while (elem.firstChild && elem.removeChild(elem.firstChild))
                        ;
                _this.onTarget(target, elem);
            }
            // unhide target
            target.hideTarget && _this.unhideTarget(target.selector);
        });
        if (errors.length) {
            throw new Error(errors.reduce(function (acc, err) { return (acc += err + '\n'); }, '\n'));
        }
    };
    DomTargeter.prototype.domQuery = function (selector) {
        return Array.from(this.document.querySelectorAll(selector));
    };
    DomTargeter.prototype.inject = function (elem, target) {
        var _a;
        if (!target || !target.inject) {
            throw new Error('DomTargeter::inject: Injected element unspecified');
        }
        var injectedElem = target.inject.element instanceof Function ? target.inject.element(target, elem) : target.inject.element;
        if (!injectedElem) {
            throw new Error('DomTargeter::inject: Injected element unspecified');
        }
        if (!elem.parentNode) {
            throw new Error('DomTargeter::inject: Provided element has no parent element');
        }
        switch ((_a = target === null || target === void 0 ? void 0 : target.inject) === null || _a === void 0 ? void 0 : _a.action) {
            case 'before':
                elem.parentNode.insertBefore(injectedElem, elem);
                break;
            case 'after':
                if (elem.nextSibling) {
                    elem.parentNode.insertBefore(injectedElem, elem.nextSibling);
                }
                else {
                    elem.parentNode.appendChild(injectedElem);
                }
                break;
            case 'append':
                elem.appendChild(injectedElem);
                break;
            case 'prepend':
                if (elem.firstChild) {
                    elem.insertBefore(injectedElem, elem.firstChild);
                }
                else {
                    elem.appendChild(injectedElem);
                }
                break;
            case 'replace':
                elem.parentNode.replaceChild(injectedElem, elem);
                break;
        }
        return injectedElem;
    };
    return DomTargeter;
}());
exports.DomTargeter = DomTargeter;
