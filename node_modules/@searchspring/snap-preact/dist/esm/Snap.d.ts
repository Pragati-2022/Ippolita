import { Client } from '@searchspring/snap-client';
import { Logger } from '@searchspring/snap-logger';
import { Tracker } from '@searchspring/snap-tracker';
import { AppMode } from '@searchspring/snap-toolbox';
import { ControllerTypes } from '@searchspring/snap-controller';
import type { ClientConfig, ClientGlobals } from '@searchspring/snap-client';
import type { Controllers, AbstractController, SearchControllerConfig, AutocompleteControllerConfig, FinderControllerConfig, RecommendationControllerConfig, ControllerConfigs, ContextVariables } from '@searchspring/snap-controller';
import type { TrackerConfig, TrackerGlobals } from '@searchspring/snap-tracker';
import type { Target, OnTarget } from '@searchspring/snap-toolbox';
import type { UrlTranslatorConfig } from '@searchspring/snap-url-manager';
import { RecommendationInstantiator, RecommendationInstantiatorConfig } from './Instantiators/RecommendationInstantiator';
import type { SnapControllerServices, InitialUrlConfig } from './types';
export declare const BRANCH_COOKIE = "ssBranch";
export declare const DEV_COOKIE = "ssDev";
export declare const STYLESHEET_CLASSNAME = "ss-snap-bundle-styles";
declare type ExtendedTarget = Target & {
    name?: string;
    controller?: AbstractController;
    component?: () => Promise<any> | any;
    skeleton?: () => Promise<any> | any;
    props?: {
        [propName: string]: any;
    };
    onTarget?: OnTarget;
    prefetch?: boolean;
};
declare type SnapFeatures = {
    integratedSpellCorrection?: {
        enabled?: boolean;
    };
};
export declare type SnapConfig = {
    features?: SnapFeatures;
    mode?: keyof typeof AppMode | AppMode;
    context?: ContextVariables;
    url?: UrlTranslatorConfig;
    client?: {
        globals: Partial<ClientGlobals>;
        config?: ClientConfig;
    };
    tracker?: {
        globals: TrackerGlobals;
        config?: TrackerConfig;
    };
    instantiators?: {
        recommendation?: RecommendationInstantiatorConfig;
    };
    controllers?: {
        search?: {
            config: SearchControllerConfig;
            targeters?: ExtendedTarget[];
            services?: SnapControllerServices;
            url?: UrlTranslatorConfig & {
                initial?: InitialUrlConfig;
            };
            context?: ContextVariables;
        }[];
        autocomplete?: {
            config: AutocompleteControllerConfig;
            targeters?: ExtendedTarget[];
            services?: SnapControllerServices;
            url?: UrlTranslatorConfig;
            context?: ContextVariables;
        }[];
        finder?: {
            config: FinderControllerConfig;
            targeters?: ExtendedTarget[];
            services?: SnapControllerServices;
            url?: UrlTranslatorConfig;
            context?: ContextVariables;
        }[];
        recommendation?: {
            config: RecommendationControllerConfig;
            targeters?: ExtendedTarget[];
            services?: SnapControllerServices;
            url?: UrlTranslatorConfig;
            context?: ContextVariables;
        }[];
    };
};
declare type SnapServices = {
    client?: Client;
    tracker?: Tracker;
    logger?: Logger;
};
export declare class Snap {
    private mode;
    private config;
    private _instantiatorPromises;
    private _controllerPromises;
    logger: Logger;
    client: Client;
    tracker: Tracker;
    context: ContextVariables;
    controllers: {
        [controllerConfigId: string]: Controllers;
    };
    getInstantiator: (id: string) => Promise<RecommendationInstantiator>;
    getController: (id: string) => Promise<Controllers>;
    getControllers: (...controllerIds: string[]) => Promise<Controllers[]>;
    createController: (type: keyof typeof ControllerTypes, config: ControllerConfigs, services?: SnapControllerServices | undefined, urlConfig?: Partial<{
        [x: string]: Partial<{}>;
        urlRoot: string;
        settings: Partial<{
            [x: string]: Partial<{}>;
            serializeUrlRoot: Partial<boolean>;
            corePrefix: string;
            coreType?: Partial<"query" | "hash" | undefined>;
            customType: Partial<"query" | "hash">;
        }>;
        parameters: Partial<{
            core: Partial<{
                query: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                oq: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                rq: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                tag: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                page: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                pageSize: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                sort: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                filter: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
                fallbackQuery: Partial<{
                    name: string;
                    type: Partial<"query" | "hash">;
                }>;
            }>;
            custom: Partial<{
                [x: string]: Partial<{
                    type: Partial<"query" | "hash">;
                }>;
            }>;
        }>;
    }> | undefined, context?: ContextVariables | undefined, callback?: ((value?: Controllers | PromiseLike<Controllers> | undefined) => void | Promise<void>) | undefined) => Promise<Controllers>;
    private _createController;
    handlers: {
        error: (event: ErrorEvent) => void;
    };
    constructor(config: SnapConfig, services?: SnapServices);
}
export {};
//# sourceMappingURL=Snap.d.ts.map