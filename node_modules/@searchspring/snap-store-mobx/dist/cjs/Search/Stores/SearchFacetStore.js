"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacetRangeValue = exports.FacetHierarchyValue = exports.FacetValue = exports.ValueFacet = exports.RangeFacet = exports.Facet = exports.SearchFacetStore = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var mobx_1 = require("mobx");
var SearchFacetStore = /** @class */ (function (_super) {
    __extends(SearchFacetStore, _super);
    function SearchFacetStore(config, services, storage, facetsData, pagination, meta, merchandising) {
        if (facetsData === void 0) { facetsData = []; }
        if (pagination === void 0) { pagination = {}; }
        var facets = facetsData
            .filter(function (facet) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            var facetMeta = facet.field && meta.facets && meta.facets[facet.field];
            // exclude facets that have no meta data
            if (!facetMeta)
                return false;
            // exclude facets that have mismatched meta data
            if ((facetMeta.display == 'slider' && facet.type !== 'range') || (facet.type == 'range' && facetMeta.display !== 'slider')) {
                return false;
            }
            // trim facets - remove facets that have no use
            var facetConfig = ((_b = (_a = config.settings) === null || _a === void 0 ? void 0 : _a.facets) === null || _b === void 0 ? void 0 : _b.fields) && facet.field && ((_d = (_c = config.settings) === null || _c === void 0 ? void 0 : _c.facets) === null || _d === void 0 ? void 0 : _d.fields[facet.field]);
            var shouldTrim = typeof (facetConfig === null || facetConfig === void 0 ? void 0 : facetConfig.trim) == 'boolean' ? facetConfig.trim : (_f = (_e = config.settings) === null || _e === void 0 ? void 0 : _e.facets) === null || _f === void 0 ? void 0 : _f.trim;
            if (shouldTrim) {
                if (facet.type === 'range' &&
                    ((_g = facet === null || facet === void 0 ? void 0 : facet.range) === null || _g === void 0 ? void 0 : _g.low) == ((_h = facet === null || facet === void 0 ? void 0 : facet.range) === null || _h === void 0 ? void 0 : _h.high)) {
                    return false;
                }
                else if (((_j = facet.values) === null || _j === void 0 ? void 0 : _j.length) == 0) {
                    return false;
                }
                else if (!facet.filtered && ((_k = facet.values) === null || _k === void 0 ? void 0 : _k.length) == 1) {
                    if ((_l = merchandising === null || merchandising === void 0 ? void 0 : merchandising.content) === null || _l === void 0 ? void 0 : _l.inline) {
                        return facet.values[0].count + ((_m = merchandising.content) === null || _m === void 0 ? void 0 : _m.inline.length) != pagination.totalResults;
                    }
                    else {
                        return facet.values[0].count != pagination.totalResults;
                    }
                }
            }
            return true;
        })
            .map(function (facet) {
            var _a, _b, _c, _d, _e;
            var facetMeta = facet.field && meta.facets && meta.facets[facet.field];
            var facetConfig = (0, deepmerge_1.default)(__assign(__assign({}, (_a = config.settings) === null || _a === void 0 ? void 0 : _a.facets), { fields: undefined }), (((_c = (_b = config.settings) === null || _b === void 0 ? void 0 : _b.facets) === null || _c === void 0 ? void 0 : _c.fields) && facet.field && ((_e = (_d = config.settings) === null || _d === void 0 ? void 0 : _d.facets) === null || _e === void 0 ? void 0 : _e.fields[facet.field])) || {});
            delete facetConfig.fields;
            switch (facet.type) {
                case 'range':
                    return new RangeFacet(services, storage, facet, facetMeta || {}, facetConfig);
                case 'value':
                case 'range-buckets':
                default:
                    return new ValueFacet(services, storage, facet, facetMeta || {}, facetConfig);
            }
        });
        return _super.apply(this, facets) || this;
    }
    Object.defineProperty(SearchFacetStore, Symbol.species, {
        get: function () {
            return Array;
        },
        enumerable: false,
        configurable: true
    });
    return SearchFacetStore;
}(Array));
exports.SearchFacetStore = SearchFacetStore;
var Facet = /** @class */ (function () {
    function Facet(services, storage, facet, facetMeta, config) {
        this.filtered = false;
        this.custom = {};
        this.collapsed = false;
        this.display = '';
        this.label = '';
        this.services = services;
        this.storage = storage;
        Object.assign(this, facetMeta, facet);
        (0, mobx_1.makeObservable)(this, {
            type: mobx_1.observable,
            field: mobx_1.observable,
            filtered: mobx_1.observable,
            custom: mobx_1.observable,
            collapsed: mobx_1.observable,
            display: mobx_1.observable,
            label: mobx_1.observable,
            clear: mobx_1.computed,
            toggleCollapse: mobx_1.action,
        });
        var collapseData = this.storage.get("facets.".concat(this.field, ".collapsed"));
        this.collapsed = collapseData !== null && collapseData !== void 0 ? collapseData : this.collapsed;
        if (this.filtered && this.collapsed && typeof collapseData == 'undefined' && config.autoOpenActive) {
            this.toggleCollapse();
        }
    }
    Object.defineProperty(Facet.prototype, "clear", {
        get: function () {
            return {
                url: this.services.urlManager.remove('page').remove("filter.".concat(this.field)),
            };
        },
        enumerable: false,
        configurable: true
    });
    Facet.prototype.toggleCollapse = function () {
        this.collapsed = !this.collapsed;
        this.storage.set("facets.".concat(this.field, ".collapsed"), this.collapsed);
    };
    return Facet;
}());
exports.Facet = Facet;
var RangeFacet = /** @class */ (function (_super) {
    __extends(RangeFacet, _super);
    function RangeFacet(services, storage, facet, facetMeta, config) {
        var _this = this;
        var _a, _b;
        _this = _super.call(this, services, storage, facet, facetMeta, config) || this;
        _this.range = {
            low: 0,
            high: 0,
        };
        _this.active = {
            low: 0,
            high: 0,
        };
        _this.step = facet === null || facet === void 0 ? void 0 : facet.step;
        var storedRange = config.storeRange && _this.storage.get("facets.".concat(_this.field, ".range"));
        if (storedRange && facet.filtered && (((_a = facet.range) === null || _a === void 0 ? void 0 : _a.low) > storedRange.low || ((_b = facet.range) === null || _b === void 0 ? void 0 : _b.high) < storedRange.high)) {
            // range from API has shrunk
            _this.range = _this.storage.get("facets.".concat(_this.field, ".range"));
        }
        else {
            _this.storage.set("facets.".concat(_this.field, ".range"), facet.range);
            _this.range = facet.range;
        }
        // TODO: Fix api
        // needed when API returns no active (only seems to be when range.low == range.high)
        _this.active = facet.active || facet.range;
        _this.formatSeparator = (facetMeta === null || facetMeta === void 0 ? void 0 : facetMeta.formatSeparator) || '-';
        _this.formatValue = (facetMeta === null || facetMeta === void 0 ? void 0 : facetMeta.formatValue) || '%01.2f';
        (0, mobx_1.makeObservable)(_this, {
            step: mobx_1.observable,
            range: mobx_1.observable,
            active: mobx_1.observable,
            formatSeparator: mobx_1.observable,
            formatValue: mobx_1.observable,
        });
        return _this;
    }
    Object.defineProperty(RangeFacet.prototype, "filteredCount", {
        get: function () {
            return Number(this.filtered);
        },
        enumerable: false,
        configurable: true
    });
    return RangeFacet;
}(Facet));
exports.RangeFacet = RangeFacet;
var ValueFacet = /** @class */ (function (_super) {
    __extends(ValueFacet, _super);
    function ValueFacet(services, storage, facet, facetMeta, config) {
        var _this = _super.call(this, services, storage, facet, facetMeta, config) || this;
        _this.values = [];
        _this.search = {
            input: '',
        };
        _this.overflow = {
            enabled: false,
            limited: true,
            limit: 0,
            remaining: undefined,
            setLimit: function (limit) {
                if (limit != this.limit) {
                    this.enabled = true;
                    this.limit = limit;
                    this.calculate();
                }
            },
            toggle: function (val) {
                if (typeof val != 'undefined') {
                    _this.overflow.limited = val;
                }
                else {
                    _this.overflow.limited = !_this.overflow.limited;
                }
                _this.storage.set("facets.".concat(_this.field, ".overflow.limited"), _this.overflow.limited);
                _this.overflow.calculate();
            },
            calculate: function () {
                if (_this.overflow.limit > 0) {
                    var remaining = _this.values.length - _this.overflow.limit;
                    if (remaining > 0 && !_this.search.input) {
                        _this.overflow.enabled = true;
                        if (_this.overflow.limited) {
                            _this.overflow.remaining = remaining;
                        }
                        else {
                            _this.overflow.remaining = 0;
                        }
                    }
                    else {
                        _this.overflow.enabled = false;
                    }
                }
            },
        };
        _this.multiple = _this.multiple;
        _this.values =
            (facet.values &&
                facet.values.map(function (value) {
                    var _a, _b;
                    switch (facet.type) {
                        case 'value':
                            if (facetMeta.display === 'hierarchy') {
                                var filteredValues = ((_a = facet === null || facet === void 0 ? void 0 : facet.values) === null || _a === void 0 ? void 0 : _a.filter(function (value) { return value.filtered; })) || [];
                                return new FacetHierarchyValue(services, _this, value, filteredValues);
                            }
                            else {
                                // converting values to strings to ensure UrlManager state matches state created from URL
                                value.value = (_b = value === null || value === void 0 ? void 0 : value.value) === null || _b === void 0 ? void 0 : _b.toString();
                                return new FacetValue(services, _this, value);
                            }
                        case 'range-buckets':
                            return new FacetRangeValue(services, _this, value);
                    }
                })) ||
                [];
        if (config.pinFiltered && facetMeta.display !== 'hierarchy') {
            _this.values.sort(function (a, b) { return Number(b.filtered) - Number(a.filtered); });
        }
        var overflowLimitedState = _this.storage.get("facets.".concat(_this.field, ".overflow.limited"));
        if (typeof overflowLimitedState != 'undefined') {
            _this.overflow.toggle(overflowLimitedState);
        }
        (0, mobx_1.makeObservable)(_this, {
            values: mobx_1.observable,
            search: mobx_1.observable,
            multiple: mobx_1.observable,
            overflow: mobx_1.observable,
            refinedValues: mobx_1.computed,
        });
        (0, mobx_1.reaction)(function () { return _this.search.input; }, function () {
            _this.overflow.calculate();
        });
        return _this;
    }
    Object.defineProperty(ValueFacet.prototype, "filteredCount", {
        get: function () {
            return this.values.filter(function (value) { return value === null || value === void 0 ? void 0 : value.filtered; }).length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueFacet.prototype, "refinedValues", {
        get: function () {
            var values = this.values || [];
            if (this.search.input) {
                var search_1 = new RegExp(escapeRegExp(this.search.input), 'i');
                values = this.values.filter(function (value) { return String((value === null || value === void 0 ? void 0 : value.label) || '').match(search_1); });
            }
            if (this.overflow.enabled && this.overflow.limited) {
                values = values.slice(0, this.overflow.limit);
            }
            return values;
        },
        enumerable: false,
        configurable: true
    });
    return ValueFacet;
}(Facet));
exports.ValueFacet = ValueFacet;
var FacetValue = /** @class */ (function () {
    function FacetValue(services, facet, value) {
        Object.assign(this, value);
        if (this.filtered) {
            this.url = services.urlManager.remove('page').remove("filter.".concat(facet.field), value.value);
        }
        else {
            var valueUrl = services.urlManager.remove('page');
            if (facet.multiple == 'single') {
                valueUrl = valueUrl === null || valueUrl === void 0 ? void 0 : valueUrl.remove("filter.".concat(facet.field));
            }
            this.url = valueUrl === null || valueUrl === void 0 ? void 0 : valueUrl.merge("filter.".concat(facet.field), value.value);
        }
    }
    return FacetValue;
}());
exports.FacetValue = FacetValue;
var FacetHierarchyValue = /** @class */ (function (_super) {
    __extends(FacetHierarchyValue, _super);
    function FacetHierarchyValue(services, facet, value, filteredValues) {
        var _this = this;
        var _a;
        _this = _super.call(this, services, facet, value) || this;
        _this.level = 0;
        _this.history = false;
        if (value.value && facet.hierarchyDelimiter) {
            _this.level = value.value.split(facet.hierarchyDelimiter).length;
        }
        if (facet.filtered && (filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.length)) {
            var filteredLevel = (facet === null || facet === void 0 ? void 0 : facet.hierarchyDelimiter) && ((_a = filteredValues[0].value) === null || _a === void 0 ? void 0 : _a.split(facet.hierarchyDelimiter).length);
            if (filteredLevel && _this.level <= filteredLevel) {
                _this.history = true;
            }
        }
        if (value.value) {
            _this.url = services.urlManager.remove('page').set("filter.".concat(facet.field), value.value);
        }
        else {
            _this.url = services.urlManager.remove('page').remove("filter.".concat(facet.field));
        }
        return _this;
    }
    return FacetHierarchyValue;
}(FacetValue));
exports.FacetHierarchyValue = FacetHierarchyValue;
var FacetRangeValue = /** @class */ (function () {
    function FacetRangeValue(services, facet, value) {
        Object.assign(this, value);
        if (this.filtered) {
            this.url = services.urlManager.remove('page').remove("filter.".concat(facet.field), [{ low: this.low, high: this.high }]);
        }
        else {
            var valueUrl = services.urlManager.remove('page');
            if (facet.multiple == 'single') {
                valueUrl = valueUrl === null || valueUrl === void 0 ? void 0 : valueUrl.remove("filter.".concat(facet.field));
            }
            this.url = valueUrl === null || valueUrl === void 0 ? void 0 : valueUrl.merge("filter.".concat(facet.field), [{ low: this.low, high: this.high }]);
        }
    }
    return FacetRangeValue;
}());
exports.FacetRangeValue = FacetRangeValue;
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
