"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformSearchRequest = void 0;
var utils_1 = require("../utils");
function transformSearchRequest(request) {
    return (0, utils_1.mergeParams)(transformSearchRequest.sorts(request), transformSearchRequest.search(request), transformSearchRequest.filters(request), transformSearchRequest.merchandising(request), transformSearchRequest.pagination(request), transformSearchRequest.siteId(request), transformSearchRequest.facets(request), transformSearchRequest.tracking(request), transformSearchRequest.personalization(request));
}
exports.transformSearchRequest = transformSearchRequest;
transformSearchRequest.sorts = function (request) {
    if (request === void 0) { request = {}; }
    return (request.sorts || []).reduce(function (acc, sort) {
        var _a;
        if (!sort.field || !sort.direction || (sort.direction != 'asc' && sort.direction != 'desc')) {
            return acc;
        }
        return __assign(__assign({}, acc), (_a = {}, _a['sort.' + sort.field] = (acc[sort.field] || []).concat([sort.direction]), _a));
    }, {});
};
transformSearchRequest.search = function (request) {
    if (request === void 0) { request = {}; }
    var reqSearch = request.search || {};
    var search = {};
    if (reqSearch.query && reqSearch.query.string) {
        search.q = reqSearch.query.string;
    }
    if (reqSearch.subQuery) {
        search.rq = reqSearch.subQuery.trim();
    }
    if (reqSearch.originalQuery) {
        search.originalQuery = reqSearch.originalQuery.trim();
    }
    if (reqSearch.fallbackQuery) {
        search.fallbackQuery = reqSearch.fallbackQuery.trim();
    }
    if (reqSearch.redirectResponse) {
        search.redirectResponse = reqSearch.redirectResponse;
    }
    return search;
};
transformSearchRequest.filters = function (request) {
    if (request === void 0) { request = {}; }
    return (request.filters || []).reduce(function (acc, filter) {
        var _a, _b;
        var _c, _d, _e, _f;
        var baseKey = filter.background ? 'bgfilter' : 'filter';
        if (filter.type == 'value') {
            var key = baseKey + '.' + filter.field;
            return __assign(__assign({}, acc), (_a = {}, _a[key] = (acc[key] || []).concat([filter.value]), _a));
        }
        else if (filter.type == 'range') {
            var keyLow = baseKey + '.' + filter.field + '.low';
            var keyHigh = baseKey + '.' + filter.field + '.high';
            var low = (_d = (_c = filter === null || filter === void 0 ? void 0 : filter.value) === null || _c === void 0 ? void 0 : _c.low) !== null && _d !== void 0 ? _d : '*';
            var high = (_f = (_e = filter === null || filter === void 0 ? void 0 : filter.value) === null || _e === void 0 ? void 0 : _e.high) !== null && _f !== void 0 ? _f : '*';
            return __assign(__assign({}, acc), (_b = {}, _b[keyLow] = (acc[keyLow] || []).concat([low]), _b[keyHigh] = (acc[keyHigh] || []).concat([high]), _b));
        }
        return acc;
    }, {});
};
transformSearchRequest.merchandising = function (request) {
    if (request === void 0) { request = {}; }
    var reqMerch = request.merchandising || {};
    var merch = reqMerch.disabled ? { disableMerchandising: true } : {};
    if (reqMerch.landingPage) {
        merch['landing-page'] = reqMerch.landingPage;
    }
    if (reqMerch.segments instanceof Array && reqMerch.segments.length) {
        merch['tag'] = reqMerch.segments.map(function (segment) {
            return "merch.segment/".concat(segment);
        });
    }
    if (typeof reqMerch.intellisuggest == 'boolean') {
        merch['intellisuggest'] = reqMerch.intellisuggest;
    }
    if (reqMerch.disableInlineBanners) {
        merch['disableInlineBanners'] = reqMerch.disableInlineBanners;
    }
    return merch;
};
transformSearchRequest.pagination = function (request) {
    if (request === void 0) { request = {}; }
    var pagination = request.pagination || {};
    var params = {};
    if (pagination.page) {
        params.page = pagination.page;
    }
    if (pagination.pageSize || pagination.pageSize === 0) {
        params.resultsPerPage = pagination.pageSize;
    }
    return params;
};
transformSearchRequest.siteId = function (request) {
    if (request === void 0) { request = {}; }
    if (request.siteId) {
        return { siteId: request.siteId };
    }
    return {};
};
transformSearchRequest.facets = function (request) {
    var _a, _b;
    if (request === void 0) { request = {}; }
    var facets = request.facets || {};
    var params = {};
    if (facets.include && facets.include.length && facets.exclude && facets.exclude.length) {
        throw 'cannot use facet include and exclude at the same time';
    }
    if ((_a = facets.include) === null || _a === void 0 ? void 0 : _a.length) {
        params.includedFacets = facets.include;
    }
    if ((_b = facets.exclude) === null || _b === void 0 ? void 0 : _b.length) {
        params.excludedFacets = facets.exclude;
    }
    if (facets.autoDrillDown === false) {
        params.disableFacetDrillDown = true;
    }
    return params;
};
transformSearchRequest.tracking = function (request) {
    if (request === void 0) { request = {}; }
    var reqTracking = request.tracking || {};
    var params = {};
    if (reqTracking.userId) {
        params.userId = reqTracking.userId;
    }
    if (reqTracking.domain) {
        params.domain = reqTracking.domain;
    }
    if (reqTracking.sessionId) {
        params.sessionId = reqTracking.sessionId;
    }
    if (reqTracking.pageLoadId) {
        params.pageLoadId = reqTracking.pageLoadId;
    }
    return params;
};
transformSearchRequest.personalization = function (request) {
    if (request === void 0) { request = {}; }
    var personalization = request.personalization || {};
    var params = {};
    if (personalization.disabled) {
        params.skipPersonalization = personalization.disabled;
    }
    if (personalization.cart) {
        params.cart = personalization.cart;
    }
    if (personalization.lastViewed) {
        params.lastViewed = personalization.lastViewed;
    }
    if (personalization.shopper) {
        params.shopper = personalization.shopper;
    }
    return params;
};
