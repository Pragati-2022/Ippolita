"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutocompleteStore = void 0;
var mobx_1 = require("mobx");
var AbstractStore_1 = require("../Abstract/AbstractStore");
var Stores_1 = require("../Search/Stores");
var StorageStore_1 = require("../Storage/StorageStore");
var Stores_2 = require("./Stores");
var AutocompleteStore = /** @class */ (function (_super) {
    __extends(AutocompleteStore, _super);
    function AutocompleteStore(config, services) {
        var _this = this;
        var _a;
        _this = _super.call(this, config) || this;
        if (typeof services != 'object' || typeof ((_a = services.urlManager) === null || _a === void 0 ? void 0 : _a.subscribe) != 'function') {
            throw new Error("Invalid service 'urlManager' passed to AutocompleteStore. Missing \"subscribe\" function.");
        }
        _this.services = services;
        _this.state = new Stores_2.AutocompleteStateStore(services);
        _this.storage = new StorageStore_1.StorageStore();
        _this.trending = [];
        _this.history = [];
        _this.initHistory();
        _this.reset();
        (0, mobx_1.makeObservable)(_this, {
            state: mobx_1.observable,
            search: mobx_1.observable,
            terms: mobx_1.observable,
            facets: mobx_1.observable,
            filters: mobx_1.observable,
            merchandising: mobx_1.observable,
            results: mobx_1.observable,
            pagination: mobx_1.observable,
            sorting: mobx_1.observable,
            history: mobx_1.observable,
        });
        return _this;
    }
    AutocompleteStore.prototype.reset = function () {
        this.state.reset();
        this.update();
        this.resetTerms();
    };
    AutocompleteStore.prototype.initHistory = function () {
        var _this = this;
        var _a, _b, _c;
        var limit = (_b = (_a = this.config.settings) === null || _a === void 0 ? void 0 : _a.history) === null || _b === void 0 ? void 0 : _b.limit;
        if (limit) {
            var historyStore = new Stores_1.SearchHistoryStore({ siteId: (_c = this.config.globals) === null || _c === void 0 ? void 0 : _c.siteId }, this.services);
            this.history = new Stores_2.AutocompleteHistoryStore(this.services, historyStore.getStoredData(limit), function () {
                _this.resetTerms();
            }, this.state);
        }
    };
    AutocompleteStore.prototype.resetTerms = function () {
        this.resetSuggestions();
        this.resetTrending();
        this.resetHistory();
    };
    AutocompleteStore.prototype.resetSuggestions = function () {
        var _a;
        (_a = this.terms) === null || _a === void 0 ? void 0 : _a.forEach(function (term) { return (term.active = false); });
    };
    AutocompleteStore.prototype.resetTrending = function () {
        var _a;
        (_a = this.trending) === null || _a === void 0 ? void 0 : _a.forEach(function (term) { return (term.active = false); });
    };
    AutocompleteStore.prototype.resetHistory = function () {
        var _a;
        (_a = this.history) === null || _a === void 0 ? void 0 : _a.forEach(function (term) { return (term.active = false); });
    };
    AutocompleteStore.prototype.setService = function (name, service) {
        if (this.services[name] && service) {
            this.services[name] = service;
            if (name === 'urlManager') {
                this.state.url = service;
                this.initHistory();
            }
        }
    };
    AutocompleteStore.prototype.updateTrendingTerms = function (data) {
        var _this = this;
        this.trending = new Stores_2.AutocompleteTrendingStore(this.services, data, function () {
            _this.resetTerms();
        }, this.state);
    };
    AutocompleteStore.prototype.update = function (data) {
        var _this = this;
        var _a;
        if (data === void 0) { data = {}; }
        if (!data)
            return;
        this.error = undefined;
        this.loaded = !!data.pagination;
        this.meta = data.meta || {};
        // set the query to match the actual queried term and not the input query
        if (data.search) {
            this.state.url = this.services.urlManager = this.services.urlManager.set('query', data.search.query);
        }
        // only run if we want to update the terms (not locked)
        if (!this.state.locks.terms.locked) {
            this.terms = new Stores_2.AutocompleteTermStore(this.services, data.autocomplete || {}, data.pagination || {}, data.search || {}, function () {
                _this.resetTerms();
            }, this.state, this.config);
            // only lock if there was data
            data.autocomplete && this.state.locks.terms.lock();
        }
        this.merchandising = new Stores_1.SearchMerchandisingStore(this.services, data.merchandising || {});
        this.search = new Stores_2.AutocompleteQueryStore(this.services, data.autocomplete || {}, data.search || {}, this.config);
        // only run if we want to update the facets (not locked)
        if (!this.state.locks.facets.locked) {
            this.facets = new Stores_2.AutocompleteFacetStore(this.config, this.services, this.storage, data.facets || [], data.pagination || {}, this.meta, this.state, data.merchandising || {});
        }
        this.filters = new Stores_1.SearchFilterStore(this.services, data.filters, this.meta);
        this.results = new Stores_1.SearchResultStore(this.config, this.services, data.results || [], data.pagination, data.merchandising);
        if ((this.results.length === 0 && !this.trending.filter(function (term) { return term.active; }).length) || ((_a = this.terms) === null || _a === void 0 ? void 0 : _a.filter(function (term) { return term.active; }).length)) {
            // if a trending term was selected and then a subsequent search yields no results, reset trending terms to remove active state
            // OR if any terms are active, also reset to ensure only a single term or trending term is active
            this.resetTrending();
        }
        this.pagination = new Stores_1.SearchPaginationStore(this.config, this.services, data.pagination, this.meta);
        this.sorting = new Stores_1.SearchSortingStore(this.services, data.sorting || [], data.search || {}, this.meta);
    };
    return AutocompleteStore;
}(AbstractStore_1.AbstractStore));
exports.AutocompleteStore = AutocompleteStore;
