"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinderStore = void 0;
var mobx_1 = require("mobx");
var AbstractStore_1 = require("../Abstract/AbstractStore");
var Stores_1 = require("../Search/Stores");
var StorageStore_1 = require("../Storage/StorageStore");
var Stores_2 = require("./Stores");
var FinderStore = /** @class */ (function (_super) {
    __extends(FinderStore, _super);
    function FinderStore(config, services) {
        var _this = this;
        var _a, _b;
        _this = _super.call(this, config) || this;
        _this.meta = {};
        _this.state = {
            persisted: false,
        };
        // providing access to response data without exposing it
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        _this.save = function () { };
        _this.reset = function () {
            var _a, _b;
            if ((_a = _this.config.persist) === null || _a === void 0 ? void 0 : _a.enabled) {
                (_b = _this.persistedStorage) === null || _b === void 0 ? void 0 : _b.clear();
                _this.state.persisted = false;
            }
            if (_this.services.urlManager.state.filter) {
                _this.storage.clear();
                _this.selections = [];
                _this.loaded = false;
            }
        };
        if (typeof services != 'object' || typeof ((_a = services.urlManager) === null || _a === void 0 ? void 0 : _a.subscribe) != 'function') {
            throw new Error("Invalid service 'urlManager' passed to AutocompleteStore. Missing \"subscribe\" function.");
        }
        _this.services = services;
        if ((_b = config.persist) === null || _b === void 0 ? void 0 : _b.enabled) {
            _this.persistedStorage = new StorageStore_1.StorageStore({
                type: StorageStore_1.StorageType.LOCAL,
                key: "ss-".concat(config.id, "-persisted"),
            });
        }
        _this.storage = new StorageStore_1.StorageStore();
        _this.update({ meta: {} });
        (0, mobx_1.makeObservable)(_this, {
            selections: mobx_1.observable,
            pagination: mobx_1.observable,
        });
        return _this;
    }
    FinderStore.prototype.setService = function (name, service) {
        if (this.services[name] && service) {
            this.services[name] = service;
        }
    };
    FinderStore.prototype.loadPersisted = function () {
        var _a;
        if (((_a = this.config.persist) === null || _a === void 0 ? void 0 : _a.enabled) && this.persistedStorage) {
            var date = this.persistedStorage.get('date');
            var data = this.persistedStorage.get('data');
            var config = this.persistedStorage.get('config');
            var selections = this.persistedStorage.get('selections');
            var isExpired = this.config.persist.expiration && Date.now() - date > this.config.persist.expiration;
            if (data && selections.filter(function (selection) { return selection.selected; }).length) {
                // stringify config without middleware and plugins (they may be using variable data)
                var stringifiedPersistedConfig = JSON.stringify(__assign(__assign({}, config), { plugins: [], middleware: {} }));
                var stringifiedConfig = JSON.stringify(__assign(__assign({}, this.config), { plugins: [], middleware: {} }));
                // if the config has not changed and the data is not expired then persist
                if (stringifiedPersistedConfig === stringifiedConfig && !isExpired) {
                    this.update(data, selections);
                    this.state.persisted = true;
                    this.services.urlManager.go();
                }
                else {
                    this.reset();
                }
            }
        }
    };
    FinderStore.prototype.update = function (data, selectedSelections) {
        var _this = this;
        this.error = undefined;
        this.loaded = !!data.pagination;
        this.meta = data.meta;
        this.pagination = new Stores_1.SearchPaginationStore(this.config, this.services, data.pagination, this.meta);
        this.selections = new Stores_2.FinderSelectionStore(this.config, this.services, {
            state: this.state,
            facets: data.facets || [],
            meta: this.meta,
            loading: this.loading,
            storage: this.storage,
            selections: selectedSelections || [],
        });
        // providing access to response data without exposing it
        this.save = function () {
            var _a, _b;
            if (((_a = _this.config.persist) === null || _a === void 0 ? void 0 : _a.enabled) && _this.persistedStorage && ((_b = _this === null || _this === void 0 ? void 0 : _this.selections) === null || _b === void 0 ? void 0 : _b.filter(function (selection) { return selection.selected; }).length)) {
                _this.persistedStorage.set('config', _this.config);
                _this.persistedStorage.set('data', data);
                _this.persistedStorage.set('date', Date.now());
                _this.persistedStorage.set('selections', _this.selections.map(function (selection) {
                    return {
                        selected: selection.selected,
                        data: selection.data,
                        facet: selection.facet,
                    };
                }));
            }
        };
    };
    return FinderStore;
}(AbstractStore_1.AbstractStore));
exports.FinderStore = FinderStore;
