"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutocompleteFacetStore = void 0;
var Stores_1 = require("../../Search/Stores");
var AutocompleteFacetStore = /** @class */ (function (_super) {
    __extends(AutocompleteFacetStore, _super);
    function AutocompleteFacetStore(config, services, storage, facetsData, paginationData, meta, rootState, merchandising) {
        // allow for only a singular facet option selection at a time
        var alteredServices = __assign(__assign({}, services), { urlManager: services.urlManager.remove('filter') });
        var facets = new Stores_1.SearchFacetStore(config, alteredServices, storage, facetsData, paginationData, meta, merchandising);
        // mutate facet values to add 'preview' function
        facets.forEach(function (facet) {
            var _a;
            (_a = facet.values) === null || _a === void 0 ? void 0 : _a.forEach(function (value) {
                value.preview = function () {
                    facets.map(function (facet) {
                        var _a;
                        facet.filtered = false;
                        (_a = facet.values) === null || _a === void 0 ? void 0 : _a.map(function (value) {
                            value.filtered = false;
                        });
                    });
                    facet.filtered = true;
                    value.filtered = true;
                    rootState.locks.facets.lock();
                    value.url.go();
                };
            });
        });
        return _super.apply(this, facets) || this;
    }
    Object.defineProperty(AutocompleteFacetStore, Symbol.species, {
        get: function () {
            return Array;
        },
        enumerable: false,
        configurable: true
    });
    return AutocompleteFacetStore;
}(Array));
exports.AutocompleteFacetStore = AutocompleteFacetStore;
