import type { StoreConfigs, StoreServices } from '../../types';
import type { SearchResponseModelPagination, MetaResponseModel } from '@searchspring/snapi-types';
import type { UrlManager } from '@searchspring/snap-url-manager';
export declare class SearchPaginationStore {
    services: StoreServices;
    page: number;
    pageSize: number;
    pageSizeOptions: PageSizeOption[];
    defaultPageSize: number;
    totalResults: number;
    totalPages: number;
    controllerConfig: StoreConfigs;
    constructor(config: StoreConfigs, services: StoreServices, paginationData: SearchResponseModelPagination | undefined, meta: MetaResponseModel);
    get begin(): number;
    get end(): number;
    get multiplePages(): boolean;
    get current(): Page;
    get first(): Page;
    get last(): Page;
    get next(): Page | undefined;
    get previous(): Page | undefined;
    getPages(min?: number, max?: number): Page[];
    setPageSize(num: number): void;
}
export declare class PageSizeOption {
    private services;
    value: number;
    label: string;
    url: UrlManager;
    active: boolean;
    constructor(services: StoreServices, currentPageSize: number, option: {
        value: number;
        label: string;
    });
}
export declare class Page {
    private services;
    number: number;
    active: boolean;
    url: UrlManager;
    key: string;
    constructor(services: StoreServices, page: {
        number: number;
        active?: boolean;
    });
}
//# sourceMappingURL=SearchPaginationStore.d.ts.map