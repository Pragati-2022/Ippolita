import type { UrlManager } from '@searchspring/snap-url-manager';
import type { StorageStore } from '../../Storage/StorageStore';
import type { AutocompleteStoreConfig, SearchStoreConfig, StoreServices, FacetStoreConfig } from '../../types';
import type { MetaResponseModel, MetaResponseModelFacet, MetaResponseModelFacetSlider, MetaResponseModelFacetValueMultipleEnum, MetaResponseModelFacetHierarchyAllOf, SearchResponseModelPagination, SearchResponseModelFacet, SearchResponseModelFacetRange, SearchResponseModelFacetValue, SearchResponseModelFacetValueAllOfValues, SearchRequestModelFilterRangeAllOfValue, SearchResponseModelMerchandising } from '@searchspring/snapi-types';
export declare class SearchFacetStore extends Array {
    static get [Symbol.species](): ArrayConstructor;
    constructor(config: SearchStoreConfig | AutocompleteStoreConfig, services: StoreServices, storage: StorageStore, facetsData: SearchResponseModelFacet[] | undefined, pagination: SearchResponseModelPagination | undefined, meta: MetaResponseModel, merchandising: SearchResponseModelMerchandising);
}
export declare class Facet {
    services: StoreServices;
    type: string;
    field: string;
    filtered: boolean;
    custom: {};
    collapsed: boolean;
    display: string;
    label: string;
    storage: StorageStore;
    constructor(services: StoreServices, storage: StorageStore, facet: SearchResponseModelFacetValue | SearchResponseModelFacetRange, facetMeta: MetaResponseModelFacet, config: FacetStoreConfig);
    get clear(): {
        url: UrlManager;
    };
    toggleCollapse(): void;
}
export declare class RangeFacet extends Facet {
    step?: number;
    range?: SearchRequestModelFilterRangeAllOfValue;
    active?: SearchRequestModelFilterRangeAllOfValue;
    formatSeparator: string;
    formatValue: string;
    constructor(services: StoreServices, storage: StorageStore, facet: SearchResponseModelFacetRange, facetMeta: MetaResponseModelFacetSlider, config: FacetStoreConfig);
    get filteredCount(): number;
}
export declare class ValueFacet extends Facet {
    values: Array<FacetHierarchyValue | FacetValue | FacetRangeValue | undefined>;
    search: {
        input: string;
    };
    multiple: MetaResponseModelFacetValueMultipleEnum;
    overflow: {
        enabled: boolean;
        limited: boolean;
        limit: number;
        remaining: number | undefined;
        setLimit: (limit: number) => void;
        toggle: (val?: boolean) => void;
        calculate: () => void;
    };
    constructor(services: StoreServices, storage: StorageStore, facet: SearchResponseModelFacetValue, facetMeta: MetaResponseModelFacet, config: FacetStoreConfig);
    get filteredCount(): number;
    get refinedValues(): (FacetHierarchyValue | FacetValue | FacetRangeValue | undefined)[];
}
export declare class FacetValue {
    label: string;
    count: number;
    filtered: boolean;
    value: string;
    custom: object;
    url: UrlManager;
    preview?: () => void;
    constructor(services: StoreServices, facet: ValueFacet, value: SearchResponseModelFacetValueAllOfValues);
}
export declare class FacetHierarchyValue extends FacetValue {
    level: number;
    history: boolean;
    constructor(services: StoreServices, facet: ValueFacet & MetaResponseModelFacetHierarchyAllOf, value: SearchResponseModelFacetValueAllOfValues, filteredValues: SearchResponseModelFacetValueAllOfValues[]);
}
export declare class FacetRangeValue {
    label: string;
    count: number;
    filtered: boolean;
    low: number;
    high: number;
    custom: object;
    url: UrlManager;
    constructor(services: StoreServices, facet: ValueFacet, value: SearchResponseModelFacetValueAllOfValues);
}
//# sourceMappingURL=SearchFacetStore.d.ts.map