import type { AbstractController, AutocompleteController, SearchController, FinderController, RecommendationController } from './index';
import type { EventManager, Middleware } from '@searchspring/snap-event-manager';
import type { Client } from '@searchspring/snap-client';
import type { SearchStore, AutocompleteStore, FinderStore, RecommendationStore, StoreConfig, SearchStoreConfig, FinderStoreConfig, AutocompleteStoreConfig, RecommendationStoreConfig } from '@searchspring/snap-store-mobx';
import type { Tracker, ProductViewEvent } from '@searchspring/snap-tracker';
import type { Profiler } from '@searchspring/snap-profiler';
import type { UrlManager } from '@searchspring/snap-url-manager';
import type { Logger } from '@searchspring/snap-logger';
import type { SearchRequestModel } from '@searchspring/snapi-types';
export declare type PluginFunction = (cntrlr: AbstractController, ...args: any) => Promise<void> | void;
export declare type PluginGrouping = [func: PluginFunction, ...args: unknown[]];
export declare type BeforeSearchObj = {
    controller: AbstractController;
    request: any;
};
export declare type AfterSearchObj = {
    controller: AbstractController;
    response: any;
    request: SearchRequestModel;
};
export declare type AfterStoreObj = {
    controller: AbstractController;
    request: any;
    response: any;
};
export declare type RestorePositionObj = {
    controller: AbstractController;
    element?: ElementPositionObj;
};
export declare type ElementPositionObj = {
    href?: string;
    selector?: string;
    domRect?: DOMRect;
};
export declare enum ControllerTypes {
    search = "search",
    autocomplete = "autocomplete",
    finder = "finder",
    recommendation = "recommendation"
}
export declare type Controllers = SearchController | AutocompleteController | FinderController | RecommendationController;
export declare type ControllerServices = {
    client: Client;
    store: SearchStore | AutocompleteStore | FinderStore | RecommendationStore;
    urlManager: UrlManager;
    eventManager: EventManager;
    profiler: Profiler;
    logger: Logger;
    tracker: Tracker;
};
export declare type Attachments = {
    middleware?: {
        [eventName: string]: Middleware<any> | Middleware<any>[];
    };
    plugins?: PluginGrouping[];
    [any: string]: unknown;
};
export declare type ContextVariables = {
    shopper?: {
        id: string;
        cart?: ProductViewEvent[];
        [variable: string]: any;
    };
    [variable: string]: any;
};
export declare type ControllerConfig = StoreConfig & Attachments;
export declare type SearchControllerConfig = ControllerConfig & SearchStoreConfig;
export declare type FinderControllerConfig = ControllerConfig & FinderStoreConfig;
export declare type AutocompleteControllerConfig = ControllerConfig & AutocompleteStoreConfig;
export declare type RecommendationControllerConfig = ControllerConfig & RecommendationStoreConfig;
export declare type ControllerConfigs = SearchControllerConfig | AutocompleteControllerConfig | FinderControllerConfig | RecommendationControllerConfig;
//# sourceMappingURL=types.d.ts.map