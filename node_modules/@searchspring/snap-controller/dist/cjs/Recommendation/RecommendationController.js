"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationController = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var snap_tracker_1 = require("@searchspring/snap-tracker");
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var AbstractController_1 = require("../Abstract/AbstractController");
var types_1 = require("../types");
var defaultConfig = {
    id: 'recommend',
    tag: '',
    batched: true,
    realtime: false,
    globals: {},
};
var RecommendationController = /** @class */ (function (_super) {
    __extends(RecommendationController, _super);
    function RecommendationController(config, _a, context) {
        var client = _a.client, store = _a.store, urlManager = _a.urlManager, eventManager = _a.eventManager, profiler = _a.profiler, logger = _a.logger, tracker = _a.tracker;
        var _this = _super.call(this, config, { client: client, store: store, urlManager: urlManager, eventManager: eventManager, profiler: profiler, logger: logger, tracker: tracker }, context) || this;
        _this.type = types_1.ControllerTypes.recommendation;
        _this.events = {
            click: undefined,
            impression: undefined,
            render: undefined,
            product: {},
        };
        _this.track = (function () {
            var getSeed = function () {
                var skus = [];
                switch (_this.store.profile.placement) {
                    case snap_tracker_1.ProfilePlacement.PRODUCTPAGE:
                        if (_this.config.globals.product) {
                            skus = [_this.config.globals.product];
                        }
                        break;
                    case snap_tracker_1.ProfilePlacement.BASKETPAGE:
                        skus = _this.tracker.cookies.cart.get(); // this is an array
                        break;
                    default:
                        return;
                }
                if (skus.length) {
                    return skus.map(function (sku) { return ({
                        sku: sku,
                    }); });
                }
            };
            return {
                product: {
                    click: function (e, result) {
                        var _a;
                        if (!_this.store.profile.tag || !result)
                            return;
                        //set the profile click every time
                        _this.track.click(e);
                        var payload = {
                            type: snap_tracker_1.BeaconType.PROFILE_PRODUCT_CLICK,
                            category: snap_tracker_1.BeaconCategory.RECOMMENDATIONS,
                            context: _this.config.globals.siteId ? { website: { trackingCode: _this.config.globals.siteId } } : undefined,
                            event: {
                                context: {
                                    action: 'navigate',
                                    placement: _this.store.profile.placement,
                                    tag: _this.store.profile.tag,
                                    type: 'product-recommendation',
                                },
                                product: {
                                    id: result.id,
                                    mappings: {
                                        core: result.mappings.core,
                                    },
                                    seed: getSeed(),
                                },
                            },
                            pid: (_a = _this.events.click) === null || _a === void 0 ? void 0 : _a.id,
                        };
                        var event = _this.tracker.track.event(payload);
                        _this.eventManager.fire('track.product.click', { controller: _this, event: e, result: result, trackEvent: event });
                        return event;
                    },
                    impression: function (result) {
                        var _a;
                        if (!_this.store.profile.tag || !result || !_this.events.impression || (_this.events.product && ((_a = _this.events.product[result.id]) === null || _a === void 0 ? void 0 : _a.impression)))
                            return;
                        var payload = {
                            type: snap_tracker_1.BeaconType.PROFILE_PRODUCT_IMPRESSION,
                            category: snap_tracker_1.BeaconCategory.RECOMMENDATIONS,
                            context: _this.config.globals.siteId ? { website: { trackingCode: _this.config.globals.siteId } } : undefined,
                            event: {
                                context: {
                                    placement: _this.store.profile.placement,
                                    tag: _this.store.profile.tag,
                                    type: 'product-recommendation',
                                },
                                product: {
                                    id: result.id,
                                    mappings: {
                                        core: result.mappings.core,
                                    },
                                    seed: getSeed(),
                                },
                            },
                            pid: _this.events.impression.id,
                        };
                        _this.events.product[result.id] = _this.events.product[result.id] || {};
                        var event = (_this.events.product[result.id].impression = _this.tracker.track.event(payload));
                        _this.eventManager.fire('track.product.impression', { controller: _this, result: result, trackEvent: event });
                        return event;
                    },
                    render: function (result) {
                        var _a;
                        if (!_this.store.profile.tag || !result || !_this.events.render || ((_a = _this.events.product[result.id]) === null || _a === void 0 ? void 0 : _a.render))
                            return;
                        var payload = {
                            type: snap_tracker_1.BeaconType.PROFILE_PRODUCT_RENDER,
                            category: snap_tracker_1.BeaconCategory.RECOMMENDATIONS,
                            context: _this.config.globals.siteId ? { website: { trackingCode: _this.config.globals.siteId } } : undefined,
                            event: {
                                context: {
                                    placement: _this.store.profile.placement,
                                    tag: _this.store.profile.tag,
                                    type: 'product-recommendation',
                                },
                                product: {
                                    id: result.id,
                                    mappings: {
                                        core: result.mappings.core,
                                    },
                                    seed: getSeed(),
                                },
                            },
                            pid: _this.events.render.id,
                        };
                        _this.events.product[result.id] = _this.events.product[result.id] || {};
                        var event = (_this.events.product[result.id].render = _this.tracker.track.event(payload));
                        _this.eventManager.fire('track.product.render', { controller: _this, result: result, trackEvent: event });
                        return event;
                    },
                },
                click: function (e) {
                    if (!_this.store.profile.tag)
                        return;
                    var event = _this.tracker.track.event({
                        type: snap_tracker_1.BeaconType.PROFILE_CLICK,
                        category: snap_tracker_1.BeaconCategory.RECOMMENDATIONS,
                        context: _this.config.globals.siteId ? { website: { trackingCode: _this.config.globals.siteId } } : undefined,
                        event: {
                            context: {
                                action: 'navigate',
                                placement: _this.store.profile.placement,
                                tag: _this.store.profile.tag,
                                type: 'product-recommendation',
                            },
                            profile: {
                                tag: _this.store.profile.tag,
                                placement: _this.store.profile.placement,
                                threshold: _this.store.profile.display.threshold,
                                templateId: _this.store.profile.display.template.uuid,
                                seed: getSeed(),
                            },
                        },
                    });
                    _this.events.click = event;
                    _this.eventManager.fire('track.click', { controller: _this, event: e, trackEvent: event });
                    return event;
                },
                impression: function () {
                    if (!_this.store.profile.tag || _this.events.impression)
                        return;
                    var event = _this.tracker.track.event({
                        type: snap_tracker_1.BeaconType.PROFILE_IMPRESSION,
                        category: snap_tracker_1.BeaconCategory.RECOMMENDATIONS,
                        context: _this.config.globals.siteId ? { website: { trackingCode: _this.config.globals.siteId } } : undefined,
                        event: {
                            context: {
                                placement: _this.store.profile.placement,
                                tag: _this.store.profile.tag,
                                type: 'product-recommendation',
                            },
                            profile: {
                                tag: _this.store.profile.tag,
                                placement: _this.store.profile.placement,
                                threshold: _this.store.profile.display.threshold,
                                templateId: _this.store.profile.display.template.uuid,
                                seed: getSeed(),
                            },
                        },
                    });
                    _this.events.impression = event;
                    _this.eventManager.fire('track.impression', { controller: _this, trackEvent: event });
                    return event;
                },
                render: function () {
                    if (!_this.store.profile.tag || _this.events.render)
                        return;
                    var event = _this.tracker.track.event({
                        type: snap_tracker_1.BeaconType.PROFILE_RENDER,
                        category: snap_tracker_1.BeaconCategory.RECOMMENDATIONS,
                        context: _this.config.globals.siteId ? { website: { trackingCode: _this.config.globals.siteId } } : undefined,
                        event: {
                            context: {
                                placement: _this.store.profile.placement,
                                tag: _this.store.profile.tag,
                                type: 'product-recommendation',
                            },
                            profile: {
                                tag: _this.store.profile.tag,
                                placement: _this.store.profile.placement,
                                threshold: _this.store.profile.display.threshold,
                                templateId: _this.store.profile.display.template.uuid,
                                seed: getSeed(),
                            },
                        },
                    });
                    _this.events.render = event;
                    _this.eventManager.fire('track.render', { controller: _this, trackEvent: event });
                    return event;
                },
            };
        })();
        _this.search = function () { return __awaiter(_this, void 0, void 0, function () {
            var params, err_1, searchProfile, response, afterSearchProfile, err_2, afterStoreProfile, err_3, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.initialized) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        params = this.params;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 17, , 18]);
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.eventManager.fire('beforeSearch', {
                                controller: this,
                                request: params,
                            })];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_1 = _a.sent();
                        if ((err_1 === null || err_1 === void 0 ? void 0 : err_1.message) == 'cancelled') {
                            this.log.warn("'beforeSearch' middleware cancelled");
                            return [2 /*return*/];
                        }
                        else {
                            this.log.error("error in 'beforeSearch' middleware");
                            throw err_1;
                        }
                        return [3 /*break*/, 7];
                    case 7:
                        searchProfile = this.profiler.create({ type: 'event', name: 'search', context: params }).start();
                        return [4 /*yield*/, this.client.recommend(params)];
                    case 8:
                        response = _a.sent();
                        searchProfile.stop();
                        this.log.profile(searchProfile);
                        afterSearchProfile = this.profiler.create({ type: 'event', name: 'afterSearch', context: params }).start();
                        _a.label = 9;
                    case 9:
                        _a.trys.push([9, 11, , 12]);
                        return [4 /*yield*/, this.eventManager.fire('afterSearch', {
                                controller: this,
                                request: params,
                                response: response,
                            })];
                    case 10:
                        _a.sent();
                        return [3 /*break*/, 12];
                    case 11:
                        err_2 = _a.sent();
                        if ((err_2 === null || err_2 === void 0 ? void 0 : err_2.message) == 'cancelled') {
                            this.log.warn("'afterSearch' middleware cancelled");
                            afterSearchProfile.stop();
                            return [2 /*return*/];
                        }
                        else {
                            this.log.error("error in 'afterSearch' middleware");
                            throw err_2;
                        }
                        return [3 /*break*/, 12];
                    case 12:
                        afterSearchProfile.stop();
                        this.log.profile(afterSearchProfile);
                        // update the store
                        this.store.update(response);
                        afterStoreProfile = this.profiler.create({ type: 'event', name: 'afterStore', context: params }).start();
                        _a.label = 13;
                    case 13:
                        _a.trys.push([13, 15, , 16]);
                        return [4 /*yield*/, this.eventManager.fire('afterStore', {
                                controller: this,
                                request: params,
                                response: response,
                            })];
                    case 14:
                        _a.sent();
                        return [3 /*break*/, 16];
                    case 15:
                        err_3 = _a.sent();
                        if ((err_3 === null || err_3 === void 0 ? void 0 : err_3.message) == 'cancelled') {
                            this.log.warn("'afterStore' middleware cancelled");
                            afterStoreProfile.stop();
                            return [2 /*return*/];
                        }
                        else {
                            this.log.error("error in 'afterStore' middleware");
                            throw err_3;
                        }
                        return [3 /*break*/, 16];
                    case 16:
                        afterStoreProfile.stop();
                        this.log.profile(afterStoreProfile);
                        return [3 /*break*/, 18];
                    case 17:
                        err_4 = _a.sent();
                        if (err_4) {
                            if (err_4.err && err_4.fetchDetails) {
                                switch (err_4.fetchDetails.status) {
                                    case 429: {
                                        this.store.error = {
                                            code: 429,
                                            type: snap_store_mobx_1.ErrorType.WARNING,
                                            message: 'Too many requests try again later',
                                        };
                                        break;
                                    }
                                    case 500: {
                                        this.store.error = {
                                            code: 500,
                                            type: snap_store_mobx_1.ErrorType.ERROR,
                                            message: 'Invalid Search Request or Service Unavailable',
                                        };
                                        break;
                                    }
                                    default: {
                                        this.store.error = {
                                            type: snap_store_mobx_1.ErrorType.ERROR,
                                            message: err_4.err.message,
                                        };
                                        break;
                                    }
                                }
                                this.log.error(this.store.error);
                                this.handleError(err_4.err, err_4.fetchDetails);
                            }
                            else {
                                this.store.error = {
                                    type: snap_store_mobx_1.ErrorType.ERROR,
                                    message: "Something went wrong... - ".concat(err_4),
                                };
                                this.log.error(err_4);
                                this.handleError(err_4);
                            }
                            this.store.loading = false;
                        }
                        return [3 /*break*/, 18];
                    case 18: return [2 /*return*/];
                }
            });
        }); };
        if (!config.tag) {
            throw new Error("Invalid config passed to RecommendationController. The \"tag\" attribute is required.");
        }
        // deep merge config with defaults
        _this.config = (0, deepmerge_1.default)(defaultConfig, _this.config);
        _this.store.setConfig(_this.config);
        // add 'beforeSearch' middleware
        _this.eventManager.on('beforeSearch', function (recommend, next) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        recommend.controller.store.loading = true;
                        return [4 /*yield*/, next()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        // add 'afterStore' middleware
        _this.eventManager.on('afterStore', function (recommend, next) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, next()];
                    case 1:
                        _a.sent();
                        recommend.controller.store.loading = false;
                        return [2 /*return*/];
                }
            });
        }); });
        // attach config plugins and event middleware
        _this.use(_this.config);
        return _this;
    }
    Object.defineProperty(RecommendationController.prototype, "params", {
        get: function () {
            var _a, _b;
            var params = __assign({ tag: this.config.tag, batched: this.config.batched, branch: this.config.branch || 'production', order: (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.order }, this.config.globals);
            var shopperId = this.tracker.getContext().shopperId;
            var cart = this.tracker.cookies.cart.get();
            var lastViewed = this.tracker.cookies.viewed.get();
            if (shopperId) {
                params.shopper = shopperId;
            }
            if (!params.siteId || params.siteId == this.tracker.getGlobals().siteId) {
                if (cart === null || cart === void 0 ? void 0 : cart.length) {
                    params.cart = cart;
                }
                if (lastViewed === null || lastViewed === void 0 ? void 0 : lastViewed.length) {
                    params.lastViewed = lastViewed;
                }
            }
            return params;
        },
        enumerable: false,
        configurable: true
    });
    return RecommendationController;
}(AbstractController_1.AbstractController));
exports.RecommendationController = RecommendationController;
