/// <reference types="node" />
import { StorageStore } from '@searchspring/snap-store-mobx';
import { AbstractController } from '../Abstract/AbstractController';
import { ControllerTypes } from '../types';
import { AutocompleteStore } from '@searchspring/snap-store-mobx';
import type { AutocompleteControllerConfig, ControllerServices, ContextVariables } from '../types';
import type { AutocompleteRequestModel } from '@searchspring/snapi-types';
export declare const INPUT_DELAY = 200;
declare type AutocompleteTrackMethods = {
    product: {
        click: (e: MouseEvent, result: any) => void;
    };
};
export declare class AutocompleteController extends AbstractController {
    type: ControllerTypes;
    store: AutocompleteStore;
    config: AutocompleteControllerConfig;
    storage: StorageStore;
    constructor(config: AutocompleteControllerConfig, { client, store, urlManager, eventManager, profiler, logger, tracker }: ControllerServices, context?: ContextVariables);
    track: AutocompleteTrackMethods;
    get params(): AutocompleteRequestModel;
    setFocused(inputElement?: HTMLInputElement): Promise<void>;
    reset(): void;
    handlers: {
        input: {
            enterKey: (e: KeyboardEvent) => Promise<boolean | undefined>;
            escKey: (e: KeyboardEvent) => void;
            focus: (e: FocusEvent) => void;
            formSubmit: (e: React.FormEvent<HTMLInputElement>) => Promise<void>;
            formElementChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
            input: (e: Event) => void;
            timeoutDelay: NodeJS.Timeout | undefined;
        };
        document: {
            click: (e: MouseEvent) => void;
        };
    };
    unbind(): void;
    bind(): Promise<void>;
    searchTrending: () => Promise<void>;
    search: () => Promise<void>;
}
export {};
//# sourceMappingURL=AutocompleteController.d.ts.map