import { useState } from 'preact/hooks';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import { defined } from '../../../utilities';
import { useTheme, CacheProvider } from '../../../providers';
import { Icon } from '../../Atoms/Icon';
import { useA11y } from '../../../hooks/useA11y';
const CSS = {
    checkbox: ({ size, color, theme }) => css({
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: size,
        width: size,
        border: `1px solid ${color || theme?.colors?.primary || '#333'}`,
        '&.ss__checkbox--disabled': {
            opacity: 0.7,
        },
        '& .ss__checkbox__empty': {
            display: 'inline-block',
            width: `calc(${size} - 30%)`,
            height: `calc(${size} - 30%)`,
        },
    }),
    native: () => css({}),
};
export const Checkbox = observer((properties) => {
    const globalTheme = useTheme();
    const theme = { ...globalTheme, ...properties.theme };
    const props = {
        // default props
        size: '12px',
        startChecked: false,
        disableA11y: false,
        // global theme
        ...globalTheme?.components?.checkbox,
        // props
        ...properties,
        ...properties.theme?.components?.checkbox,
    };
    const { checked, color, disabled, icon, iconColor, onClick, size, startChecked, native, disableA11y, disableStyles, className, style } = props;
    const subProps = {
        icon: {
            // default props
            className: 'ss__checkbox__icon',
            icon: 'check-thin',
            // global theme
            ...globalTheme?.components?.icon,
            // inherited props
            ...defined({
                color: iconColor || color || theme?.colors?.primary,
                disableStyles,
                icon,
                size: size && `calc(${size} - 30%)`,
            }),
            // component theme overrides
            theme: props.theme,
        },
    };
    let checkedState, setCheckedState;
    const stateful = checked === undefined;
    if (stateful) {
        [checkedState, setCheckedState] = useState(startChecked);
    }
    else {
        checkedState = checked;
    }
    const clickFunc = (e) => {
        if (!disabled) {
            if (stateful) {
                setCheckedState &&
                    setCheckedState((prev) => {
                        return !prev;
                    });
            }
            onClick && onClick(e);
        }
    };
    const styling = {};
    if (!disableStyles) {
        if (native) {
            styling.css = [CSS.native(), style];
        }
        else {
            styling.css = [CSS.checkbox({ size, color, theme }), style];
        }
    }
    else if (style) {
        styling.css = [style];
    }
    return (jsx(CacheProvider, null, native ? (jsx("input", { ...styling, className: classnames('ss__checkbox', { 'ss__checkbox--disabled': disabled }, className), type: "checkbox", onClick: (e) => clickFunc(e), disabled: disabled, checked: checkedState })) : (jsx("span", { ...styling, className: classnames('ss__checkbox', { 'ss__checkbox--disabled': disabled }, className), onClick: (e) => clickFunc(e), ref: (e) => (!disableA11y ? useA11y(e) : null), "aria-label": `${disabled ? 'disabled' : ''} ${checkedState ? 'checked' : 'unchecked'} checkbox`, role: "checkbox" }, checkedState ? jsx(Icon, { ...subProps.icon }) : jsx("span", { className: "ss__checkbox__empty" })))));
});
