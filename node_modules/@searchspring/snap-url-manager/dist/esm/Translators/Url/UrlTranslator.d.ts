import { UrlState, Translator, TranslatorConfig, ParamLocationType } from '../../types';
declare type UrlParameter = {
    key: Array<string>;
    value: string;
    type: keyof typeof ParamLocationType;
};
declare type MapOptions = {
    name: string;
    type: keyof typeof ParamLocationType;
};
declare type UnnamedMapOptions = {
    type: keyof typeof ParamLocationType;
};
export declare type CoreMap = {
    query: MapOptions;
    oq: MapOptions;
    rq: MapOptions;
    tag: MapOptions;
    page: MapOptions;
    pageSize: MapOptions;
    sort: MapOptions;
    filter: MapOptions;
    fallbackQuery: MapOptions;
};
declare type CustomMap = {
    [param: string]: UnnamedMapOptions;
};
export declare type UrlTranslatorParametersConfig = {
    core: CoreMap;
    custom: CustomMap;
};
declare type UrlTranslatorConfigFull = TranslatorConfig & {
    urlRoot: string;
    settings: UrlTranslatorSettingsConfig;
    parameters: UrlTranslatorParametersConfig;
};
export declare type UrlTranslatorConfig = DeepPartial<UrlTranslatorConfigFull>;
export declare type UrlTranslatorSettingsConfig = {
    corePrefix: string;
    coreType?: keyof typeof ParamLocationType;
    customType: keyof typeof ParamLocationType;
    serializeUrlRoot: boolean;
};
declare type DeepPartial<T> = Partial<{
    [P in keyof T]: DeepPartial<T[P]>;
}>;
export declare class UrlTranslator implements Translator {
    protected config: UrlTranslatorConfigFull;
    protected reverseMapping: Record<string, string>;
    constructor(config?: UrlTranslatorConfig);
    bindExternalEvents(update: () => void): void;
    getCurrentUrl(): string;
    getConfig(): UrlTranslatorConfigFull;
    deserialize(url: string): UrlState;
    protected parseUrlParams(url: string): Array<UrlParameter>;
    protected parseQueryString(queryString: string): Array<UrlParameter>;
    protected parseHashString(hashString: string): Array<UrlParameter>;
    protected paramsToState(params: Array<UrlParameter>): UrlState;
    protected parseCoreOther(otherParams: Array<UrlParameter>): UrlState;
    protected parseCoreFilter(filterParams: Array<UrlParameter>): UrlState;
    protected parseCoreSort(sortParams: Array<UrlParameter>): UrlState;
    protected parseOther(otherParams: Array<UrlParameter>): UrlState;
    serialize(state: UrlState): string;
    protected stateToParams(state: UrlState): Array<UrlParameter>;
    protected encodeCoreFilters(state: UrlState): Array<UrlParameter>;
    protected encodeCoreSorts(state: UrlState): Array<UrlParameter>;
    protected encodeCoreOther(state: UrlState, except: string[]): Array<UrlParameter>;
    protected encodeOther(state: UrlState): Array<UrlParameter>;
    go(url: string, config?: {
        history: string;
    }): void;
}
export {};
//# sourceMappingURL=UrlTranslator.d.ts.map