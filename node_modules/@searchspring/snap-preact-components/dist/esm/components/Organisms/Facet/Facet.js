/** @jsx jsx */
import { Fragment } from 'preact';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import { FacetListOptions } from '../../Molecules/FacetListOptions';
import { FacetGridOptions } from '../../Molecules/FacetGridOptions';
import { FacetPaletteOptions } from '../../Molecules/FacetPaletteOptions';
import { FacetHierarchyOptions } from '../../Molecules/FacetHierarchyOptions';
import { FacetSlider } from '../../Molecules/FacetSlider';
import { SearchInput } from '../../Molecules/SearchInput';
import { Icon } from '../../Atoms/Icon';
import { Dropdown } from '../../Atoms/Dropdown';
import { FacetDisplay } from '../../../types';
import { defined, cloneWithProps } from '../../../utilities';
import { useTheme, CacheProvider } from '../../../providers';
import { useA11y } from '../../../hooks/useA11y';
const CSS = {
    facet: ({ color, theme }) => css({
        width: '100%',
        margin: '0 0 20px 0',
        '& .ss__facet__header': {
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            color: color,
            border: 'none',
            borderBottom: `2px solid ${theme?.colors?.primary || '#ccc'}`,
            padding: '6px 0',
        },
        '& .ss__facet__options': {
            marginTop: '8px',
            maxHeight: '300px',
            overflowY: 'auto',
            overflowX: 'hidden',
        },
        '& .ss__facet__show-more-less': {
            display: 'block',
            margin: '8px',
            cursor: 'pointer',
            '& .ss__icon': {
                marginRight: '8px',
            },
        },
        '& .ss__search-input': {
            margin: '16px 0 0 0',
        },
    }),
};
export const Facet = observer((properties) => {
    const globalTheme = useTheme();
    const theme = { ...globalTheme, ...properties.theme };
    let props = {
        // default props
        limit: 12,
        disableOverflow: false,
        iconCollapse: 'angle-up',
        iconExpand: 'angle-down',
        showMoreText: 'Show More',
        showLessText: 'Show Less',
        iconOverflowMore: 'plus',
        iconOverflowLess: 'minus',
        searchable: false,
        // global theme
        ...globalTheme?.components?.facet,
        // props
        ...properties,
        ...properties.theme?.components?.facet,
    };
    //manual props override on a per facet level using the fields prop
    if (props.fields && props.fields[props.facet?.field]) {
        props = {
            ...props,
            ...props.fields[props.facet?.field],
        };
    }
    const { disableCollapse, facet, iconCollapse, iconExpand, limit, disableOverflow, iconColor, color, previewOnFocus, valueProps, showMoreText, showLessText, iconOverflowMore, iconOverflowLess, overflowSlot, optionsSlot, disableStyles, className, style, searchable, } = props;
    const subProps = {
        dropdown: {
            // default props
            className: 'ss__facet__dropdown',
            disableClickOutside: true,
            disableOverlay: true,
            // global theme
            ...globalTheme?.components?.dropdown,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        icon: {
            // default props
            className: 'ss__facet__dropdown__icon',
            size: '12px',
            color: iconColor || color,
            // global theme
            ...globalTheme?.components?.icon,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        showMoreLessIcon: {
            // default props
            className: 'ss__facet__show-more-less__icon',
            size: '10px',
            color: iconColor || color,
            // global theme
            ...globalTheme?.components?.icon,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        facetHierarchyOptions: {
            // default props
            className: 'ss__facet__facet-hierarchy-options',
            // global theme
            ...globalTheme?.components?.facetHierarchyOptions,
            // inherited props
            ...defined({
                disableStyles,
                previewOnFocus,
                valueProps,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        facetListOptions: {
            // default props
            className: 'ss__facet__facet-list-options',
            // global theme
            ...globalTheme?.components?.facetListOptions,
            // inherited props
            ...defined({
                disableStyles,
                previewOnFocus,
                valueProps,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        facetGridOptions: {
            // default props
            className: 'ss__facet__facet-grid-options',
            // global theme
            ...globalTheme?.components?.facetGridOptions,
            // inherited props
            ...defined({
                disableStyles,
                previewOnFocus,
                valueProps,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        facetPaletteOptions: {
            // default props
            className: 'ss__facet__facet-palette-options',
            // global theme
            ...globalTheme?.components?.facetPaletteOptions,
            // inherited props
            ...defined({
                disableStyles,
                previewOnFocus,
                valueProps,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        facetSlider: {
            // default props
            className: 'ss__facet__facet-slider',
            // global theme
            ...globalTheme?.components?.facetSlider,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
        searchInput: {
            // default props
            className: 'ss__facet__search-input',
            // global theme
            ...globalTheme?.components?.searchInput,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
    };
    let limitedValues;
    if (facet?.overflow && limit && Number.isInteger(limit) && !disableOverflow) {
        facet.overflow?.setLimit(limit);
        limitedValues = facet?.refinedValues;
    }
    else if (facet?.overflow && Number.isInteger(limit)) {
        limitedValues = facet?.values.slice(0, limit);
    }
    else {
        limitedValues = facet?.values;
    }
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.facet({ color, theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    // Search within facet
    const searchableFacet = {
        allowableTypes: ['list', 'grid', 'palette'],
        searchFilter: (e) => {
            if (facet?.search) {
                facet.search.input = e.target.value;
            }
        },
    };
    return (facet && (jsx(CacheProvider, null,
        jsx("div", { ...styling, className: classnames('ss__facet', `ss__facet--${facet.display}`, `ss__facet--${facet.field}`, className) },
            jsx(Dropdown, { ...subProps.dropdown, open: disableCollapse || !facet?.collapsed, onClick: () => !disableCollapse && facet.toggleCollapse && facet?.toggleCollapse(), disableA11y: true, button: jsx("div", { className: "ss__facet__header", ref: (e) => useA11y(e, disableCollapse ? -1 : 0), role: "heading", "aria-level": 3, "aria-label": `currently ${facet?.collapsed ? 'collapsed' : 'open'} ${facet.label} facet dropdown ${facet.values?.length ? facet.values?.length + ' options' : ''}` },
                    facet?.label,
                    !disableCollapse && jsx(Icon, { ...subProps.icon, icon: facet?.collapsed ? iconExpand : iconCollapse })) },
                searchable && searchableFacet.allowableTypes.includes(facet.display) && (jsx(SearchInput, { ...subProps.searchInput, onChange: searchableFacet.searchFilter, placeholder: `Search ${facet.label}` })),
                jsx("div", { className: classnames('ss__facet__options', className) }, (() => {
                    //manual options component
                    if (optionsSlot) {
                        return cloneWithProps(optionsSlot, { facet, valueProps, limit, previewOnFocus });
                    }
                    else {
                        switch (facet?.display) {
                            case FacetDisplay.SLIDER:
                                return jsx(FacetSlider, { ...subProps.facetSlider, facet: facet });
                            case FacetDisplay.GRID:
                                return jsx(FacetGridOptions, { ...subProps.facetGridOptions, values: limitedValues, facet: facet });
                            case FacetDisplay.PALETTE:
                                return (jsx(FacetPaletteOptions, { ...subProps.facetPaletteOptions, values: limitedValues, facet: facet }));
                            case FacetDisplay.HIERARCHY:
                                return (jsx(FacetHierarchyOptions, { ...subProps.facetHierarchyOptions, values: limitedValues, facet: facet }));
                            default:
                                return jsx(FacetListOptions, { ...subProps.facetListOptions, values: limitedValues, facet: facet });
                        }
                    }
                })()),
                !disableOverflow && facet?.overflow?.enabled && (jsx("div", { className: "ss__facet__show-more-less", onClick: () => facet.overflow?.toggle(), ref: (e) => useA11y(e) }, overflowSlot ? (cloneWithProps(overflowSlot, { facet })) : (jsx(Fragment, null,
                    jsx(Icon, { ...subProps.showMoreLessIcon, icon: (facet.overflow?.remaining || 0) > 0 ? iconOverflowMore : iconOverflowLess }),
                    jsx("span", null, (facet?.overflow?.remaining || 0) > 0 ? showMoreText : showLessText))))))))));
});
