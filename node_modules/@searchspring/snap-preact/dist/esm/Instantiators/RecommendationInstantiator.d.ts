import { AppMode, DomTargeter } from '@searchspring/snap-toolbox';
import { Client } from '@searchspring/snap-client';
import { Logger } from '@searchspring/snap-logger';
import { Tracker } from '@searchspring/snap-tracker';
import type { ClientConfig, ClientGlobals } from '@searchspring/snap-client';
import type { UrlTranslatorConfig } from '@searchspring/snap-url-manager';
import type { AbstractController, RecommendationController, Attachments, ContextVariables } from '@searchspring/snap-controller';
import type { Middleware } from '@searchspring/snap-event-manager';
export declare type RecommendationInstantiatorConfig = {
    mode?: keyof typeof AppMode | AppMode;
    client?: {
        globals: ClientGlobals;
        config?: ClientConfig;
    };
    components: {
        [name: string]: () => Promise<any> | any;
    };
    config: {
        branch: string;
        realtime?: boolean;
        batched?: boolean;
        limit?: number;
    } & Attachments;
    selector?: string;
    url?: UrlTranslatorConfig;
    context?: ContextVariables;
};
export declare type RecommendationInstantiatorServices = {
    client?: Client;
    logger?: Logger;
    tracker?: Tracker;
};
export declare class RecommendationInstantiator {
    private mode;
    client: Client;
    tracker: Tracker;
    logger: Logger;
    controller: {
        [key: string]: RecommendationController;
    };
    config: RecommendationInstantiatorConfig;
    context: ContextVariables;
    targeter: DomTargeter;
    private uses;
    private plugins;
    private middleware;
    constructor(config: RecommendationInstantiatorConfig, services?: RecommendationInstantiatorServices, context?: ContextVariables);
    plugin(func: (cntrlr: AbstractController, ...args: any) => Promise<void>, ...args: unknown[]): void;
    on(event: string, ...func: Middleware<unknown>[]): void;
    use(attachments: Attachments): void;
}
//# sourceMappingURL=RecommendationInstantiator.d.ts.map