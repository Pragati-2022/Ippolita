"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Results = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var mobx_react_lite_1 = require("mobx-react-lite");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var deepmerge_1 = __importDefault(require("deepmerge"));
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var InlineBanner_1 = require("../../Atoms/Merchandising/InlineBanner");
var Result_1 = require("../../Molecules/Result");
var types_1 = require("../../../types");
var utilities_1 = require("../../../utilities");
var providers_1 = require("../../../providers");
var useDisplaySettings_1 = require("../../../hooks/useDisplaySettings");
var CSS = {
    results: function (_a) {
        var _b;
        var columns = _a.columns, gapSize = _a.gapSize;
        return (0, react_1.css)({
            display: 'flex',
            flexFlow: 'row wrap',
            gap: gapSize,
            gridTemplateRows: 'auto',
            gridTemplateColumns: "repeat(".concat(columns, ", 1fr)"),
            '& .ss__result': (_b = {
                    boxSizing: 'border-box',
                    flex: '0 1 auto',
                    width: "calc(".concat(100 / columns, "% - (").concat(columns - 1, " * ").concat(gapSize, " / ").concat(columns, " ) )"),
                    marginRight: gapSize,
                    marginBottom: gapSize
                },
                _b["&:nth-of-type(".concat(columns, "n)")] = {
                    marginRight: '0',
                },
                _b["&:nth-last-of-type(-n+".concat(columns, ")")] = {
                    marginBottom: '0',
                },
                _b),
            '@supports (display: grid)': {
                display: 'grid',
                '& .ss__result': {
                    width: 'initial',
                    margin: 0,
                },
            },
        });
    },
};
exports.Results = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    var globalTheme = (0, providers_1.useTheme)();
    var defaultBreakpointsProps = {
        0: {
            columns: properties.columns || 1,
        },
        540: {
            columns: properties.columns || 2,
        },
        768: {
            columns: properties.columns || 3,
        },
        991: {
            columns: properties.columns || 4,
        },
    };
    var props = __assign(__assign(__assign({ 
        // default props
        results: (_b = (_a = properties.controller) === null || _a === void 0 ? void 0 : _a.store) === null || _b === void 0 ? void 0 : _b.results, columns: 4, gapSize: '20px', layout: types_1.Layout.GRID, breakpoints: defaultBreakpointsProps }, (_c = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _c === void 0 ? void 0 : _c.results), properties), (_e = (_d = properties.theme) === null || _d === void 0 ? void 0 : _d.components) === null || _e === void 0 ? void 0 : _e.results);
    var displaySettings = (0, useDisplaySettings_1.useDisplaySettings)((props === null || props === void 0 ? void 0 : props.breakpoints) || {});
    var theme = (0, deepmerge_1.default)((props === null || props === void 0 ? void 0 : props.theme) || {}, (displaySettings === null || displaySettings === void 0 ? void 0 : displaySettings.theme) || {}, { arrayMerge: function (destinationArray, sourceArray) { return sourceArray; } });
    props = __assign(__assign(__assign({}, props), displaySettings), { theme: theme });
    var disableStyles = props.disableStyles, className = props.className, layout = props.layout, style = props.style, controller = props.controller;
    var subProps = {
        result: __assign(__assign(__assign({ 
            // default props
            className: 'ss__results__result' }, (_f = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _f === void 0 ? void 0 : _f.result), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
        inlineBanner: __assign(__assign(__assign({ 
            // default props
            className: 'ss__results__inline-banner' }, (_g = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _g === void 0 ? void 0 : _g.inlineBanner), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
    };
    var results = props.results;
    if ((props === null || props === void 0 ? void 0 : props.columns) && (props === null || props === void 0 ? void 0 : props.rows) && props.columns > 0 && props.rows > 0) {
        results = (_h = props.results) === null || _h === void 0 ? void 0 : _h.slice(0, props.columns * props.rows);
    }
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.results({ columns: layout == types_1.Layout.LIST ? 1 : props.columns, gapSize: props.gapSize }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return (results === null || results === void 0 ? void 0 : results.length) ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__results', "ss__results-".concat(props.layout), className) }), results.map(function (result) {
            return (function () {
                switch (result.type) {
                    case snap_store_mobx_1.ContentType.BANNER:
                        return (0, react_1.jsx)(InlineBanner_1.InlineBanner, __assign({}, subProps.inlineBanner, { key: result.id, banner: result, layout: props.layout }));
                    default:
                        return ((0, react_1.jsx)(Result_1.Result, __assign({ key: result.id }, subProps.result, { result: result, layout: props.layout, controller: controller })));
                }
            })();
        })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
