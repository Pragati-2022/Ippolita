import { DomTargeter } from '@searchspring/snap-toolbox';
import type { Client } from '@searchspring/snap-client';
import type { AbstractStore } from '@searchspring/snap-store-mobx';
import type { UrlManager } from '@searchspring/snap-url-manager';
import type { EventManager, Middleware } from '@searchspring/snap-event-manager';
import type { Profiler } from '@searchspring/snap-profiler';
import type { Logger } from '@searchspring/snap-logger';
import type { Tracker } from '@searchspring/snap-tracker';
import type { Target, OnTarget } from '@searchspring/snap-toolbox';
import type { ControllerServices, ControllerConfig, Attachments, ContextVariables, PluginFunction } from '../types';
export declare abstract class AbstractController {
    id: string;
    type: string;
    config: ControllerConfig;
    client: Client;
    store: AbstractStore;
    urlManager: UrlManager;
    eventManager: EventManager;
    profiler: Profiler;
    log: Logger;
    tracker: Tracker;
    context: ContextVariables;
    targeters: {
        [key: string]: DomTargeter;
    };
    protected _initialized: boolean;
    get initialized(): boolean;
    handleError: (err: unknown, details?: {
        [any: string]: unknown;
    } | undefined) => void;
    constructor(config: ControllerConfig, { client, store, urlManager, eventManager, profiler, logger, tracker }: ControllerServices, context?: ContextVariables);
    createTargeter(target: Target, onTarget: OnTarget, document?: Document): DomTargeter | undefined;
    addTargeter(target: DomTargeter): DomTargeter | undefined;
    init(): Promise<void>;
    retarget(): void;
    abstract search(): Promise<void>;
    plugin(func: PluginFunction, ...args: unknown[]): Promise<void>;
    on<T>(event: string, ...func: Middleware<T>[]): void;
    use(attachments: Attachments): void;
}
//# sourceMappingURL=AbstractController.d.ts.map