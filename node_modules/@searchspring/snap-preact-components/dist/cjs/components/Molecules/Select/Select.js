"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var hooks_1 = require("preact/hooks");
var mobx_react_lite_1 = require("mobx-react-lite");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var providers_1 = require("../../../providers");
var utilities_1 = require("../../../utilities");
var Dropdown_1 = require("../../Atoms/Dropdown");
var Button_1 = require("../../Atoms/Button");
var Icon_1 = require("../../Atoms/Icon");
var useA11y_1 = require("../../../hooks/useA11y");
var CSS = {
    select: function (_a) {
        var _b, _c;
        var color = _a.color, backgroundColor = _a.backgroundColor, borderColor = _a.borderColor, theme = _a.theme;
        return (0, react_1.css)({
            display: 'inline-flex',
            color: color,
            '&.ss__select--disabled': {
                opacity: 0.7,
            },
            '& .ss__select__dropdown__button__icon': {
                margin: 'auto 0 auto 5px',
            },
            '& .ss__select__label': {
                marginRight: '5px',
            },
            '& .ss__select__select': {
                position: 'relative',
                zIndex: '10000',
                backgroundColor: backgroundColor || '#fff',
                listStyle: 'none',
                padding: '0',
                marginTop: '-1px',
                border: "1px solid ".concat(borderColor || color || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary) || '#333'),
                '& .ss__select__select__option': {
                    cursor: 'pointer',
                    padding: '6px 8px',
                    color: 'initial',
                    '&.ss__select__select__option--selected': {
                        fontWeight: 'bold',
                    },
                    '&:hover': {
                        backgroundColor: ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.hover) || '#f8f8f8',
                    },
                },
            },
        });
    },
    native: function () { return (0, react_1.css)({}); },
};
exports.Select = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c, _d, _e, _f;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({ 
        // default props
        iconOpen: 'angle-down', iconClose: 'angle-up', separator: ': ', startOpen: false }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.select), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.select);
    var backgroundColor = props.backgroundColor, borderColor = props.borderColor, color = props.color, clearSelection = props.clearSelection, disableClickOutside = props.disableClickOutside, disabled = props.disabled, hideLabelOnSelection = props.hideLabelOnSelection, iconColor = props.iconColor, iconClose = props.iconClose, iconOpen = props.iconOpen, label = props.label, native = props.native, onSelect = props.onSelect, selected = props.selected, separator = props.separator, startOpen = props.startOpen, stayOpenOnSelection = props.stayOpenOnSelection, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var options = props.options;
    var subProps = {
        dropdown: __assign(__assign(__assign({ className: 'ss__select__dropdown' }, (_d = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _d === void 0 ? void 0 : _d.dropdown), (0, utilities_1.defined)({
            disableStyles: disableStyles,
            disabled: disabled,
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
        button: __assign(__assign(__assign({ 
            // default props
            className: 'ss__select__dropdown__button' }, (_e = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _e === void 0 ? void 0 : _e.button), (0, utilities_1.defined)({
            disableStyles: disableStyles,
            disabled: disabled,
            color: color,
            backgroundColor: backgroundColor,
            borderColor: borderColor,
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
        icon: __assign(__assign(__assign({ 
            // default props
            className: 'ss__select__dropdown__button__icon' }, (_f = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _f === void 0 ? void 0 : _f.icon), (0, utilities_1.defined)({
            disableStyles: disableStyles,
            color: iconColor || color,
            size: '14px',
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
    };
    // open state
    var _g = (0, hooks_1.useState)(Boolean(startOpen)), open = _g[0], setOpen = _g[1];
    // selection state
    var _h = (0, hooks_1.useState)(selected), selection = _h[0], setSelection = _h[1];
    if (selection && clearSelection) {
        options = __spreadArray([
            {
                label: clearSelection,
                value: '',
            }
        ], options, true);
    }
    var makeSelection = function (e, option) {
        if (option != selection) {
            onSelect && onSelect(e, option);
        }
        setSelection(option);
        !stayOpenOnSelection && setOpen(false);
    };
    var styling = {};
    if (!disableStyles) {
        if (native) {
            styling.css = [CSS.native(), style];
        }
        else {
            styling.css = [CSS.select({ color: color, backgroundColor: backgroundColor, borderColor: borderColor, theme: theme }), style];
        }
    }
    else if (style) {
        styling.css = [style];
    }
    var selectedOptions = options.filter(function (option) { return (selection === null || selection === void 0 ? void 0 : selection.value) === option.value; });
    // options can be an Array or ObservableArray - but should have length
    return typeof options == 'object' && (options === null || options === void 0 ? void 0 : options.length) ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__select', { 'ss__select--disabled': disabled }, className) }), native ? ((0, react_1.jsx)(preact_1.Fragment, null,
            label && !hideLabelOnSelection && ((0, react_1.jsx)("span", { className: "ss__select__label" },
                label,
                separator && (0, react_1.jsx)("span", { className: "ss__select__label__separator" }, separator))),
            (0, react_1.jsx)("select", { className: "ss__select__select", disabled: disabled || undefined, onChange: function (e) {
                    var selectElement = e.target;
                    var selectedOptionElement = selectElement.options[selectElement.selectedIndex];
                    var selectedOption = options
                        .filter(function (option, index) {
                        return option.label == selectedOptionElement.text && (option.value == selectedOptionElement.value || option.value == index);
                    })
                        .pop();
                    !disabled && makeSelection(e, selectedOption);
                } },
                !selection && clearSelection && ((0, react_1.jsx)("option", { className: "ss__select__select__option", selected: true, value: "" }, clearSelection)),
                options.map(function (option, index) {
                    var _a;
                    return ((0, react_1.jsx)("option", { className: "ss__select__select__option", selected: (selection === null || selection === void 0 ? void 0 : selection.value) === option.value, value: (_a = option.value) !== null && _a !== void 0 ? _a : index }, option.label));
                })))) : ((0, react_1.jsx)(Dropdown_1.Dropdown, __assign({}, subProps.dropdown, { disableClickOutside: disableClickOutside, open: open, onToggle: function (e, state) { return setOpen(function (prev) { return state !== null && state !== void 0 ? state : !prev; }); }, onClick: function () { return setOpen(function (prev) { return !prev; }); }, disableA11y: true, button: (0, react_1.jsx)(Button_1.Button, __assign({}, subProps.button, { disableA11y: true }),
                label && !hideLabelOnSelection && ((0, react_1.jsx)("span", { className: "ss__select__label", ref: function (e) { return (0, useA11y_1.useA11y)(e); }, "aria-label": "".concat(label, " dropdown, ").concat(options.length, " options ").concat(selectedOptions.length ? ", Currently selected option is ".concat(selectedOptions[0].label) : ''), "aria-expanded": open, role: "button" },
                    label,
                    separator && selection && (0, react_1.jsx)("span", { className: "ss__select__label__separator" }, separator))),
                selection && (0, react_1.jsx)("span", { className: "ss__select__selection" }, selection === null || selection === void 0 ? void 0 : selection.label),
                (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon, { icon: open ? iconClose : iconOpen }))) }),
            (0, react_1.jsx)("ul", { className: "ss__select__select" }, options.map(function (option, idx) { return ((0, react_1.jsx)("li", { ref: function (e) { return (0, useA11y_1.useA11y)(e); }, role: 'link', "aria-label": "".concat((selection === null || selection === void 0 ? void 0 : selection.value) === option.value ? 'selected option,' : '', " option ").concat(idx + 1, " of ").concat(options.length, ", ").concat(option.label), className: (0, classnames_1.default)('ss__select__select__option', {
                    'ss__select__select__option--selected': (selection === null || selection === void 0 ? void 0 : selection.value) === option.value,
                }), onClick: function (e) { return !disabled && makeSelection(e, option); } },
                (0, react_1.jsx)("span", null, option.label))); }))))))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
