"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationInstantiator = void 0;
var jsx_runtime_1 = require("preact/jsx-runtime");
var preact_1 = require("preact");
var deepmerge_1 = __importDefault(require("deepmerge"));
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var snap_client_1 = require("@searchspring/snap-client");
var snap_logger_1 = require("@searchspring/snap-logger");
var snap_tracker_1 = require("@searchspring/snap-tracker");
var RecommendationInstantiator = /** @class */ (function () {
    function RecommendationInstantiator(config, services, context) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g;
        this.mode = snap_toolbox_1.AppMode.production;
        this.controller = {};
        this.uses = [];
        this.plugins = [];
        this.middleware = [];
        this.config = config;
        if (!this.config) {
            throw new Error("Recommendation Instantiator config is required");
        }
        if (!((_a = this.config.config) === null || _a === void 0 ? void 0 : _a.branch)) {
            throw new Error("Recommendation Instantiator config must contain 'branch' property");
        }
        if (!this.config.components || typeof this.config.components != 'object' || !Object.keys(this.config.components).length) {
            throw new Error("Recommendation Instantiator config must contain 'components' mapping property");
        }
        if ((!(services === null || services === void 0 ? void 0 : services.client) || !(services === null || services === void 0 ? void 0 : services.tracker)) && !((_d = (_c = (_b = this.config) === null || _b === void 0 ? void 0 : _b.client) === null || _c === void 0 ? void 0 : _c.globals) === null || _d === void 0 ? void 0 : _d.siteId)) {
            throw new Error("Recommendation Instantiator config must contain a valid config.client.globals.siteId value");
        }
        if (this.config.mode && Object.values(snap_toolbox_1.AppMode).includes(this.config.mode)) {
            this.mode = this.config.mode;
            if ((_g = (_f = (_e = this.config) === null || _e === void 0 ? void 0 : _e.client) === null || _f === void 0 ? void 0 : _f.globals) === null || _g === void 0 ? void 0 : _g.siteId) {
                this.config.client.config = this.config.client.config || {};
                this.config.client.config.mode = this.config.client.config.mode || this.mode;
            }
        }
        window.searchspring = window.searchspring || {};
        this.context = (0, deepmerge_1.default)(context || {}, config.context || {});
        this.client = (services === null || services === void 0 ? void 0 : services.client) || new snap_client_1.Client(this.config.client.globals, this.config.client.config);
        this.tracker = (services === null || services === void 0 ? void 0 : services.tracker) || new snap_tracker_1.Tracker(this.config.client.globals);
        this.logger = (services === null || services === void 0 ? void 0 : services.logger) || new snap_logger_1.Logger({ prefix: 'RecommendationInstantiator ', mode: this.mode });
        var profileCount = {};
        this.targeter = new snap_toolbox_1.DomTargeter([
            {
                selector: "script[type=\"searchspring/recommend\"], script[type=\"searchspring/personalized-recommendations\"]".concat(this.config.selector ? " , ".concat(this.config.selector) : ''),
                autoRetarget: true,
                clickRetarget: true,
                inject: {
                    action: 'before',
                    element: function (target, origElement) {
                        var profile = origElement.getAttribute('profile') || '';
                        var recsContainer = document.createElement('div');
                        recsContainer.setAttribute('searchspring-recommend', profile);
                        return recsContainer;
                    },
                },
            },
        ], function (target, injectedElem, elem) { return __awaiter(_this, void 0, void 0, function () {
            var tag, contextGlobals, elemContext, context, shopper, shopperId, product, seed, cart, options, cartContents, cartFuncContents, defaultGlobals, globals, controllerConfig, controller, createRecommendationController, profileVars, component, RecommendationsComponent, _a;
            var _this = this;
            var _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        tag = injectedElem === null || injectedElem === void 0 ? void 0 : injectedElem.getAttribute('searchspring-recommend');
                        if (!tag) {
                            this.logger.warn("'profile' attribute is missing from <script> tag, skipping this profile", elem);
                            return [2 /*return*/];
                        }
                        contextGlobals = {};
                        elemContext = (0, snap_toolbox_1.getContext)(['shopperId', 'shopper', 'product', 'seed', 'cart', 'options', 'profile', 'custom'], elem);
                        context = (0, deepmerge_1.default)(this.context, elemContext);
                        shopper = context.shopper, shopperId = context.shopperId, product = context.product, seed = context.seed, cart = context.cart, options = context.options;
                        /*
                            type instantiatorContext = {
                                shopper?: {
                                    id: string;
                                };
                                shopperId?: string;
                                product?: string;
                                seed?: string;
                                cart?: string[] | () => string[];
                                options?: {
                                    siteId?: string;
                                    branch?: string;
                                    batched?: boolean;
                                    realtime?: boolean;
                                    categories?: any;
                                    limit?: number;
                                }
                            }
                        */
                        if (shopper || shopperId) {
                            contextGlobals.shopper = (shopper === null || shopper === void 0 ? void 0 : shopper.id) || shopperId;
                        }
                        if (product || seed) {
                            contextGlobals.product = product || seed;
                        }
                        if (options === null || options === void 0 ? void 0 : options.branch) {
                            contextGlobals.branch = options.branch;
                        }
                        if (options === null || options === void 0 ? void 0 : options.siteId) {
                            contextGlobals.siteId = options.siteId;
                        }
                        if (options === null || options === void 0 ? void 0 : options.categories) {
                            contextGlobals.categories = options.categories;
                        }
                        if ((options === null || options === void 0 ? void 0 : options.limit) && Number.isInteger(Number(options === null || options === void 0 ? void 0 : options.limit))) {
                            contextGlobals.limits = Number(options === null || options === void 0 ? void 0 : options.limit);
                        }
                        if (typeof cart === 'function') {
                            try {
                                cartFuncContents = cart();
                                if (Array.isArray(cartFuncContents)) {
                                    cartContents = cartFuncContents;
                                }
                            }
                            catch (e) {
                                this.logger.warn("Error getting cart contents from function", e);
                            }
                        }
                        else if (Array.isArray(cart)) {
                            cartContents = cart;
                        }
                        if (Array.isArray(cartContents)) {
                            this.tracker.cookies.cart.set(cartContents);
                            contextGlobals.cart = this.tracker.cookies.cart.get();
                        }
                        profileCount[tag] = profileCount[tag] + 1 || 1;
                        defaultGlobals = {
                            limits: 20,
                        };
                        globals = (0, deepmerge_1.default)((0, deepmerge_1.default)(defaultGlobals, ((_b = this.config.client) === null || _b === void 0 ? void 0 : _b.globals) || {}), contextGlobals);
                        controllerConfig = __assign(__assign({ id: "recommend_".concat(tag, "_").concat(profileCount[tag] - 1), tag: tag, batched: (_c = options === null || options === void 0 ? void 0 : options.batched) !== null && _c !== void 0 ? _c : true, realtime: Boolean(options === null || options === void 0 ? void 0 : options.realtime) }, this.config.config), { globals: globals });
                        controller = Object.keys(this.controller)
                            .map(function (id) { return _this.controller[id]; })
                            .filter(function (controller) {
                            return (JSON.stringify({
                                batched: controller.config.batched,
                                branch: controller.config.branch,
                                globals: controller.config.globals,
                                tag: controller.config.tag,
                                realtime: controller.config.realtime,
                            }) ==
                                JSON.stringify({
                                    batched: controllerConfig.batched,
                                    branch: controllerConfig.branch,
                                    globals: controllerConfig.globals,
                                    tag: controllerConfig.tag,
                                    realtime: controllerConfig.realtime,
                                }));
                        })[0];
                        if (!!controller) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('../create/createRecommendationController')); })];
                    case 1:
                        createRecommendationController = (_e.sent()).default;
                        controller = createRecommendationController({
                            url: this.config.url,
                            controller: controllerConfig,
                            context: context,
                            mode: this.config.mode,
                        }, { client: this.client, tracker: this.tracker });
                        _e.label = 2;
                    case 2:
                        this.uses.forEach(function (attachements) { return controller.use(attachements); });
                        this.plugins.forEach(function (plugin) { return controller.plugin.apply(controller, __spreadArray([plugin.func], plugin.args, false)); });
                        this.middleware.forEach(function (middleware) { return controller.on.apply(controller, __spreadArray([middleware.event], middleware.func, false)); });
                        if (!(!controller.store.loaded && !controller.store.loading)) return [3 /*break*/, 4];
                        return [4 /*yield*/, controller.search()];
                    case 3:
                        _e.sent();
                        _e.label = 4;
                    case 4:
                        controller.addTargeter(this.targeter);
                        this.controller[controller.config.id] = controller;
                        window.searchspring.controller = window.searchspring.controller || {};
                        window.searchspring.controller[controller.config.id] = controller;
                        profileVars = controller.store.profile.display.templateParameters;
                        component = (_d = controller.store.profile.display.template) === null || _d === void 0 ? void 0 : _d.component;
                        if (controller.store.error) {
                            //something went wrong
                            //err was already logged - nothing to do.
                            return [2 /*return*/];
                        }
                        if (!controller.store.profile.display.template) {
                            this.logger.error("profile '".concat(tag, "' found on the following element is missing a template!\n").concat(elem === null || elem === void 0 ? void 0 : elem.outerHTML));
                            return [2 /*return*/];
                        }
                        if (!profileVars) {
                            this.logger.error("profile '".concat(tag, "' found on the following element is missing templateParameters!\n").concat(elem === null || elem === void 0 ? void 0 : elem.outerHTML));
                            return [2 /*return*/];
                        }
                        if (!component) {
                            this.logger.error("profile '".concat(tag, "' found on the following element is missing a component!\n").concat(elem === null || elem === void 0 ? void 0 : elem.outerHTML));
                            return [2 /*return*/];
                        }
                        _a = this.config.components[component];
                        if (!_a) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.config.components[component]()];
                    case 5:
                        _a = (_e.sent());
                        _e.label = 6;
                    case 6:
                        RecommendationsComponent = _a;
                        if (!RecommendationsComponent) {
                            this.logger.error("profile '".concat(tag, "' found on the following element is expecting component mapping for '").concat(component, "' - verify instantiator config.\n").concat(elem === null || elem === void 0 ? void 0 : elem.outerHTML));
                            return [2 /*return*/];
                        }
                        setTimeout(function () {
                            if (injectedElem) {
                                (0, preact_1.render)((0, jsx_runtime_1.jsx)(RecommendationsComponent, { controller: controller }), injectedElem);
                            }
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    }
    RecommendationInstantiator.prototype.plugin = function (func) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.plugins.push({ func: func, args: args });
    };
    RecommendationInstantiator.prototype.on = function (event) {
        var func = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            func[_i - 1] = arguments[_i];
        }
        this.middleware.push({ event: event, func: func });
    };
    RecommendationInstantiator.prototype.use = function (attachments) {
        this.uses.push(attachments);
    };
    return RecommendationInstantiator;
}());
exports.RecommendationInstantiator = RecommendationInstantiator;
