import { AbstractController } from '../Abstract/AbstractController';
import { StorageStore } from '@searchspring/snap-store-mobx';
import { ControllerTypes } from '../types';
import type { BeaconEvent } from '@searchspring/snap-tracker';
import type { SearchStore } from '@searchspring/snap-store-mobx';
import type { SearchControllerConfig, ControllerServices, ContextVariables } from '../types';
import type { SearchRequestModel } from '@searchspring/snapi-types';
declare type SearchTrackMethods = {
    product: {
        click: (e: MouseEvent, result: any) => BeaconEvent | undefined;
    };
};
export declare class SearchController extends AbstractController {
    type: ControllerTypes;
    store: SearchStore;
    config: SearchControllerConfig;
    storage: StorageStore;
    private previousResults;
    constructor(config: SearchControllerConfig, { client, store, urlManager, eventManager, profiler, logger, tracker }: ControllerServices, context?: ContextVariables);
    track: SearchTrackMethods;
    get params(): SearchRequestModel;
    search: () => Promise<void>;
}
export declare function getStorableRequestParams(request: SearchRequestModel): SearchRequestModel;
export declare function generateHrefSelector(element: HTMLElement, href: string, levels?: number): string | undefined;
export {};
//# sourceMappingURL=SearchController.d.ts.map