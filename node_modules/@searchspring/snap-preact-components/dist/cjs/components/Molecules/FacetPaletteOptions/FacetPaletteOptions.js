"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacetPaletteOptions = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var mobx_react_lite_1 = require("mobx-react-lite");
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var utilities_1 = require("../../../utilities");
var Icon_1 = require("../../Atoms/Icon");
var providers_1 = require("../../../providers");
var toolbox_1 = require("../../../toolbox");
var CSS = {
    palette: function (_a) {
        var _b;
        var _c;
        var columns = _a.columns, gapSize = _a.gapSize, theme = _a.theme;
        return (0, react_1.css)({
            display: 'flex',
            flexFlow: 'row wrap',
            gridTemplateColumns: "repeat(".concat(columns, ", calc((100% - (").concat(columns - 1, " * ").concat(gapSize, "))/ ").concat(columns, "))"),
            gap: gapSize,
            '& .ss__facet-palette-options__option': (_b = {
                    width: "calc(100% / ".concat(columns, " - ").concat(2 * Math.round((columns + 2) / 2), "px )"),
                    marginRight: gapSize,
                    marginBottom: gapSize
                },
                _b[":nth-of-type(".concat(columns, "n)")] = {
                    marginRight: '0',
                },
                _b['&:hover'] = {
                    cursor: 'pointer',
                    '.ss__facet-palette-options__option__wrapper': {
                        borderColor: '#EBEBEB',
                    },
                    '& .ss__facet-palette-options__option__palette': {
                        '& .ss__facet-palette-options__icon': {
                            opacity: 1,
                        },
                    },
                },
                _b['& .ss__facet-palette-options__option__wrapper'] = {
                    border: "2px solid transparent",
                    borderRadius: '100%',
                    padding: '2px',
                },
                _b['&.ss__facet-palette-options__option--filtered'] = {
                    '& .ss__facet-palette-options__option__wrapper': {
                        borderColor: ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.primary) || '#333',
                        padding: '0px',
                        borderWidth: '4px',
                    },
                },
                _b['& .ss__facet-palette-options__option__palette'] = {
                    paddingTop: 'calc(100% - 2px)',
                    border: '1px solid #EBEBEB',
                    borderRadius: '100%',
                    position: 'relative',
                    '& .ss__facet-palette-options__icon': {
                        position: 'absolute',
                        top: 0,
                        right: 0,
                        left: 0,
                        margin: 'auto',
                        bottom: 0,
                        textAlign: 'center',
                        stroke: 'black',
                        strokeWidth: '3px',
                        strokeLinejoin: 'round',
                        opacity: 0,
                    },
                },
                _b['& .ss__facet-palette-options__option__value'] = {
                    display: 'block',
                    textAlign: 'center',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap',
                },
                _b),
            '@supports (display: grid)': {
                display: 'grid',
                '& .ss__facet-palette-options__option': {
                    margin: '0',
                    width: 'initial',
                },
            },
        });
    },
};
exports.FacetPaletteOptions = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c, _d;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({ 
        // default props
        columns: 4, gapSize: '8px' }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.facetPaletteOptions), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.facetPaletteOptions);
    var values = props.values, hideLabel = props.hideLabel, columns = props.columns, gapSize = props.gapSize, hideIcon = props.hideIcon, onClick = props.onClick, previewOnFocus = props.previewOnFocus, valueProps = props.valueProps, facet = props.facet, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var subProps = {
        icon: __assign(__assign(__assign({ 
            // default props
            className: 'ss__facet-palette-options__icon' }, (_d = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _d === void 0 ? void 0 : _d.icon), (0, utilities_1.defined)({
            disableStyles: disableStyles,
            icon: 'close-thin',
            color: 'white',
            size: '40%',
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
    };
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.palette({ columns: columns, gapSize: gapSize, theme: theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    var facetValues = values || (facet === null || facet === void 0 ? void 0 : facet.values);
    return (facetValues === null || facetValues === void 0 ? void 0 : facetValues.length) ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__facet-palette-options', className) }), facetValues.map(function (value) {
            var _a, _b;
            return ((0, react_1.jsx)("a", __assign({ className: (0, classnames_1.default)('ss__facet-palette-options__option', { 'ss__facet-palette-options__option--filtered': value.filtered }), "aria-label": value.filtered
                    ? "remove selected filter ".concat((facet === null || facet === void 0 ? void 0 : facet.label) || '', " - ").concat(value.label)
                    : (facet === null || facet === void 0 ? void 0 : facet.label)
                        ? "filter by ".concat(facet === null || facet === void 0 ? void 0 : facet.label, " - ").concat(value.label)
                        : "filter by ".concat(value.label), href: (_b = (_a = value.url) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.href }, valueProps, { onClick: function (e) {
                    var _a, _b;
                    (_b = (_a = value.url) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.onClick(e);
                    onClick && onClick(e);
                } }, (previewOnFocus ? (0, toolbox_1.createHoverProps)(function () { return (value === null || value === void 0 ? void 0 : value.preview) && value.preview(); }) : {})),
                (0, react_1.jsx)("div", { className: "ss__facet-palette-options__option__wrapper" },
                    (0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__facet-palette-options__option__palette', "ss__facet-palette-options__option__palette--".concat(snap_toolbox_1.filters.handleize(value.value))), css: { background: value.value } }, !hideIcon && value.filtered && (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon)))),
                !hideLabel && (0, react_1.jsx)("span", { className: "ss__facet-palette-options__option__value" }, value.label)));
        })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
