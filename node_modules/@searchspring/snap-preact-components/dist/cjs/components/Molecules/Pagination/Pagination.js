"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pagination = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var mobx_react_lite_1 = require("mobx-react-lite");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var providers_1 = require("../../../providers");
var utilities_1 = require("../../../utilities");
var Icon_1 = require("../../Atoms/Icon");
var CSS = {
    pagination: function (_a) {
        var _b;
        var theme = _a.theme;
        return (0, react_1.css)({
            '& .ss__pagination__page': {
                padding: '5px',
                display: 'inline-block',
                minHeight: '1em',
                minWidth: '1em',
                textAlign: 'center',
                '&.ss__pagination__page--active': {
                    fontWeight: 'bold',
                },
                '&:hover:not(.ss__pagination__page--active)': {
                    backgroundColor: ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.hover) || '#f8f8f8',
                },
            },
        });
    },
};
exports.Pagination = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c, _d;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({ 
        // default props
        pages: 5 }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.pagination), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.pagination);
    var pagination = props.pagination, pages = props.pages, pagesLeft = props.pagesLeft, pagesRight = props.pagesRight, hideFirst = props.hideFirst, hideLast = props.hideLast, hideEllipsis = props.hideEllipsis, hideNext = props.hideNext, hidePrev = props.hidePrev, nextButton = props.nextButton, prevButton = props.prevButton, firstButton = props.firstButton, lastButton = props.lastButton, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var subProps = {
        icon: __assign(__assign(__assign({ 
            // default props
            className: 'ss__pagination__icon', size: '10px' }, (_d = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _d === void 0 ? void 0 : _d.icon), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props === null || props === void 0 ? void 0 : props.theme }),
    };
    var store = pagination;
    var getPagesParams = Number.isInteger(pagesLeft) && Number.isInteger(pagesRight) ? [pagesLeft, pagesRight] : [pages];
    var _pages = store === null || store === void 0 ? void 0 : store.getPages.apply(store, getPagesParams);
    var pageNumbers = _pages === null || _pages === void 0 ? void 0 : _pages.map(function (page) { return page.number; });
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.pagination({ theme: theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return (store === null || store === void 0 ? void 0 : store.totalResults) ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__pagination', className) }),
            (0, react_1.jsx)("nav", { role: "navigation", "aria-label": "Pagination" },
                store.previous && !hidePrev && ((0, react_1.jsx)("a", __assign({}, store.previous.url.link, { className: (0, classnames_1.default)('ss__pagination__page', 'ss__pagination__page--previous'), "aria-label": 'go to previous page' }), prevButton ? prevButton : (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon, { icon: 'angle-left' })))),
                !pageNumbers.includes(store.first.number) && !hideFirst && ((0, react_1.jsx)(preact_1.Fragment, null,
                    (0, react_1.jsx)("a", __assign({}, store.first.url.link, { className: (0, classnames_1.default)('ss__pagination__page', 'ss__pagination__page--first'), "aria-label": 'go to first page' }), firstButton ? firstButton : store.first.number),
                    !pageNumbers.includes(2) && !hideEllipsis && (0, react_1.jsx)("span", null, "\u2026"))),
                _pages &&
                    _pages.map(function (page) {
                        return page.active ? ((0, react_1.jsx)("span", { className: (0, classnames_1.default)('ss__pagination__page', 'ss__pagination__page--active'), "aria-label": "go to page ".concat(page.number), "aria-current": "true" }, page.number)) : ((0, react_1.jsx)("a", __assign({}, page.url.link, { className: "ss__pagination__page", "aria-label": "go to page ".concat(page.number) }), page.number));
                    }),
                !pageNumbers.includes(store.last.number) && !hideLast && ((0, react_1.jsx)(preact_1.Fragment, null,
                    !pageNumbers.includes(store.totalPages - 1) && !hideEllipsis && (0, react_1.jsx)("span", null, "\u2026"),
                    (0, react_1.jsx)("a", __assign({}, store.last.url.link, { className: (0, classnames_1.default)('ss__pagination__page', 'ss__pagination__page--last'), "aria-label": "go to last page ".concat(store.last.number) }), lastButton ? lastButton : store.last.number))),
                store.next && !hideNext && ((0, react_1.jsx)("a", __assign({}, store.next.url.link, { className: (0, classnames_1.default)('ss__pagination__page', 'ss__pagination__page--next'), "aria-label": 'go to next page' }), nextButton ? nextButton : (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon, { icon: 'angle-right' })))))))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
