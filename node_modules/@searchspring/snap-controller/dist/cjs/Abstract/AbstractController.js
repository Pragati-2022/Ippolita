"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractController = void 0;
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var AbstractController = /** @class */ (function () {
    function AbstractController(config, _a, context) {
        var client = _a.client, store = _a.store, urlManager = _a.urlManager, eventManager = _a.eventManager, profiler = _a.profiler, logger = _a.logger, tracker = _a.tracker;
        if (context === void 0) { context = {}; }
        var _this = this;
        this.type = 'abstract';
        this.targeters = {};
        this._initialized = false;
        this.handleError = function (err, details) {
            var event;
            if (err instanceof ErrorEvent) {
                event = err;
            }
            else if (err instanceof Error) {
                event = new ErrorEvent('error', {
                    error: err,
                    message: err.message,
                });
            }
            else if (typeof err === 'string' || typeof err == 'number') {
                event = new ErrorEvent('error', {
                    error: new Error(err.toString()),
                });
            }
            else if (typeof err === 'object' && Object.keys(err).length) {
                try {
                    event = new ErrorEvent('error', {
                        error: new Error(JSON.stringify(err)),
                    });
                }
                catch (e) { }
            }
            if (event) {
                var filename = event.filename, colno = event.colno, lineno = event.lineno, stack = event.error.stack, message = event.message, timeStamp = event.timeStamp;
                var beaconPayload = {
                    filename: filename,
                    stack: stack,
                    message: message,
                    colno: colno,
                    lineno: lineno,
                    errortimestamp: timeStamp,
                    details: details,
                    context: {
                        controller: {
                            id: _this.id,
                            type: _this.type,
                        },
                    },
                };
                _this.tracker.track.error(beaconPayload);
                _this.eventManager.fire('error', { controller: _this, error: err });
            }
        };
        if (typeof config != 'object' || typeof config.id != 'string' || !config.id.match(/^[a-zA-Z0-9_-]*$/)) {
            throw new Error("Invalid config passed to controller. The \"id\" attribute must be an alphanumeric string.");
        }
        if (typeof client != 'object' || typeof client.search != 'function') {
            throw new Error("Invalid service 'client' passed to controller. Missing \"search\" function.");
        }
        if (typeof store != 'object' || typeof store.update != 'function') {
            throw new Error("Invalid service 'store' passed to controller. Missing \"update\" function.");
        }
        if (typeof urlManager != 'object' || typeof urlManager.subscribe != 'function') {
            throw new Error("Invalid service 'urlManager' passed to controller. Missing \"subscribe\" function.");
        }
        if (typeof eventManager != 'object' || typeof eventManager.on != 'function') {
            throw new Error("Invalid service 'eventManager' passed to controller. Missing \"on\" function.");
        }
        if (typeof eventManager != 'object' || typeof eventManager.fire != 'function') {
            throw new Error("Invalid service 'eventManager' passed to controller. Missing \"fire\" function.");
        }
        if (typeof profiler != 'object' || typeof profiler.setNamespace != 'function') {
            throw new Error("Invalid service 'profiler' passed to controller. Missing \"setNamespace\" function.");
        }
        if (typeof profiler != 'object' || typeof profiler.create != 'function') {
            throw new Error("Invalid service 'profiler' passed to controller. Missing \"create\" function.");
        }
        if (typeof logger != 'object' || typeof logger.dev != 'function') {
            throw new Error("Invalid service 'logger' passed to controller. Missing \"dev\" function.");
        }
        if (typeof tracker != 'object' || typeof tracker.track != 'object') {
            throw new Error("Invalid service 'tracker' passed to controller. Missing \"track\" object.");
        }
        this.id = config.id;
        this.config = config;
        this.client = client;
        this.store = store;
        this.urlManager = urlManager;
        this.eventManager = eventManager;
        this.profiler = profiler;
        this.log = logger;
        this.tracker = tracker;
        this.context = context;
        // configure the logger
        this.log.setNamespace(this.config.id);
        // set namespaces
        this.profiler.setNamespace(this.config.id);
    }
    Object.defineProperty(AbstractController.prototype, "initialized", {
        get: function () {
            return this._initialized;
        },
        enumerable: false,
        configurable: true
    });
    AbstractController.prototype.createTargeter = function (target, onTarget, document) {
        return this.addTargeter(new snap_toolbox_1.DomTargeter([target], onTarget, document));
    };
    AbstractController.prototype.addTargeter = function (target) {
        var _a;
        var firstTarget = target.getTargets()[0];
        var targetName = (_a = firstTarget === null || firstTarget === void 0 ? void 0 : firstTarget.name) !== null && _a !== void 0 ? _a : firstTarget === null || firstTarget === void 0 ? void 0 : firstTarget.selector;
        if (targetName && !this.targeters[targetName]) {
            this.targeters[targetName] = target;
            return target;
        }
    };
    AbstractController.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var initProfile, err_1, err_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._initialized) {
                            this.log.warn("'init' middleware recalled");
                        }
                        initProfile = this.profiler.create({ type: 'event', name: 'init', context: this.config }).start();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.eventManager.fire('init', {
                                controller: this,
                            })];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        if ((err_1 === null || err_1 === void 0 ? void 0 : err_1.message) == 'cancelled') {
                            this.log.warn("'init' middleware cancelled");
                        }
                        else {
                            this.log.error("error in 'init' middleware");
                            throw err_1;
                        }
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        if (err_2) {
                            console.error(err_2);
                            this.handleError(err_2);
                        }
                        return [3 /*break*/, 7];
                    case 7:
                        if (!this._initialized) {
                            // subscribe to urlManager changes
                            this.urlManager.subscribe(function (prev, next) {
                                try {
                                    var prevString = JSON.stringify(prev);
                                    var nextString = JSON.stringify(next);
                                    if (prevString !== nextString) {
                                        _this.search();
                                    }
                                }
                                catch (err) {
                                    _this.log.error('URL state is invalid', err);
                                }
                            });
                            this._initialized = true;
                        }
                        initProfile.stop();
                        this.log.profile(initProfile);
                        return [2 /*return*/];
                }
            });
        });
    };
    AbstractController.prototype.retarget = function () {
        var _this = this;
        Object.keys(this.targeters).forEach(function (target) {
            _this.targeters[target].retarget();
        });
    };
    AbstractController.prototype.plugin = function (func) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, func.apply(void 0, __spreadArray([this], args, false))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AbstractController.prototype.on = function (event) {
        var _a;
        var func = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            func[_i - 1] = arguments[_i];
        }
        (_a = this.eventManager).on.apply(_a, __spreadArray([event], func, false));
    };
    AbstractController.prototype.use = function (attachments) {
        var _this = this;
        // attach plugins
        if (attachments === null || attachments === void 0 ? void 0 : attachments.plugins) {
            try {
                if (!Array.isArray(attachments === null || attachments === void 0 ? void 0 : attachments.plugins)) {
                    throw 'invalid format';
                }
                attachments === null || attachments === void 0 ? void 0 : attachments.plugins.forEach(function (plugin) {
                    if (!Array.isArray(plugin)) {
                        throw 'invalid format';
                    }
                    var func = plugin[0], args = plugin.slice(1);
                    _this.plugin.apply(_this, __spreadArray([func], args, false));
                });
            }
            catch (err) {
                this.log.warn('plugins not attached - use format [func, ...args?][]');
            }
        }
        // attach event middleware
        if (attachments === null || attachments === void 0 ? void 0 : attachments.middleware) {
            Object.keys(attachments.middleware).forEach(function (eventName) {
                var eventMiddleware = attachments.middleware[eventName];
                var middlewareArray;
                if (Array.isArray(eventMiddleware)) {
                    middlewareArray = eventMiddleware;
                }
                else {
                    middlewareArray = [eventMiddleware];
                }
                middlewareArray.forEach(function (middleware) {
                    _this.on(eventName, middleware);
                });
            });
        }
    };
    return AbstractController;
}());
exports.AbstractController = AbstractController;
