/** @jsx jsx */
import { Fragment } from 'preact';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { useTheme, CacheProvider } from '../../../../providers';
import { Layout } from '../../../../types';
const CSS = {
    inlineBanner: ({ width }) => css({
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        width: width,
        '&.ss__inline-banner--grid': {
            flexDirection: 'column',
        },
        '&.ss__inline-banner--list': {
            flexDirection: 'row',
            display: 'block',
            width: '100%',
        },
        '& iframe': {
            maxWidth: '100%',
        },
    }),
};
export function InlineBanner(properties) {
    const globalTheme = useTheme();
    const props = {
        // default props
        layout: Layout.GRID,
        width: 'auto',
        // global theme
        ...globalTheme?.components?.inlineBanner,
        // props
        ...properties,
        ...properties.theme?.components?.inlineBanner,
    };
    const { banner, disableStyles, className, width, layout, onClick, style } = props;
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.inlineBanner({ width }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return banner && banner.value ? (jsx(CacheProvider, null,
        jsx("div", { onClick: (e) => {
                onClick && onClick(e, banner);
            }, className: classnames('ss__inline-banner', `ss__inline-banner--${layout}`, className), ...styling, dangerouslySetInnerHTML: {
                __html: banner.value,
            } }))) : (jsx(Fragment, null));
}
