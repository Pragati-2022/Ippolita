import { observable, computed, makeObservable } from 'mobx';
export class SearchSortingStore {
    constructor(services, sorting, search, meta) {
        this.options = [];
        if (services && meta.sortOptions) {
            const activeSort = sorting?.length && sorting[0];
            const options = (meta.sortOptions || [])
                .filter((option) => {
                if (!search?.query) {
                    return option.type == 'field';
                }
                return option;
            })
                .map((option, index) => {
                option.active = false;
                if (activeSort && activeSort.field == option.field && String(activeSort.direction) == String(option.direction)) {
                    option.active = true;
                }
                else if (!activeSort && index === 0) {
                    option.active = true;
                }
                option.default = false;
                if (index === 0) {
                    // is the default sort
                    option.default = true;
                }
                const optionObj = new Option(services, option, index);
                return optionObj;
            });
            this.options = options;
            makeObservable(this, {
                options: observable,
                current: computed,
            });
        }
    }
    get current() {
        return this.options.filter((option) => option.active).pop();
    }
}
class Option {
    constructor(services, option, index) {
        this.active = option.active;
        this.default = option.default;
        this.field = option.field;
        this.label = option.label;
        this.direction = option.direction;
        this.type = option.type;
        this.value = `${option.label}:${option.field}:${option.direction}:${index}`;
        if (this.default) {
            this.url = services.urlManager.remove('page').remove('sort');
        }
        else {
            this.url = services.urlManager.remove('page').set('sort', [{ field: this.field, direction: this.direction }]);
        }
        makeObservable(this, {
            field: observable,
            label: observable,
            direction: observable,
            type: observable,
            value: observable,
        });
    }
}
