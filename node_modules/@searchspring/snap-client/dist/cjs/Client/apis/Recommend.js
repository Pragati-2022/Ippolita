"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendAPI = void 0;
var Abstract_1 = require("./Abstract");
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.reject = reject;
            _this.resolve = resolve;
        });
    }
    return Deferred;
}());
var BATCH_TIMEOUT = 150;
var RecommendAPI = /** @class */ (function (_super) {
    __extends(RecommendAPI, _super);
    function RecommendAPI(config) {
        var _this = _super.call(this, config) || this;
        _this.batches = {};
        return _this;
    }
    RecommendAPI.prototype.getProfile = function (queryParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: '/api/personalized-recommendations/profile.json',
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, '/api/personalized-recommendations/profile.json' + JSON.stringify(queryParameters))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    RecommendAPI.prototype.batchRecommendations = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var key, batch, deferred;
            var _this = this;
            return __generator(this, function (_a) {
                key = parameters.batched ? parameters.siteId : "".concat(Math.random());
                batch = (this.batches[key] = this.batches[key] || { timeout: null, request: { tags: [], limits: [] }, entries: [] });
                deferred = new Deferred();
                // add each request to the list
                batch.entries.push({ request: parameters, deferred: deferred });
                // wait for all of the requests to come in
                window.clearTimeout(batch.timeout);
                batch.timeout = window.setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                    var response_1, err_1;
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                // delete the batch so a new one can take its place
                                delete this.batches[key];
                                // reorder the requests by order value in context.
                                batch.entries.sort(sortBatchEntries);
                                // now that the requests are in proper order, map through them
                                // and build out the batches
                                batch.entries.map(function (entry) {
                                    var _a = entry.request, tags = _a.tags, categories = _a.categories, otherParams = __rest(_a, ["tags", "categories"]);
                                    var limits = entry.request.limits;
                                    if (!limits) {
                                        limits = 20;
                                    }
                                    var tag = (tags || [])[0];
                                    delete otherParams.batched; // remove from request parameters
                                    delete otherParams.order; // remove from request parameters
                                    delete otherParams.limits;
                                    batch.request.tags.push(tag);
                                    if (categories) {
                                        if (!batch.request.categories) {
                                            batch.request.categories = Array.isArray(categories) ? categories : [categories];
                                        }
                                        else {
                                            batch.request.categories = batch.request.categories.concat(categories);
                                        }
                                    }
                                    batch.request.limits = batch.request.limits.concat(limits);
                                    batch.request = __assign(__assign({}, batch.request), otherParams);
                                });
                                _c.label = 1;
                            case 1:
                                _c.trys.push([1, 6, , 7]);
                                if (this.configuration.mode == snap_toolbox_1.AppMode.development) {
                                    batch.request.test = true;
                                }
                                if (!((0, snap_toolbox_1.charsParams)(batch.request) > 1024)) return [3 /*break*/, 3];
                                if (batch.request['product']) {
                                    batch.request['product'] = batch.request['product'].toString();
                                }
                                return [4 /*yield*/, this.postRecommendations(batch.request)];
                            case 2:
                                response_1 = _c.sent();
                                return [3 /*break*/, 5];
                            case 3: return [4 /*yield*/, this.getRecommendations(batch.request)];
                            case 4:
                                response_1 = _c.sent();
                                _c.label = 5;
                            case 5:
                                (_a = batch.entries) === null || _a === void 0 ? void 0 : _a.forEach(function (entry, index) {
                                    entry.deferred.resolve([response_1[index]]);
                                });
                                return [3 /*break*/, 7];
                            case 6:
                                err_1 = _c.sent();
                                (_b = batch.entries) === null || _b === void 0 ? void 0 : _b.forEach(function (entry) {
                                    entry.deferred.reject(err_1);
                                });
                                return [3 /*break*/, 7];
                            case 7: return [2 /*return*/];
                        }
                    });
                }); }, BATCH_TIMEOUT);
                return [2 /*return*/, deferred.promise];
            });
        });
    };
    RecommendAPI.prototype.getRecommendations = function (queryParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var headerParameters, siteId, path, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headerParameters = {};
                        siteId = queryParameters.siteId;
                        path = "/boost/".concat(siteId, "/recommend");
                        return [4 /*yield*/, this.request({
                                path: path,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, path + JSON.stringify(queryParameters))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    RecommendAPI.prototype.postRecommendations = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var headerParameters, siteId, path, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        siteId = requestParameters.siteId;
                        path = "/boost/".concat(siteId, "/recommend");
                        return [4 /*yield*/, this.request({
                                path: path,
                                method: 'POST',
                                headers: headerParameters,
                                body: requestParameters,
                            }, path + JSON.stringify(requestParameters))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return RecommendAPI;
}(Abstract_1.API));
exports.RecommendAPI = RecommendAPI;
function sortBatchEntries(a, b) {
    // undefined order goes last
    if (a.request.order == undefined && b.request.order == undefined) {
        return 0;
    }
    if (a.request.order == undefined && b.request.order != undefined) {
        return 1;
    }
    if (b.request.order == undefined && a.request.order != undefined) {
        return -1;
    }
    if (a.request.order < b.request.order) {
        return -1;
    }
    if (a.request.order > b.request.order) {
        return 1;
    }
    return 0;
}
