import { makeObservable, observable } from 'mobx';
export class SearchFilterStore extends Array {
    static get [Symbol.species]() {
        return Array;
    }
    constructor(services, filtersData = [], meta) {
        const filters = filtersData.map((filter) => {
            const field = filter.field;
            const facetMeta = meta.facets && meta.facets[field];
            switch (filter.type) {
                case 'range':
                    const rangeFilter = filter;
                    return new RangeFilter(services, rangeFilter, facetMeta);
                case 'value':
                default:
                    const valueFilter = filter;
                    return new Filter(services, valueFilter, facetMeta);
            }
        });
        super(...filters);
    }
}
export class Filter {
    constructor(services, filter, meta) {
        this.facet = {
            field: filter.field,
            label: meta?.label || filter.field,
        };
        this.value = {
            value: filter.value,
            label: filter.label,
        };
        this.label = `${this.facet.label}: ${this.value.label}`;
        this.url = services?.urlManager?.remove('page').remove(`filter.${this.facet.field}`, this.value.value);
        makeObservable(this, {
            facet: observable,
            value: observable,
            label: observable,
        });
    }
}
export class RangeFilter {
    constructor(services, filter, meta) {
        this.facet = {
            field: filter.field,
            label: meta?.label || filter.field,
        };
        this.value = {
            low: filter?.value?.low,
            high: filter?.value?.high,
            label: filter.label || `${filter?.value?.low} - ${filter?.value?.high}`,
        };
        this.label = `${this.facet.label}: ${this.value.label}`;
        this.url = services?.urlManager?.remove('page').remove(`filter.${this.facet.field}`, { low: this.value.low, high: this.value.high });
        makeObservable(this, {
            facet: observable,
            value: observable,
            label: observable,
        });
    }
}
