/** @jsx jsx */
import { Fragment } from 'preact';
import { observer } from 'mobx-react-lite';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { Image } from '../../Atoms/Image';
import { Badge } from '../../Atoms/Badge';
import { Price } from '../../Atoms/Price';
import { useTheme, CacheProvider } from '../../../providers';
import { defined, cloneWithProps } from '../../../utilities';
import { filters } from '@searchspring/snap-toolbox';
import { Layout } from '../../../types';
const CSS = {
    result: () => css({
        '&.ss__result--grid': {
            display: 'flex',
            flexDirection: 'column',
            height: '100%',
            '& .ss__result__image-wrapper': {
                flex: '1 0 auto',
                minHeight: '0%',
            },
        },
        '&.ss__result--list': {
            display: 'flex',
            flexDirection: 'row',
            '& .ss__result__image-wrapper': {
                flex: '0 0 33%',
            },
            '& .ss__result__details': {
                flex: '1 1 auto',
                textAlign: 'left',
                marginLeft: '20px',
                padding: 0,
            },
        },
        '& .ss__result__image-wrapper': {
            position: 'relative',
            '& .ss__result__badge': {
                background: 'rgba(255, 255, 255, 0.5)',
                padding: '10px',
            },
        },
        '& .ss__result__details': {
            padding: '10px',
            textAlign: 'center',
            '& .ss__result__details__title': {
                marginBottom: '10px',
            },
            '& .ss__result__details__pricing': {
                marginBottom: '10px',
                '& .ss__result__price': {
                    fontSize: '1.2em',
                },
                '& .ss__price--strike': {
                    fontSize: '80%',
                },
            },
            '& .ss__result__details__button': {
                marginBottom: '10px',
            },
        },
    }),
};
export const Result = observer((properties) => {
    const globalTheme = useTheme();
    const props = {
        // default props
        layout: Layout.GRID,
        // global theme
        ...globalTheme?.components?.result,
        // props
        ...properties,
        ...properties.theme?.components?.result,
    };
    const { result, hideBadge, hideTitle, hidePricing, hideImage, detailSlot, fallback, disableStyles, className, layout, onClick, style, controller } = props;
    const core = result?.mappings?.core;
    const subProps = {
        price: {
            // global theme
            className: 'ss__result__price',
            ...globalTheme?.components?.price,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props.theme,
        },
        badge: {
            // default props
            className: 'ss__result__badge',
            content: 'Sale',
            // global theme
            ...globalTheme?.components?.badge,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props.theme,
        },
        image: {
            // default props
            className: 'ss__result__image',
            alt: core?.name,
            src: core?.imageUrl,
            // global theme
            ...globalTheme?.components?.image,
            // inherited props
            ...defined({
                disableStyles,
                fallback: fallback,
            }),
            // component theme overrides
            theme: props?.theme,
        },
    };
    const onSale = Boolean(core?.msrp && core.price && core?.msrp * 1 > core?.price * 1);
    let displayName = core?.name;
    if (props.truncateTitle) {
        displayName = filters.truncate(core?.name || '', props.truncateTitle.limit, props.truncateTitle.append);
    }
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.result(), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return core ? (jsx(CacheProvider, null,
        jsx("article", { ...styling, className: classnames('ss__result', `ss__result--${layout}`, className) },
            jsx("div", { className: "ss__result__image-wrapper" },
                jsx("a", { href: core.url, onClick: (e) => {
                        onClick && onClick(e);
                        controller?.track?.product?.click(e, result);
                    } },
                    !hideBadge && onSale && jsx(Badge, { ...subProps.badge }),
                    !hideImage && jsx(Image, { ...subProps.image }))),
            jsx("div", { className: "ss__result__details" },
                !hideTitle && (jsx("div", { className: "ss__result__details__title" },
                    jsx("a", { href: core.url, onClick: (e) => {
                            onClick && onClick(e);
                            controller?.track?.product?.click(e, result);
                        }, dangerouslySetInnerHTML: {
                            __html: displayName || '',
                        } }))),
                !hidePricing && (jsx("div", { className: "ss__result__details__pricing" }, core.msrp && core.price && core.price < core.msrp ? (jsx(Fragment, null,
                    jsx(Price, { ...subProps.price, value: core.msrp, lineThrough: true }),
                    "\u00A0",
                    jsx(Price, { ...subProps.price, value: core.price }))) : (jsx(Price, { ...subProps.price, value: core.price })))),
                cloneWithProps(detailSlot, { result }))))) : (jsx(Fragment, null));
});
