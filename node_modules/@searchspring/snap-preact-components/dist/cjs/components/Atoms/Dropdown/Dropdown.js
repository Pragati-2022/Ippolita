"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dropdown = void 0;
var hooks_1 = require("preact/hooks");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var mobx_react_lite_1 = require("mobx-react-lite");
var providers_1 = require("../../../providers");
var hooks_2 = require("../../../hooks");
var utilities_1 = require("../../../utilities");
var useA11y_1 = require("../../../hooks/useA11y");
var CSS = {
    dropdown: function (_a) {
        var disableOverlay = _a.disableOverlay;
        return (0, react_1.css)({
            position: 'relative',
            '&.ss__dropdown--open': {
                '& .ss__dropdown__content': {
                    position: disableOverlay ? 'relative' : undefined,
                    visibility: 'visible',
                    opacity: 1,
                },
            },
            '.ss__dropdown__button': {
                cursor: "".concat(disableOverlay ? 'default' : 'pointer'),
            },
            '.ss__dropdown__content': {
                position: 'absolute',
                minWidth: '100%',
                visibility: 'hidden',
                opacity: 0,
                top: 'auto',
                left: 0,
            },
        });
    },
};
exports.Dropdown = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a;
    var _b, _c, _d;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({ 
        // default props
        startOpen: false, disableA11y: false }, (_b = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _b === void 0 ? void 0 : _b.dropdown), properties), (_d = (_c = properties.theme) === null || _c === void 0 ? void 0 : _c.components) === null || _d === void 0 ? void 0 : _d.dropdown);
    var button = props.button, content = props.content, children = props.children, disabled = props.disabled, open = props.open, disableOverlay = props.disableOverlay, onClick = props.onClick, onToggle = props.onToggle, startOpen = props.startOpen, disableClickOutside = props.disableClickOutside, disableA11y = props.disableA11y, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var showContent, setShowContent;
    var stateful = open === undefined;
    if (stateful) {
        _a = (0, hooks_1.useState)(startOpen), showContent = _a[0], setShowContent = _a[1];
    }
    else {
        showContent = open;
    }
    var innerRef;
    if (!disableClickOutside) {
        innerRef = (0, hooks_2.useClickOutside)(function (e) {
            if (showContent) {
                if (!disabled) {
                    stateful && setShowContent && setShowContent(false);
                    onToggle && onToggle(e, false);
                }
            }
        });
    }
    var toggleShowContent = function (e) {
        if (stateful) {
            setShowContent &&
                setShowContent(function (prev) {
                    onToggle && onToggle(e, !prev);
                    return !prev;
                });
        }
    };
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.dropdown({ disableOverlay: disableOverlay }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__dropdown', { 'ss__dropdown--open': showContent }, className), ref: innerRef }),
            (0, react_1.jsx)("div", { className: "ss__dropdown__button", ref: function (e) { return (!disableA11y ? (0, useA11y_1.useA11y)(e) : null); }, "aria-expanded": showContent, role: "button", onClick: function (e) {
                    if (!disabled) {
                        toggleShowContent(e);
                        onClick && onClick(e);
                    }
                } }, (0, utilities_1.cloneWithProps)(button, { open: showContent, toggleOpen: toggleShowContent })),
            (0, react_1.jsx)("div", { className: "ss__dropdown__content" },
                (0, utilities_1.cloneWithProps)(content, { open: showContent, toggleOpen: toggleShowContent }),
                (0, utilities_1.cloneWithProps)(children, { open: showContent, toggleOpen: toggleShowContent })))));
});
