"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchSortingStore = void 0;
var mobx_1 = require("mobx");
var SearchSortingStore = /** @class */ (function () {
    function SearchSortingStore(services, sorting, search, meta) {
        this.options = [];
        if (services && meta.sortOptions) {
            var activeSort_1 = (sorting === null || sorting === void 0 ? void 0 : sorting.length) && sorting[0];
            var options = (meta.sortOptions || [])
                .filter(function (option) {
                if (!(search === null || search === void 0 ? void 0 : search.query)) {
                    return option.type == 'field';
                }
                return option;
            })
                .map(function (option, index) {
                option.active = false;
                if (activeSort_1 && activeSort_1.field == option.field && String(activeSort_1.direction) == String(option.direction)) {
                    option.active = true;
                }
                else if (!activeSort_1 && index === 0) {
                    option.active = true;
                }
                option.default = false;
                if (index === 0) {
                    // is the default sort
                    option.default = true;
                }
                var optionObj = new Option(services, option, index);
                return optionObj;
            });
            this.options = options;
            (0, mobx_1.makeObservable)(this, {
                options: mobx_1.observable,
                current: mobx_1.computed,
            });
        }
    }
    Object.defineProperty(SearchSortingStore.prototype, "current", {
        get: function () {
            return this.options.filter(function (option) { return option.active; }).pop();
        },
        enumerable: false,
        configurable: true
    });
    return SearchSortingStore;
}());
exports.SearchSortingStore = SearchSortingStore;
var Option = /** @class */ (function () {
    function Option(services, option, index) {
        this.active = option.active;
        this.default = option.default;
        this.field = option.field;
        this.label = option.label;
        this.direction = option.direction;
        this.type = option.type;
        this.value = "".concat(option.label, ":").concat(option.field, ":").concat(option.direction, ":").concat(index);
        if (this.default) {
            this.url = services.urlManager.remove('page').remove('sort');
        }
        else {
            this.url = services.urlManager.remove('page').set('sort', [{ field: this.field, direction: this.direction }]);
        }
        (0, mobx_1.makeObservable)(this, {
            field: mobx_1.observable,
            label: mobx_1.observable,
            direction: mobx_1.observable,
            type: mobx_1.observable,
            value: mobx_1.observable,
        });
    }
    return Option;
}());
