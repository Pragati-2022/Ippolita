import { useState } from 'preact/hooks';
import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import { useTheme, CacheProvider } from '../../../providers';
import { useClickOutside } from '../../../hooks';
import { cloneWithProps } from '../../../utilities';
import { useA11y } from '../../../hooks/useA11y';
const CSS = {
    dropdown: ({ disableOverlay }) => css({
        position: 'relative',
        '&.ss__dropdown--open': {
            '& .ss__dropdown__content': {
                position: disableOverlay ? 'relative' : undefined,
                visibility: 'visible',
                opacity: 1,
            },
        },
        '.ss__dropdown__button': {
            cursor: `${disableOverlay ? 'default' : 'pointer'}`,
        },
        '.ss__dropdown__content': {
            position: 'absolute',
            minWidth: '100%',
            visibility: 'hidden',
            opacity: 0,
            top: 'auto',
            left: 0,
        },
    }),
};
export const Dropdown = observer((properties) => {
    const globalTheme = useTheme();
    const props = {
        // default props
        startOpen: false,
        disableA11y: false,
        // global theme
        ...globalTheme?.components?.dropdown,
        // props
        ...properties,
        ...properties.theme?.components?.dropdown,
    };
    const { button, content, children, disabled, open, disableOverlay, onClick, onToggle, startOpen, disableClickOutside, disableA11y, disableStyles, className, style, } = props;
    let showContent, setShowContent;
    const stateful = open === undefined;
    if (stateful) {
        [showContent, setShowContent] = useState(startOpen);
    }
    else {
        showContent = open;
    }
    let innerRef;
    if (!disableClickOutside) {
        innerRef = useClickOutside((e) => {
            if (showContent) {
                if (!disabled) {
                    stateful && setShowContent && setShowContent(false);
                    onToggle && onToggle(e, false);
                }
            }
        });
    }
    const toggleShowContent = (e) => {
        if (stateful) {
            setShowContent &&
                setShowContent((prev) => {
                    onToggle && onToggle(e, !prev);
                    return !prev;
                });
        }
    };
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.dropdown({ disableOverlay }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return (jsx(CacheProvider, null,
        jsx("div", { ...styling, className: classnames('ss__dropdown', { 'ss__dropdown--open': showContent }, className), ref: innerRef },
            jsx("div", { className: "ss__dropdown__button", ref: (e) => (!disableA11y ? useA11y(e) : null), "aria-expanded": showContent, role: "button", onClick: (e) => {
                    if (!disabled) {
                        toggleShowContent(e);
                        onClick && onClick(e);
                    }
                } }, cloneWithProps(button, { open: showContent, toggleOpen: toggleShowContent })),
            jsx("div", { className: "ss__dropdown__content" },
                cloneWithProps(content, { open: showContent, toggleOpen: toggleShowContent }),
                cloneWithProps(children, { open: showContent, toggleOpen: toggleShowContent })))));
});
