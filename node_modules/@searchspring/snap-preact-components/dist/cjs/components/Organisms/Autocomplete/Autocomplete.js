"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autocomplete = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var hooks_1 = require("preact/hooks");
var mobx_react_lite_1 = require("mobx-react-lite");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var deepmerge_1 = __importDefault(require("deepmerge"));
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var Icon_1 = require("../../Atoms/Icon/Icon");
var Results_1 = require("../../Organisms/Results");
var Banner_1 = require("../../Atoms/Merchandising/Banner");
var Facets_1 = require("../../Organisms/Facets");
var utilities_1 = require("../../../utilities");
var toolbox_1 = require("../../../toolbox");
var providers_1 = require("../../../providers");
var types_1 = require("../../../types");
var useDisplaySettings_1 = require("../../../hooks/useDisplaySettings");
var CSS = {
    Autocomplete: function (_a) {
        var _b, _c;
        var inputViewportOffsetBottom = _a.inputViewportOffsetBottom, hideFacets = _a.hideFacets, horizontalTerms = _a.horizontalTerms, noResults = _a.noResults, contentSlotExists = _a.contentSlotExists, viewportMaxHeight = _a.viewportMaxHeight, vertical = _a.vertical, width = _a.width, theme = _a.theme;
        return (0, react_1.css)({
            '&, & *, & *:before, & *:after': {
                boxSizing: 'border-box',
            },
            display: 'flex',
            flexDirection: vertical ? 'column' : 'row',
            flexWrap: horizontalTerms && !vertical ? 'wrap' : undefined,
            position: 'absolute',
            zIndex: '10002',
            border: '1px solid #ebebeb',
            background: '#ffffff',
            width: width,
            maxWidth: '100vw',
            maxHeight: viewportMaxHeight && inputViewportOffsetBottom ? "calc(100vh - ".concat(inputViewportOffsetBottom + 10, "px)") : undefined,
            overflowY: viewportMaxHeight && horizontalTerms && !vertical ? 'scroll' : undefined,
            '&.ss__autocomplete--only-terms': {
                width: "".concat(vertical || horizontalTerms || contentSlotExists ? width : '150px'),
            },
            '.ss__autocomplete__title--trending, .ss__autocomplete__title--history, .ss__autocomplete__title--terms': {
                fontWeight: 'normal',
                margin: 0,
                color: '#c5c5c5',
                textTransform: 'uppercase',
                padding: '10px',
                '& h5': {
                    fontSize: '.8em',
                    margin: 0,
                },
            },
            '.ss__autocomplete__title--facets': {
                order: vertical ? 2 : undefined,
            },
            '& .ss__autocomplete__terms': {
                display: 'flex',
                flexDirection: 'column',
                flex: "1 1 auto",
                maxWidth: "".concat(vertical || horizontalTerms ? 'auto' : '150px'),
                minWidth: '150px',
                order: 1,
                background: '#f8f8f8',
                '& .ss__autocomplete__terms__options': {
                    display: vertical || horizontalTerms ? 'flex' : undefined,
                    justifyContent: 'space-evenly',
                    flexWrap: 'wrap',
                    '& .ss__autocomplete__terms__option': {
                        flexGrow: vertical || horizontalTerms ? '1' : undefined,
                        textAlign: vertical || horizontalTerms ? 'center' : undefined,
                        wordBreak: 'break-all',
                        '& a': {
                            display: 'block',
                            padding: vertical || horizontalTerms ? '10px 30px' : '10px',
                            '& em': {
                                fontStyle: 'normal',
                            },
                        },
                        '&.ss__autocomplete__terms__option--active': {
                            background: '#fff',
                            '& a': {
                                fontWeight: 'bold',
                                color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary,
                            },
                        },
                    },
                },
            },
            '& .ss__autocomplete__facets': {
                display: 'flex',
                flex: "0 0 150px",
                flexDirection: vertical ? 'row' : 'column',
                columnGap: '20px',
                order: 2,
                padding: vertical ? '10px 20px' : '10px',
                overflowY: vertical ? undefined : 'auto',
                '& .ss__autocomplete__facet': {
                    flex: vertical ? '0 1 150px' : undefined,
                },
                '.ss__facet-hierarchy-options__option.ss__facet-hierarchy-options__option--filtered~.ss__facet-hierarchy-options__option:not(.ss__facet-hierarchy-options__option--filtered)': {
                    paddingLeft: 0,
                },
                '.ss__facet-hierarchy-options__option.ss__facet-hierarchy-options__option--filtered:hover': {
                    cursor: 'pointer',
                },
                '.ss__facet-palette-options__icon': {
                    display: 'none',
                },
            },
            '& .ss__autocomplete__content': {
                display: 'flex',
                flex: "1 1 ".concat(hideFacets ? 'auto' : '0%'),
                flexDirection: 'column',
                justifyContent: 'space-between',
                order: 3,
                overflowY: 'auto',
                margin: noResults ? '0 auto' : undefined,
                padding: vertical ? '10px 20px' : '10px',
                '& .ss__banner.ss__banner--header, .ss__banner.ss__banner--banner': {
                    marginBottom: '10px',
                },
                '& .ss__banner.ss__banner--footer': {
                    margin: '10px 0',
                },
                '& .ss__autocomplete__content__results': {
                    minHeight: '0%',
                },
                '& .ss__autocomplete__content__info': {
                    padding: '10px',
                    textAlign: noResults ? 'center' : 'right',
                    '& a': {
                        fontWeight: 'bold',
                        color: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.primary,
                        '& .ss__icon': {
                            marginLeft: '5px',
                        },
                    },
                },
            },
        });
    },
};
exports.Autocomplete = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({ 
        // default props
        termsTitle: '', trendingTitle: 'Popular Searches', historyTitle: 'Previously Searched', facetsTitle: '', contentTitle: '', width: '100%' }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.autocomplete), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.autocomplete);
    //passed in or default breakpoints result props
    var breakpoints = props.breakpoints || {
        0: {
            columns: 2,
            rows: 1,
            hideFacets: (_d = props.hideFacets) !== null && _d !== void 0 ? _d : true,
            vertical: (_e = props.vertical) !== null && _e !== void 0 ? _e : true,
            hideHistory: (_f = props.hideHistory) !== null && _f !== void 0 ? _f : true,
            hideTrending: (_g = props.hideTrending) !== null && _g !== void 0 ? _g : true,
        },
        540: {
            columns: 3,
            rows: 1,
            vertical: (_h = props.vertical) !== null && _h !== void 0 ? _h : true,
            hideHistory: (_j = props.hideHistory) !== null && _j !== void 0 ? _j : true,
            hideTrending: (_k = props.hideTrending) !== null && _k !== void 0 ? _k : true,
        },
        768: {
            columns: 2,
            rows: 3,
        },
    };
    var valueProps = (0, toolbox_1.createHoverProps)();
    var facetClickEvent = function (e) {
        properties.onFacetOptionClick && properties.onFacetOptionClick(e);
        // remove focus from input (close the autocomplete)
        (controller === null || controller === void 0 ? void 0 : controller.setFocused) && (controller === null || controller === void 0 ? void 0 : controller.setFocused());
    };
    var termClickEvent = function (e) {
        properties.onTermClick && properties.onTermClick(e);
        // remove focus from input (close the autocomplete)
        (controller === null || controller === void 0 ? void 0 : controller.setFocused) && (controller === null || controller === void 0 ? void 0 : controller.setFocused());
    };
    var themeDefaults = {
        components: {
            facet: {
                limit: 6,
                disableOverflow: true,
                disableCollapse: true,
                previewOnFocus: true,
                valueProps: valueProps,
            },
            facetGridOptions: {
                columns: 3,
                onClick: facetClickEvent,
            },
            facetHierarchyOptions: {
                hideCount: true,
                onClick: facetClickEvent,
            },
            facetListOptions: {
                hideCheckbox: true,
                hideCount: true,
                onClick: facetClickEvent,
            },
            facetPaletteOptions: {
                hideLabel: true,
                columns: 3,
                onClick: facetClickEvent,
            },
            result: {
                hideBadge: true,
            },
        },
    };
    var displaySettings = (0, useDisplaySettings_1.useDisplaySettings)(breakpoints) || {};
    // merge deeply the themeDefaults with the theme props and the displaySettings theme props (do not merge arrays, but replace them)
    var theme = (0, deepmerge_1.default)(themeDefaults, (0, deepmerge_1.default)((props === null || props === void 0 ? void 0 : props.theme) || {}, (displaySettings === null || displaySettings === void 0 ? void 0 : displaySettings.theme) || {}, { arrayMerge: function (destinationArray, sourceArray) { return sourceArray; } }), { arrayMerge: function (destinationArray, sourceArray) { return sourceArray; } });
    props = __assign(__assign(__assign({}, props), displaySettings), { theme: theme });
    var input = props.input;
    var inputViewportOffsetBottom = 0;
    if (input) {
        if (typeof input === 'string') {
            input = document.querySelector(input);
        }
        var rect = input === null || input === void 0 ? void 0 : input.getBoundingClientRect();
        inputViewportOffsetBottom = (rect === null || rect === void 0 ? void 0 : rect.bottom) || 0;
    }
    var hideTerms = props.hideTerms, hideFacets = props.hideFacets, hideContent = props.hideContent, hideBanners = props.hideBanners, hideLink = props.hideLink, hideHistory = props.hideHistory, hideTrending = props.hideTrending, retainTrending = props.retainTrending, retainHistory = props.retainHistory, horizontalTerms = props.horizontalTerms, vertical = props.vertical, termsTitle = props.termsTitle, trendingTitle = props.trendingTitle, historyTitle = props.historyTitle, facetsTitle = props.facetsTitle, contentTitle = props.contentTitle, viewportMaxHeight = props.viewportMaxHeight, termsSlot = props.termsSlot, facetsSlot = props.facetsSlot, contentSlot = props.contentSlot, resultsSlot = props.resultsSlot, noResultsSlot = props.noResultsSlot, linkSlot = props.linkSlot, onTermClick = props.onTermClick, disableStyles = props.disableStyles, className = props.className, width = props.width, style = props.style, controller = props.controller;
    var subProps = {
        facets: __assign(__assign(__assign({ 
            // default props
            limit: 3 }, (_l = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _l === void 0 ? void 0 : _l.facets), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { theme: props.theme }),
        banner: __assign(__assign(__assign({ 
            // default props
            className: 'ss__autocomplete__banner' }, (_m = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _m === void 0 ? void 0 : _m.banner), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props.theme }),
        results: __assign(__assign(__assign({ 
            // default props
            className: 'ss__autocomplete__results', breakpoints: breakpoints }, (_o = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _o === void 0 ? void 0 : _o.results), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props.theme }),
        icon: __assign(__assign(__assign({ 
            // default props
            className: 'ss__autocomplete__icon', icon: 'angle-right', size: '10px' }, (_p = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _p === void 0 ? void 0 : _p.icon), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props.theme }),
    };
    var _v = controller.store, search = _v.search, terms = _v.terms, trending = _v.trending, results = _v.results, merchandising = _v.merchandising, pagination = _v.pagination, loaded = _v.loaded, filters = _v.filters, facets = _v.facets, state = _v.state, loading = _v.loading;
    var history = controller.store.history || [];
    // you can pass in a selector or the actual input element,
    // if its the selector, we need to bind it to the controller here.
    if (controller && typeof input == 'string') {
        input = document.querySelector(input);
        // only bind on componentdidmount
        (0, hooks_1.useEffect)(function () {
            controller.bind();
        }, []);
    }
    var visible = Boolean(input === state.focusedInput) &&
        (terms.length > 0 || (trending === null || trending === void 0 ? void 0 : trending.length) > 0 || (history === null || history === void 0 ? void 0 : history.length) > 0 || (state.input && controller.store.loaded));
    var trendingActive = trending === null || trending === void 0 ? void 0 : trending.filter(function (term) { return term.active; }).pop();
    var historyActive = history === null || history === void 0 ? void 0 : history.filter(function (term) { return term.active; }).pop();
    var showTrending = false;
    if ((trending === null || trending === void 0 ? void 0 : trending.length) && ((retainTrending && controller.store.loaded) || (!results.length && !state.input))) {
        showTrending = true;
    }
    var showHistory = false;
    if ((history === null || history === void 0 ? void 0 : history.length) && ((retainHistory && controller.store.loaded) || (!results.length && !state.input))) {
        showHistory = true;
    }
    if (!state.input && (historyActive || trendingActive)) {
        if (history === null || history === void 0 ? void 0 : history.length)
            showHistory = true;
        if (trending === null || trending === void 0 ? void 0 : trending.length)
            showTrending = true;
    }
    var facetsToShow = facets.length ? facets.filter(function (facet) { return facet.display !== types_1.FacetDisplay.SLIDER; }) : [];
    var onlyTerms = ((trending === null || trending === void 0 ? void 0 : trending.length) || history.length) && !loaded && !loading;
    // results logic
    var showResults = Boolean(results.length > 0 || Object.keys(merchandising.content).length > 0 || ((_q = search === null || search === void 0 ? void 0 : search.query) === null || _q === void 0 ? void 0 : _q.string));
    if ((hideTrending && trendingActive) || (hideHistory && historyActive)) {
        showResults = false;
    }
    var styling = {};
    if (!disableStyles) {
        styling.css = [
            CSS.Autocomplete({
                inputViewportOffsetBottom: inputViewportOffsetBottom,
                hideFacets: hideFacets,
                horizontalTerms: horizontalTerms,
                noResults: Boolean(((_r = search === null || search === void 0 ? void 0 : search.query) === null || _r === void 0 ? void 0 : _r.string) && results.length === 0),
                contentSlotExists: Boolean(contentSlot),
                viewportMaxHeight: viewportMaxHeight,
                vertical: vertical,
                width: width,
                theme: theme,
            }),
            style,
        ];
    }
    else if (style) {
        styling.css = [style];
    }
    return visible ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__autocomplete', className, { 'ss__autocomplete--only-terms': onlyTerms }), onClick: function (e) { return e.stopPropagation(); } }),
            !hideTerms && (showTrending || terms.length > 0 || termsSlot || (!hideHistory && history.length > 0)) && ((0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__autocomplete__terms', { 'ss__autocomplete__terms-trending': showTrending }) }, termsSlot ? ((0, utilities_1.cloneWithProps)(termsSlot, {
                terms: terms,
                trending: trending,
                termsTitle: termsTitle,
                trendingTitle: trendingTitle,
                showTrending: showTrending,
                history: history,
                historyTitle: historyTitle,
                valueProps: valueProps,
                emIfy: emIfy,
                onTermClick: onTermClick,
                controller: controller,
            })) : ((0, react_1.jsx)(preact_1.Fragment, null,
                terms.length > 0 ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__terms__suggestions" },
                    termsTitle ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__title ss__autocomplete__title--terms ss__autocomplete__title--suggestions" },
                        (0, react_1.jsx)("h5", null, termsTitle))) : null,
                    (0, react_1.jsx)("div", { className: "ss__autocomplete__terms__options", role: 'list', "aria-label": termsTitle }, terms.map(function (term, idx) { return ((0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__autocomplete__terms__option', {
                            'ss__autocomplete__terms__option--active': term.active,
                        }) },
                        (0, react_1.jsx)("a", __assign({ onClick: function (e) { return termClickEvent(e); }, href: term.url.href }, (0, toolbox_1.createHoverProps)(term.preview), { role: "link", "aria-label": "item ".concat(idx + 1, " of ").concat(terms.length, ", ").concat(term.value) }), emIfy(term.value, state.input || '')))); })))) : null,
                showTrending && !hideTrending ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__terms__trending" },
                    trendingTitle ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__title ss__autocomplete__title--trending" },
                        (0, react_1.jsx)("h5", null, trendingTitle))) : null,
                    (0, react_1.jsx)("div", { className: "ss__autocomplete__terms__options", role: 'list', "aria-label": trendingTitle }, trending.map(function (term, idx) { return ((0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__autocomplete__terms__option', {
                            'ss__autocomplete__terms__option--active': term.active,
                        }) },
                        (0, react_1.jsx)("a", __assign({ onClick: function (e) { return termClickEvent(e); }, href: term.url.href }, (0, toolbox_1.createHoverProps)(term.preview), { role: "link", "aria-label": "item ".concat(idx + 1, " of ").concat(trending.length, ", ").concat(term.value) }), emIfy(term.value, state.input || '')))); })))) : null,
                showHistory && !hideHistory ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__terms__history" },
                    historyTitle ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__title ss__autocomplete__title--history" },
                        (0, react_1.jsx)("h5", null, historyTitle))) : null,
                    (0, react_1.jsx)("div", { className: "ss__autocomplete__terms__options", role: 'list', "aria-label": historyTitle }, history.map(function (term, idx) { return ((0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__autocomplete__terms__option', {
                            'ss__autocomplete__terms__option--active': term.active,
                        }) },
                        (0, react_1.jsx)("a", __assign({ onClick: function (e) { return termClickEvent(e); }, href: term.url.href }, (0, toolbox_1.createHoverProps)(term.preview), { role: "link", "aria-label": "item ".concat(idx + 1, " of ").concat(history.length, ", ").concat(term.value) }), emIfy(term.value, state.input || '')))); })))) : null)))),
            !hideFacets &&
                (facetsSlot ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__facets" }, (0, utilities_1.cloneWithProps)(facetsSlot, { facets: facetsToShow, merchandising: merchandising, facetsTitle: facetsTitle, hideBanners: hideBanners, controller: controller, valueProps: valueProps }))) : (facetsToShow.length > 0 && ((0, react_1.jsx)(preact_1.Fragment, null,
                    facetsTitle && vertical ? ((0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__autocomplete__title', 'ss__autocomplete__title--facets') },
                        (0, react_1.jsx)("h5", null, facetsTitle))) : null,
                    (0, react_1.jsx)("div", { className: "ss__autocomplete__facets" },
                        facetsTitle && !vertical ? ((0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__autocomplete__title', 'ss__autocomplete__title--facets') },
                            (0, react_1.jsx)("h5", null, facetsTitle))) : null,
                        (0, react_1.jsx)(Facets_1.Facets, __assign({}, subProps.facets, { facets: facetsToShow })),
                        !hideBanners ? (0, react_1.jsx)(Banner_1.Banner, __assign({}, subProps.banner, { content: merchandising.content, type: snap_store_mobx_1.ContentType.LEFT })) : null))))),
            !hideContent ? (contentSlot ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__content" }, (0, utilities_1.cloneWithProps)(contentSlot, { results: results, merchandising: merchandising, search: search, pagination: pagination, filters: filters, controller: controller }))) : showResults ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__content" },
                (0, react_1.jsx)(preact_1.Fragment, null,
                    !hideBanners ? (0, react_1.jsx)(Banner_1.Banner, __assign({}, subProps.banner, { content: merchandising.content, type: snap_store_mobx_1.ContentType.HEADER })) : null,
                    !hideBanners ? (0, react_1.jsx)(Banner_1.Banner, __assign({}, subProps.banner, { content: merchandising.content, type: snap_store_mobx_1.ContentType.BANNER })) : null,
                    results.length > 0 ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__content__results" }, resultsSlot ? ((0, utilities_1.cloneWithProps)(resultsSlot, { results: results, contentTitle: contentTitle, controller: controller })) : ((0, react_1.jsx)(preact_1.Fragment, null,
                        contentTitle && results.length > 0 ? ((0, react_1.jsx)("div", { className: (0, classnames_1.default)('ss__autocomplete__title', 'ss__autocomplete__title--content') },
                            (0, react_1.jsx)("h5", null, contentTitle))) : null,
                        (0, react_1.jsx)(Results_1.Results, __assign({ results: results }, subProps.results, { controller: controller })))))) : ((0, react_1.jsx)("div", { className: "ss__autocomplete__content__no-results" }, noResultsSlot ? ((0, utilities_1.cloneWithProps)(noResultsSlot, { search: search, pagination: pagination, controller: controller })) : ((0, react_1.jsx)(preact_1.Fragment, null,
                        (0, react_1.jsx)("p", null,
                            "No results found for \"",
                            ((_s = search.originalQuery) === null || _s === void 0 ? void 0 : _s.string) || ((_t = search.query) === null || _t === void 0 ? void 0 : _t.string),
                            "\"."),
                        (0, react_1.jsx)("p", null, "Please try another search."))))),
                    !hideBanners ? (0, react_1.jsx)(Banner_1.Banner, __assign({}, subProps.banner, { content: merchandising.content, type: snap_store_mobx_1.ContentType.FOOTER })) : null,
                    !hideLink ? (linkSlot ? ((0, utilities_1.cloneWithProps)(linkSlot, { search: search, results: results, pagination: pagination, filters: filters, controller: controller })) : ((_u = search === null || search === void 0 ? void 0 : search.query) === null || _u === void 0 ? void 0 : _u.string) && results.length > 0 ? ((0, react_1.jsx)("div", { className: "ss__autocomplete__content__info" },
                        (0, react_1.jsx)("a", { href: state.url.href, onClick: function () { return (controller === null || controller === void 0 ? void 0 : controller.setFocused) && controller.setFocused(); } },
                            "See ",
                            pagination.totalResults,
                            " ",
                            filters.length > 0 ? 'filtered' : '',
                            " result",
                            pagination.totalResults == 1 ? '' : 's',
                            " for \"",
                            search.query.string,
                            "\"",
                            (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon))))) : null) : null))) : null) : null))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
var emIfy = function (term, search) {
    if (term && search) {
        var match = term.match(escapeRegExp(search));
        if (search && term && match && typeof match.index == 'number') {
            var beforeMatch = term.slice(0, match.index);
            var afterMatch = term.slice(match.index + search.length, term.length);
            return ((0, react_1.jsx)(preact_1.Fragment, null,
                beforeMatch ? (0, react_1.jsx)("em", null, beforeMatch) : '',
                search,
                afterMatch ? (0, react_1.jsx)("em", null, afterMatch) : ''));
        }
    }
    return ((0, react_1.jsx)(preact_1.Fragment, null,
        (0, react_1.jsx)("em", null, term)));
};
var escapeRegExp = function (string) {
    return string === null || string === void 0 ? void 0 : string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
};
