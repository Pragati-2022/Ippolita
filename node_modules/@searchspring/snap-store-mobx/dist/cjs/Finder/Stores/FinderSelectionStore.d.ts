import type { FinderStoreConfig, FinderFieldConfig, StoreServices, SelectedSelection, FinderStoreState } from '../../types';
import type { StorageStore } from '../../Storage/StorageStore';
import type { MetaResponseModel, MetaResponseModelFacetGrid, MetaResponseModelFacetHierarchy, MetaResponseModelFacetList, MetaResponseModelFacetPalette, MetaResponseModelFacetSlider, SearchResponseModelFacet, SearchResponseModelFacetRange, SearchResponseModelFacetRangeBuckets, SearchResponseModelFacetValue, SearchResponseModelFacetValueAllOfValues } from '@searchspring/snapi-types';
export declare type FinderSelectionStoreData = {
    state: FinderStoreState;
    facets: SearchResponseModelFacet[];
    meta: MetaResponseModel;
    loading: boolean;
    storage: StorageStore;
    selections: SelectedSelection[];
};
declare type FacetWithMeta = MetaResponseModelFacetGrid & MetaResponseModelFacetHierarchy & MetaResponseModelFacetList & MetaResponseModelFacetPalette & MetaResponseModelFacetSlider & SearchResponseModelFacetValue & SearchResponseModelFacetRange & SearchResponseModelFacetRangeBuckets;
export declare class FinderSelectionStore extends Array<Selection | SelectionHierarchy> {
    static get [Symbol.species](): ArrayConstructor;
    constructor(config: FinderStoreConfig, services: StoreServices, { state, facets, meta, loading, storage, selections }: FinderSelectionStoreData);
}
declare class SelectionBase {
    state: FinderStoreState;
    type: string;
    field: string;
    filtered: boolean;
    collapsed: boolean;
    display: string;
    label: string;
    multiple: string;
    id: string;
    disabled: boolean;
    selected: string;
    custom: {};
    facet: FacetWithMeta;
    services: StoreServices;
    loading: boolean;
    config: FinderFieldConfig | LevelConfig;
    data?: SearchResponseModelFacetValueAllOfValues[];
    storage: {
        key: string;
        get: (key?: string | undefined) => any;
        set: (key: string, value: unknown) => void;
    };
    constructor(services: StoreServices, id: string, state: FinderStoreState, facet: FacetWithMeta, selectionConfig: FinderFieldConfig | LevelConfig, loading: boolean, storageStore: StorageStore);
    get values(): SearchResponseModelFacetValueAllOfValues[];
}
declare class Selection extends SelectionBase {
    config: FinderFieldConfig;
    constructor(services: StoreServices, id: string, state: FinderStoreState, facet: FacetWithMeta, config: FinderFieldConfig, loading: boolean, storageStore: StorageStore);
    select(value?: string): void;
}
declare class SelectionHierarchy extends SelectionBase {
    hierarchyDelimiter: string;
    config: LevelConfig;
    constructor(services: StoreServices, id: string, state: FinderStoreState, facet: FacetWithMeta, config: LevelConfig, loading: boolean, storageStore: StorageStore);
    select(value?: string): void;
}
declare type LevelConfig = {
    index: number;
    label?: string;
    key: string;
};
export {};
//# sourceMappingURL=FinderSelectionStore.d.ts.map