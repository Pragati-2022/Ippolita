import { SearchController, AutocompleteController, RecommendationController } from '@searchspring/snap-controller';
import { Client } from '@searchspring/snap-client';
import { SearchStore, AutocompleteStore, RecommendationStore } from '@searchspring/snap-store-mobx';
import { UrlManager, UrlTranslator, reactLinker } from '@searchspring/snap-url-manager';
import { EventManager } from '@searchspring/snap-event-manager';
import { Profiler } from '@searchspring/snap-profiler';
import { Logger } from '@searchspring/snap-logger';
import { Tracker } from '@searchspring/snap-tracker';
const controllers = {};
const client = {
    globals: { siteId: '8uyt2m' },
};
export class Snapify {
    static recommendation(config) {
        const id = config.id;
        if (controllers[id]) {
            return controllers[id];
        }
        const cntrlr = (controllers[id] = createRecommendationController({ client, controller: config }));
        cntrlr.on('afterStore', async ({ controller }, next) => {
            controller.log.debug('controller', controller);
            controller.log.debug('store', controller.store.toJSON());
            await next();
        });
        cntrlr.init();
        return cntrlr;
    }
    static autocomplete(config) {
        const id = config.id;
        if (controllers[id]) {
            return controllers[id];
        }
        const cntrlr = (controllers[id] = createAutocompleteController({ client, controller: config }));
        cntrlr.on('afterStore', async ({ controller }, next) => {
            controller.log.debug('controller', controller);
            controller.log.debug('store', controller.store.toJSON());
            await next();
        });
        cntrlr.init();
        return cntrlr;
    }
    static search(config) {
        const id = config.id;
        if (controllers[id]) {
            return controllers[id];
        }
        const cntrlr = (controllers[id] = createSearchController({ client, controller: config }));
        cntrlr.on('afterStore', async ({ controller }, next) => {
            controller.log.debug('controller', controller);
            controller.log.debug('store', controller.store.toJSON());
            await next();
        });
        cntrlr.init();
        return cntrlr;
    }
}
function createSearchController(config) {
    const urlManager = new UrlManager(new UrlTranslator(), reactLinker);
    const cntrlr = new SearchController(config.controller, {
        client: new Client(config.client.globals, config.client.config),
        store: new SearchStore(config.controller, { urlManager }),
        urlManager,
        eventManager: new EventManager(),
        profiler: new Profiler(),
        logger: new Logger(),
        tracker: new Tracker(config.client.globals),
    });
    return cntrlr;
}
function createRecommendationController(config) {
    const urlManager = new UrlManager(new UrlTranslator(), reactLinker).detach(true);
    const cntrlr = new RecommendationController(config.controller, {
        client: new Client(config.client.globals, config.client.config),
        store: new RecommendationStore(config.controller, { urlManager }),
        urlManager,
        eventManager: new EventManager(),
        profiler: new Profiler(),
        logger: new Logger(),
        tracker: new Tracker(config.client.globals),
    });
    return cntrlr;
}
function createAutocompleteController(config) {
    const urlManager = new UrlManager(new UrlTranslator(), reactLinker).detach();
    const cntrlr = new AutocompleteController(config.controller, {
        client: new Client(config.client.globals, config.client.config),
        store: new AutocompleteStore(config.controller, { urlManager }),
        urlManager,
        eventManager: new EventManager(),
        profiler: new Profiler(),
        logger: new Logger(),
        tracker: new Tracker(config.client.globals),
    });
    return cntrlr;
}
