"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacetHierarchyOptions = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var mobx_react_lite_1 = require("mobx-react-lite");
var providers_1 = require("../../../providers");
var toolbox_1 = require("../../../toolbox");
var CSS = {
    hierarchy: function (_a) {
        var _b, _c, _d;
        var theme = _a.theme;
        return (0, react_1.css)({
            '& .ss__facet-hierarchy-options__option': {
                display: 'flex',
                padding: '6px 0',
                textDecoration: 'none',
                alignItems: 'center',
                '&:hover': {
                    cursor: 'pointer',
                    background: (_b = theme.colors) === null || _b === void 0 ? void 0 : _b.hover,
                },
                '&.ss__facet-hierarchy-options__option--filtered': {
                    fontWeight: 'bold',
                    color: (_c = theme.colors) === null || _c === void 0 ? void 0 : _c.primary,
                    '&:hover': {
                        cursor: 'default',
                        background: 'unset',
                    },
                    '& ~ .ss__facet-hierarchy-options__option:not(.ss__facet-hierarchy-options__option--filtered)': {
                        paddingLeft: '16px',
                    },
                },
                '&.ss__facet-hierarchy-options__option--return': {
                    '&:before': {
                        content: "'\\0000ab'",
                        padding: '0 2px 0 0',
                        color: (_d = theme.colors) === null || _d === void 0 ? void 0 : _d.primary,
                    },
                },
                '& .ss__facet-hierarchy-options__option__value': {
                    marginLeft: '8px',
                    '& .ss__facet-hierarchy-options__option__value__count': {
                        fontSize: '0.8em',
                        marginLeft: '6px',
                    },
                },
            },
        });
    },
};
exports.FacetHierarchyOptions = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({}, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.facetHierarchyOptions), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.facetHierarchyOptions);
    var values = props.values, hideCount = props.hideCount, onClick = props.onClick, disableStyles = props.disableStyles, previewOnFocus = props.previewOnFocus, valueProps = props.valueProps, facet = props.facet, className = props.className, style = props.style;
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.hierarchy({ theme: theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    var facetValues = values || (facet === null || facet === void 0 ? void 0 : facet.values);
    return (facetValues === null || facetValues === void 0 ? void 0 : facetValues.length) ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__facet-hierarchy-options', className) }), facetValues.map(function (value) {
            var _a, _b;
            return ((0, react_1.jsx)("a", __assign({ className: (0, classnames_1.default)('ss__facet-hierarchy-options__option', { 'ss__facet-hierarchy-options__option--filtered': value.filtered }, { 'ss__facet-hierarchy-options__option--return': value.history && !value.filtered }), "aria-label": value.filtered
                    ? "remove selected filter ".concat((facet === null || facet === void 0 ? void 0 : facet.label) || '', " - ").concat(value.label)
                    : (facet === null || facet === void 0 ? void 0 : facet.label)
                        ? "filter by ".concat(facet === null || facet === void 0 ? void 0 : facet.label, " - ").concat(value.label)
                        : "filter by ".concat(value.label), href: (_b = (_a = value.url) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.href }, valueProps, { onClick: function (e) {
                    var _a, _b;
                    (_b = (_a = value.url) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.onClick(e);
                    onClick && onClick(e);
                } }, (previewOnFocus ? (0, toolbox_1.createHoverProps)(function () { return (value === null || value === void 0 ? void 0 : value.preview) && value.preview(); }) : {})),
                (0, react_1.jsx)("span", { className: "ss__facet-hierarchy-options__option__value" },
                    value.label,
                    !hideCount && (value === null || value === void 0 ? void 0 : value.count) > 0 && !value.filtered && ((0, react_1.jsx)("span", { className: "ss__facet-hierarchy-options__option__value__count" },
                        "(",
                        value.count,
                        ")")))));
        })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
