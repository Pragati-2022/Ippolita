import { observable, action, computed, makeObservable } from 'mobx';
export class SearchPaginationStore {
    constructor(config, services, paginationData = {
        page: undefined,
        pageSize: undefined,
        totalResults: undefined,
        totalPages: undefined,
    }, meta) {
        const paginationSettings = config?.settings?.pagination;
        this.services = services;
        this.controllerConfig = config;
        this.page = paginationData.page;
        this.pageSize = paginationData.pageSize;
        this.totalResults = paginationData.totalResults;
        this.defaultPageSize = meta?.pagination?.defaultPageSize;
        this.totalPages = paginationData.totalPages;
        const pageSizeOptions = paginationSettings?.pageSizeOptions || [
            {
                label: `Show ${this.defaultPageSize}`,
                value: this.defaultPageSize,
            },
            {
                label: `Show ${this.defaultPageSize * 2}`,
                value: this.defaultPageSize * 2,
            },
            {
                label: `Show ${this.defaultPageSize * 3}`,
                value: this.defaultPageSize * 3,
            },
        ];
        this.pageSizeOptions = pageSizeOptions.map((pageOption) => new PageSizeOption(this.services, this.pageSize, {
            label: pageOption.label,
            value: pageOption.value,
        }));
        makeObservable(this, {
            page: observable,
            pageSize: observable,
            totalResults: observable,
            totalPages: observable,
            begin: computed,
            end: computed,
            multiplePages: computed,
            current: computed,
            first: computed,
            last: computed,
            next: computed,
            previous: computed,
            getPages: action,
            setPageSize: action,
        });
    }
    get begin() {
        if (this.controllerConfig.settings?.infinite) {
            return 1;
        }
        return this.pageSize * (this.page - 1) + 1;
    }
    get end() {
        if (this.pageSize * this.page > this.totalResults) {
            return this.totalResults;
        }
        return this.pageSize * this.page;
    }
    get multiplePages() {
        return this.pageSize < this.totalResults;
    }
    get current() {
        return new Page(this.services, {
            number: this.page,
            active: true,
        });
    }
    get first() {
        return new Page(this.services, {
            number: 1,
            active: this.page == 1,
        });
    }
    get last() {
        return new Page(this.services, {
            number: this.totalPages,
            active: this.totalPages == this.page,
        });
    }
    get next() {
        if (this.page < this.totalPages) {
            return new Page(this.services, {
                number: this.page + 1,
            });
        }
    }
    get previous() {
        if (this.page > 1) {
            return new Page(this.services, {
                number: this.page - 1,
            });
        }
    }
    getPages(min = 5, max) {
        if (!Number.isInteger(min)) {
            return [];
        }
        if (typeof max == 'undefined' || !Number.isInteger(max)) {
            const surrounding = min - 1;
            let from = this.page;
            let to = this.page;
            let last = to - from;
            do {
                last = to - from;
                if (to < this.totalPages) {
                    to++;
                }
                if (to - from >= surrounding) {
                    break;
                }
                if (from > 1) {
                    from--;
                }
            } while (last != to - from && to - from < surrounding);
            min = from - this.page;
            max = to - this.page;
        }
        else {
            min = -Math.abs(min);
            max = Math.abs(max);
        }
        const pages = [];
        for (let i = this.page + min; i <= this.page + max; i++) {
            if (i > 0 && i <= this.totalPages) {
                pages.push(new Page(this.services, {
                    number: i,
                    active: i == this.page,
                }));
            }
        }
        return pages;
    }
    setPageSize(num) {
        if (num) {
            this.services.urlManager.remove('page').set('pageSize', num).go();
        }
    }
}
export class PageSizeOption {
    constructor(services, currentPageSize, option) {
        this.services = services;
        this.value = option.value;
        this.label = option.label;
        this.url = this.services?.urlManager.remove('page').set('pageSize', option.value);
        this.active = Boolean(currentPageSize == option.value);
    }
}
export class Page {
    constructor(services, page) {
        this.services = services;
        this.number = page.number;
        this.active = page.active || false;
        this.url = this.services?.urlManager?.set('page', this.number);
        this.key = this.url.href;
    }
}
