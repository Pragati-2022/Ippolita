"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Banner = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var providers_1 = require("../../../../providers");
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var CSS = {
    banner: function () {
        return (0, react_1.css)({
            '& iframe, img': {
                maxWidth: '100%',
                height: 'auto',
            },
        });
    },
};
function Banner(properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var props = __assign(__assign(__assign({}, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.banner), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.banner);
    var content = props.content, type = props.type, disableStyles = props.disableStyles, className = props.className, style = props.style;
    if (type === snap_store_mobx_1.ContentType.INLINE) {
        console.warn("BannerType '".concat(snap_store_mobx_1.ContentType.INLINE, "' is not supported in <Banner /> component"));
        return (0, react_1.jsx)(preact_1.Fragment, null);
    }
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.banner(), style];
    }
    else if (style) {
        styling.css = [style];
    }
    var bannerContent;
    if (content && content[type]) {
        bannerContent = content[type];
    }
    return bannerContent && bannerContent.length ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({ className: (0, classnames_1.default)('ss__banner', "ss__banner--".concat(type), className) }, styling, { dangerouslySetInnerHTML: {
                __html: bannerContent.join(''),
            } })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
}
exports.Banner = Banner;
