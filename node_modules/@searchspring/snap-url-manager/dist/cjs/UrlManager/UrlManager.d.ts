import { Translator, TranslatorConfig, UrlState } from '../types';
import type { ImmutableObject } from 'seamless-immutable';
declare type omission = {
    path: Array<string>;
    values?: Array<any>;
};
declare class WatcherPool {
    private callbacks;
    constructor();
    subscribe(cb: () => void): () => (() => void)[];
    notify(): void;
}
export declare class UrlManager {
    linker?: ((urlManager: UrlManager) => Record<string, unknown>) | undefined;
    private omissions;
    detached?: {
        url: string;
    } | undefined;
    private translator;
    private urlState;
    private globalState;
    private localState;
    private mergedState;
    private prevState?;
    private watcherPool;
    constructor(translator: Translator, linker?: ((urlManager: UrlManager) => Record<string, unknown>) | undefined, globalState?: UrlState | ImmutableObject<UrlState>, localState?: UrlState | ImmutableObject<UrlState>, watcherPool?: WatcherPool, omissions?: Array<omission>, detached?: {
        url: string;
    } | undefined);
    private without;
    private getTranslatorUrl;
    refresh(): void;
    get state(): ImmutableObject<UrlState>;
    private unpackPathAndState;
    set(...args: Array<unknown>): UrlManager;
    merge(...args: Array<unknown>): UrlManager;
    remove(_path: Array<string> | string, values?: Array<any> | any): UrlManager;
    reset(): UrlManager;
    withConfig(config: Record<string, unknown> | ((config: Record<string, unknown>) => Record<string, unknown>)): UrlManager;
    withGlobals(globals: UrlState): UrlManager;
    getTranslatorConfig(): TranslatorConfig;
    get href(): string;
    go(config?: {
        [any: string]: unknown;
    }): void;
    detach(reset?: boolean): UrlManager;
    get link(): Record<string, any>;
    subscribe(cb: (prev?: ImmutableObject<UrlState>, next?: ImmutableObject<UrlState>) => void): () => void;
}
export {};
//# sourceMappingURL=UrlManager.d.ts.map