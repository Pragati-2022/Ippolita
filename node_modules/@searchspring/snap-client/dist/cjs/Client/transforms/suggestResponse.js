"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformSuggestResponse = void 0;
function transformSuggestResponse(response) {
    return __assign(__assign(__assign(__assign({}, transformSuggestResponse.query(response)), transformSuggestResponse.correctedQuery(response)), transformSuggestResponse.suggested(response)), transformSuggestResponse.alternatives(response));
}
exports.transformSuggestResponse = transformSuggestResponse;
transformSuggestResponse.query = function (response) {
    if (!(response === null || response === void 0 ? void 0 : response.query)) {
        return {};
    }
    return { query: response.query };
};
transformSuggestResponse.correctedQuery = function (response) {
    if (typeof response != 'object' || !response['corrected-query']) {
        return {};
    }
    return { correctedQuery: response['corrected-query'] };
};
transformSuggestResponse.suggested = function (response) {
    var _a, _b, _c;
    if (typeof response != 'object' || !response.suggested || typeof response.suggested != 'object') {
        return {};
    }
    return {
        suggested: {
            text: (_a = response.suggested) === null || _a === void 0 ? void 0 : _a.text,
            type: (_b = response.suggested) === null || _b === void 0 ? void 0 : _b.type,
            source: (_c = response.suggested) === null || _c === void 0 ? void 0 : _c.source,
        },
    };
};
transformSuggestResponse.alternatives = function (response) {
    var alternatives = (response === null || response === void 0 ? void 0 : response.alternatives) || [];
    return {
        alternatives: alternatives.map(function (alternative) {
            return {
                text: alternative.text,
            };
        }),
    };
};
