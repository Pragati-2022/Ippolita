import { jsx, css } from '@emotion/react';
import classnames from 'classnames';
import { observer } from 'mobx-react-lite';
import { Icon } from '../../Atoms/Icon/Icon';
import { defined } from '../../../utilities';
import { useTheme, CacheProvider } from '../../../providers';
const CSS = {
    searchInput: ({ theme }) => css({
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        border: `1px solid ${theme?.colors?.primary || '#ccc'}`,
        '& .ss__icon': {
            padding: '5px',
        },
        '& .ss__search-input__input': {
            width: '100%',
            outline: 'none',
            border: '0',
            boxSizing: 'border-box',
        },
    }),
};
export const SearchInput = observer((properties) => {
    const globalTheme = useTheme();
    const theme = { ...globalTheme, ...properties.theme };
    const props = {
        // default props
        placeholder: 'Search',
        hideIcon: false,
        // global theme
        ...globalTheme?.components?.searchInput,
        //props
        ...properties,
        ...properties.theme?.components?.searchInput,
    };
    const { placeholder, onChange, hideIcon, disableStyles, style, className } = props;
    const subProps = {
        icon: {
            // default props
            className: 'ss__search-input__icon',
            // global theme
            ...globalTheme?.components?.icon,
            // inherited props
            ...defined({
                disableStyles,
            }),
            // component theme overrides
            theme: props?.theme,
        },
    };
    const styling = {};
    if (!disableStyles) {
        styling.css = [CSS.searchInput({ theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return (jsx(CacheProvider, null,
        jsx("div", { ...styling, className: classnames('ss__search-input', className) },
            !hideIcon && jsx(Icon, { ...subProps.icon, icon: "search" }),
            jsx("input", { type: "text", className: "ss__search-input__input", onChange: (e) => {
                    onChange && onChange(e);
                }, placeholder: placeholder }))));
});
