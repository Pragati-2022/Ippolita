"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageType = exports.StorageStore = void 0;
var snap_toolbox_1 = require("@searchspring/snap-toolbox");
var utils = {
    cookies: snap_toolbox_1.cookies,
};
var StorageStore = /** @class */ (function () {
    function StorageStore(config) {
        var _a, _b;
        this.type = null;
        this.expiration = 31536000000; // one year (ms)
        this.sameSite = 'Lax';
        this.key = 'ss-storage';
        this.state = {};
        if (config) {
            if (config.key.trim() !== '') {
                this.key = config.key.trim();
            }
            if ((_a = config === null || config === void 0 ? void 0 : config.cookie) === null || _a === void 0 ? void 0 : _a.expiration) {
                this.expiration = config.cookie.expiration;
            }
            if ((_b = config === null || config === void 0 ? void 0 : config.cookie) === null || _b === void 0 ? void 0 : _b.sameSite) {
                this.sameSite = config.cookie.sameSite;
            }
            switch (config.type) {
                case StorageType.SESSION: {
                    this.type = snap_toolbox_1.featureFlags.storage ? config.type : null;
                    if (this.type) {
                        this.state = JSON.parse(window.sessionStorage.getItem(this.key) || '{}');
                        window.sessionStorage.setItem(this.key, JSON.stringify(this.state));
                    }
                    break;
                }
                case StorageType.LOCAL: {
                    this.type = snap_toolbox_1.featureFlags.storage ? config.type : null;
                    if (this.type && !window.localStorage.getItem(this.key)) {
                        this.state = JSON.parse(window.localStorage.getItem(this.key) || '{}');
                        window.localStorage.setItem(this.key, JSON.stringify(this.state));
                    }
                    break;
                }
                case StorageType.COOKIE: {
                    if (snap_toolbox_1.featureFlags.cookies) {
                        this.type = config.type;
                        var data = utils.cookies.get(this.key);
                        if (data) {
                            this.state = JSON.parse(data);
                        }
                    }
                    break;
                }
                default: {
                    this.type = StorageType.MEMORY;
                }
            }
        }
    }
    StorageStore.prototype.set = function (path, value) {
        var paths = path === null || path === void 0 ? void 0 : path.split('.');
        var location = this.state;
        paths === null || paths === void 0 ? void 0 : paths.forEach(function (p, i) {
            var leaf = i == paths.length - 1;
            if (leaf) {
                location[p] = value;
            }
            else {
                location = location[p] = location[p] || {};
            }
        });
        switch (this.type) {
            case StorageType.SESSION:
                window.sessionStorage.setItem(this.key, JSON.stringify(this.state));
                break;
            case StorageType.LOCAL:
                window.localStorage.setItem(this.key, JSON.stringify(this.state));
                break;
            case StorageType.COOKIE:
                utils.cookies.set(this.key, JSON.stringify(this.state), this.sameSite, this.expiration);
                break;
        }
    };
    StorageStore.prototype.get = function (path) {
        switch (this.type) {
            case StorageType.SESSION:
                var sessionData = window.sessionStorage.getItem(this.key);
                this.state = sessionData ? JSON.parse(sessionData) : {};
                break;
            case StorageType.LOCAL:
                var localData = window.localStorage.getItem(this.key);
                this.state = localData ? JSON.parse(localData) : {};
                break;
            case StorageType.COOKIE:
                var data = utils.cookies.get(this.key);
                if (data) {
                    this.state = JSON.parse(data) || {};
                }
                break;
        }
        var paths = path === null || path === void 0 ? void 0 : path.split('.');
        if (!(paths === null || paths === void 0 ? void 0 : paths.length))
            return undefined;
        var value = this.state;
        for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
            var p = paths_1[_i];
            if (value && typeof value[p] != 'undefined') {
                value = value[p];
            }
            else {
                value = {};
                return;
            }
        }
        return value;
    };
    StorageStore.prototype.clear = function () {
        switch (this.type) {
            case StorageType.SESSION:
                window.sessionStorage.removeItem(this.key);
                break;
            case StorageType.LOCAL:
                window.localStorage.removeItem(this.key);
                break;
            case StorageType.COOKIE:
                utils.cookies.unset(this.key);
                break;
        }
        this.state = {};
    };
    return StorageStore;
}());
exports.StorageStore = StorageStore;
var StorageType;
(function (StorageType) {
    StorageType["SESSION"] = "session";
    StorageType["LOCAL"] = "local";
    StorageType["COOKIE"] = "cookie";
    StorageType["MEMORY"] = "memory";
})(StorageType = exports.StorageType || (exports.StorageType = {}));
