import { makeObservable, observable } from 'mobx';
export class SearchResultStore extends Array {
    static get [Symbol.species]() {
        return Array;
    }
    constructor(config, services, resultData, paginationData, merchData) {
        let results = (resultData || []).map((result) => {
            return new Product(services, result);
        });
        if (merchData?.content?.inline) {
            const banners = merchData.content.inline
                .sort(function (a, b) {
                return a.config.position.index - b.config.position.index;
            })
                .map((banner) => {
                return new Banner(services, banner);
            });
            if (banners && paginationData?.totalResults) {
                results = addBannersToResults(config, results, banners, paginationData);
            }
        }
        super(...results);
    }
}
export class Banner {
    constructor(services, banner) {
        this.type = 'banner';
        this.attributes = {};
        this.mappings = {
            core: {},
        };
        this.custom = {};
        this.id = 'ss-ib-' + banner.config.position.index;
        this.config = banner.config;
        this.value = banner.value;
        makeObservable(this, {
            id: observable,
            mappings: observable,
            attributes: observable,
        });
    }
}
export class Product {
    constructor(services, result) {
        this.type = 'product';
        this.attributes = {};
        this.mappings = {
            core: {},
        };
        this.custom = {};
        this.children = [];
        this.id = result.id;
        this.attributes = result.attributes;
        this.mappings = result.mappings;
        if (result?.children?.length) {
            this.children = result.children.map((variant, index) => {
                return new Child(services, {
                    id: `${result.id}-${index}`,
                    ...variant,
                });
            });
        }
        makeObservable(this, {
            id: observable,
            attributes: observable,
            custom: observable,
        });
        // must set all subo
        const coreObservables = Object.keys(this.mappings.core).reduce((map, key) => {
            return {
                ...map,
                [key]: observable,
            };
        }, {});
        makeObservable(this.mappings.core, coreObservables);
    }
}
class Child {
    constructor(services, result) {
        this.type = 'child';
        this.attributes = {};
        this.custom = {};
        this.id = result.id;
        this.attributes = result.attributes;
        makeObservable(this, {
            id: observable,
            attributes: observable,
            custom: observable,
        });
    }
}
function addBannersToResults(config, results, banners, paginationData) {
    const productCount = results.length;
    let minIndex = paginationData.pageSize * (paginationData.page - 1);
    const maxIndex = minIndex + paginationData.pageSize;
    if (config?.settings?.infinite) {
        minIndex = 0;
    }
    banners
        .reduce((adding, banner) => {
        const resultCount = productCount + adding.length;
        if (banner.config.position.index >= minIndex && (banner.config.position.index < maxIndex || resultCount < paginationData.pageSize)) {
            adding.push(banner);
        }
        return adding;
    }, [])
        .forEach((banner) => {
        const adjustedIndex = banner.config.position.index - minIndex;
        results.splice(adjustedIndex, 0, banner);
    });
    return results;
}
