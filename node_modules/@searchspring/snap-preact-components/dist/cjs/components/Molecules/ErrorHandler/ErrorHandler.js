"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorHandler = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var mobx_react_lite_1 = require("mobx-react-lite");
var Icon_1 = require("../../Atoms/Icon/Icon");
var Button_1 = require("../../Atoms/Button/Button");
var utilities_1 = require("../../../utilities");
var providers_1 = require("../../../providers");
var snap_store_mobx_1 = require("@searchspring/snap-store-mobx");
var CSS = {
    errorHandler: function (_a) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        var theme = _a.theme;
        return (0, react_1.css)({
            borderRadius: '2px',
            display: 'flex',
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'space-between',
            borderLeft: '4px solid',
            '.ss__error-handler__message': {
                padding: '10px',
                display: 'flex',
                alignItems: 'center',
                '.ss__icon': {
                    marginRight: '5px',
                },
            },
            '& .ss__error-handler__button': {
                backgroundColor: 'white',
                color: 'inherit',
                borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary,
                width: ['150px', 'fit-content'],
                margin: '5px 10px',
                '.ss__icon': {
                    marginRight: '5px',
                },
            },
            '&.ss__error-handler--error': {
                backgroundColor: (0, utilities_1.LightenDarkenColor)(((_d = (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.error) || 'red', 180),
                borderLeftColor: ((_f = (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.message) === null || _f === void 0 ? void 0 : _f.error) || '#ff0000',
                '.ss__error-handler__message': {
                    '.ss__icon': {
                        fill: ((_h = (_g = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _g === void 0 ? void 0 : _g.message) === null || _h === void 0 ? void 0 : _h.error) || '#ff0000',
                    },
                },
            },
            '&.ss__error-handler--warning': {
                backgroundColor: (0, utilities_1.LightenDarkenColor)(((_k = (_j = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _j === void 0 ? void 0 : _j.message) === null || _k === void 0 ? void 0 : _k.warning) || 'yellow', 180),
                borderLeftColor: ((_m = (_l = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _l === void 0 ? void 0 : _l.message) === null || _m === void 0 ? void 0 : _m.warning) || '#ffff00',
                '.ss__icon': {
                    fill: ((_p = (_o = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _o === void 0 ? void 0 : _o.message) === null || _p === void 0 ? void 0 : _p.warning) || '#ffff00',
                },
                '.ss__error-handler__button': {
                    borderColor: ((_r = (_q = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _q === void 0 ? void 0 : _q.message) === null || _r === void 0 ? void 0 : _r.warning) || '#ffff00',
                },
            },
            '&.ss__error-handler--info': {
                backgroundColor: (0, utilities_1.LightenDarkenColor)(((_t = (_s = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _s === void 0 ? void 0 : _s.message) === null || _t === void 0 ? void 0 : _t.info) || 'blue', 180),
                borderLeftColor: ((_v = (_u = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _u === void 0 ? void 0 : _u.message) === null || _v === void 0 ? void 0 : _v.info) || '#0000ff',
                '.ss__error-handler__message': {
                    '.ss__icon': {
                        fill: ((_x = (_w = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _w === void 0 ? void 0 : _w.message) === null || _x === void 0 ? void 0 : _x.info) || '#0000ff',
                    },
                },
            },
        });
    },
};
exports.ErrorHandler = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c, _d, _e, _f;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({}, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.errorHandler), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.errorHandler);
    var controller = props.controller, error = props.error, disableStyles = props.disableStyles, style = props.style, onRetryClick = props.onRetryClick, className = props.className;
    var subProps = {
        icon: __assign(__assign(__assign({ 
            // default props
            className: 'ss__error-handler__icon' }, (_d = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _d === void 0 ? void 0 : _d.icon), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props.theme }),
        button: __assign(__assign(__assign({ 
            // default props
            className: 'ss__error-handler__button' }, (_e = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _e === void 0 ? void 0 : _e.button), (0, utilities_1.defined)({
            disableStyles: disableStyles,
        })), { 
            // component theme overrides
            theme: props.theme }),
    };
    var errorObject = ((_f = controller === null || controller === void 0 ? void 0 : controller.store) === null || _f === void 0 ? void 0 : _f.error) || error;
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.errorHandler({ theme: theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    return Object.values(snap_store_mobx_1.ErrorType).includes(errorObject === null || errorObject === void 0 ? void 0 : errorObject.type) && (errorObject === null || errorObject === void 0 ? void 0 : errorObject.message) ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({ className: (0, classnames_1.default)('ss__error-handler', "ss__error-handler--".concat(errorObject.type), className) }, styling), (function () {
            switch (errorObject.type) {
                case snap_store_mobx_1.ErrorType.WARNING:
                    return ((0, react_1.jsx)(preact_1.Fragment, null,
                        (0, react_1.jsx)("div", { className: "ss__error-handler__message" },
                            (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon, { icon: 'warn' })),
                            (0, react_1.jsx)("b", null, "Warning:\u00A0"),
                            errorObject.message),
                        (errorObject === null || errorObject === void 0 ? void 0 : errorObject.code) == 429 ? ((0, react_1.jsx)(Button_1.Button, __assign({}, subProps.button, { onClick: function (e) {
                                onRetryClick ? onRetryClick(e) : controller === null || controller === void 0 ? void 0 : controller.search();
                            } }),
                            (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon, { icon: 'rotate-right' })),
                            "Reload")) : null));
                case snap_store_mobx_1.ErrorType.ERROR:
                    return ((0, react_1.jsx)("div", { className: "ss__error-handler__message" },
                        (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon, { icon: 'error' })),
                        (0, react_1.jsx)("b", null, "Error:\u00A0"),
                        errorObject.message));
                case snap_store_mobx_1.ErrorType.INFO:
                    return ((0, react_1.jsx)("div", { className: "ss__error-handler__message" },
                        (0, react_1.jsx)(Icon_1.Icon, __assign({}, subProps.icon, { icon: 'info' })),
                        (0, react_1.jsx)("b", null, "Info:\u00A0"),
                        errorObject.message));
            }
        })()))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
