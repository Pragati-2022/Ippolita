"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacetGridOptions = void 0;
/** @jsx jsx */
var preact_1 = require("preact");
var react_1 = require("@emotion/react");
var classnames_1 = __importDefault(require("classnames"));
var mobx_react_lite_1 = require("mobx-react-lite");
var providers_1 = require("../../../providers");
var toolbox_1 = require("../../../toolbox");
var CSS = {
    grid: function (_a) {
        var _b;
        var _c, _d, _e, _f, _g;
        var columns = _a.columns, gapSize = _a.gapSize, theme = _a.theme;
        return (0, react_1.css)({
            display: 'flex',
            flexFlow: 'row wrap',
            gridTemplateColumns: "repeat(".concat(columns, ", 1fr)"),
            gap: gapSize,
            gridAutoRows: "1fr",
            '& .ss__facet-grid-options__option': (_b = {
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    flex: '0 1 auto',
                    border: "1px solid ".concat(((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.primary) || '#333'),
                    textAlign: 'center',
                    wordBreak: 'break-all',
                    boxSizing: 'border-box',
                    padding: '1em 0',
                    width: "calc(100% / ".concat(columns, " - ").concat(2 * Math.round((columns + 2) / 2), "px)"),
                    margin: "0 ".concat(gapSize, " ").concat(gapSize, " 0")
                },
                _b[":nth-of-type(".concat(columns, "n)")] = {
                    marginRight: '0',
                },
                _b['&.ss__facet-grid-options__option--filtered'] = {
                    background: ((_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.primary) || '#ccc',
                    color: (_f = (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.text) === null || _f === void 0 ? void 0 : _f.secondary,
                },
                _b['&:hover:not(.ss__facet-grid-options__option--filtered)'] = {
                    cursor: 'pointer',
                    background: ((_g = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _g === void 0 ? void 0 : _g.hover) || '#f8f8f8',
                },
                _b['& .ss__facet-grid-options__option__value'] = {
                    '&.ss__facet-grid-options__option__value--smaller': {
                        fontSize: '70%',
                    },
                },
                _b),
            '@supports (display: grid)': {
                display: 'grid',
                '& .ss__facet-grid-options__option': {
                    padding: '0',
                    margin: '0',
                    width: 'initial',
                },
                '&::before': {
                    content: '""',
                    width: 0,
                    paddingBottom: '100%',
                    gridRow: '1 / 1',
                    gridColumn: '1 / 1',
                },
                '&> *:first-of-type': {
                    gridRow: '1 / 1',
                    gridColumn: '1 / 1',
                },
            },
        });
    },
};
exports.FacetGridOptions = (0, mobx_react_lite_1.observer)(function (properties) {
    var _a, _b, _c;
    var globalTheme = (0, providers_1.useTheme)();
    var theme = __assign(__assign({}, globalTheme), properties.theme);
    var props = __assign(__assign(__assign({ 
        // default props
        columns: 4, gapSize: '8px' }, (_a = globalTheme === null || globalTheme === void 0 ? void 0 : globalTheme.components) === null || _a === void 0 ? void 0 : _a.facetGridOptions), properties), (_c = (_b = properties.theme) === null || _b === void 0 ? void 0 : _b.components) === null || _c === void 0 ? void 0 : _c.facetGridOptions);
    var values = props.values, columns = props.columns, gapSize = props.gapSize, onClick = props.onClick, previewOnFocus = props.previewOnFocus, valueProps = props.valueProps, facet = props.facet, disableStyles = props.disableStyles, className = props.className, style = props.style;
    var styling = {};
    if (!disableStyles) {
        styling.css = [CSS.grid({ columns: columns, gapSize: gapSize, theme: theme }), style];
    }
    else if (style) {
        styling.css = [style];
    }
    var facetValues = values || (facet === null || facet === void 0 ? void 0 : facet.values);
    return (facetValues === null || facetValues === void 0 ? void 0 : facetValues.length) ? ((0, react_1.jsx)(providers_1.CacheProvider, null,
        (0, react_1.jsx)("div", __assign({}, styling, { className: (0, classnames_1.default)('ss__facet-grid-options', className) }), facetValues.map(function (value) {
            var _a, _b;
            return ((0, react_1.jsx)("a", __assign({ className: (0, classnames_1.default)('ss__facet-grid-options__option', { 'ss__facet-grid-options__option--filtered': value.filtered }), "aria-label": value.filtered
                    ? "remove selected filter ".concat((facet === null || facet === void 0 ? void 0 : facet.label) || '', " - ").concat(value.label)
                    : (facet === null || facet === void 0 ? void 0 : facet.label)
                        ? "filter by ".concat(facet === null || facet === void 0 ? void 0 : facet.label, " - ").concat(value.label)
                        : "filter by ".concat(value.label), href: (_b = (_a = value.url) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.href }, valueProps, { onClick: function (e) {
                    var _a, _b;
                    (_b = (_a = value.url) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.onClick(e);
                    onClick && onClick(e);
                } }, (previewOnFocus ? (0, toolbox_1.createHoverProps)(function () { return (value === null || value === void 0 ? void 0 : value.preview) && value.preview(); }) : {})),
                (0, react_1.jsx)("span", { className: (0, classnames_1.default)('ss__facet-grid-options__option__value', {
                        'ss__facet-grid-options__option__value--smaller': value.label.length > 3,
                    }) }, value.label)));
        })))) : ((0, react_1.jsx)(preact_1.Fragment, null));
});
