import { mergeParams } from '../utils';
export function transformSearchRequest(request) {
    return mergeParams(transformSearchRequest.sorts(request), transformSearchRequest.search(request), transformSearchRequest.filters(request), transformSearchRequest.merchandising(request), transformSearchRequest.pagination(request), transformSearchRequest.siteId(request), transformSearchRequest.facets(request), transformSearchRequest.tracking(request), transformSearchRequest.personalization(request));
}
transformSearchRequest.sorts = (request = {}) => {
    return (request.sorts || []).reduce((acc, sort) => {
        if (!sort.field || !sort.direction || (sort.direction != 'asc' && sort.direction != 'desc')) {
            return acc;
        }
        return {
            ...acc,
            ['sort.' + sort.field]: (acc[sort.field] || []).concat([sort.direction]),
        };
    }, {});
};
transformSearchRequest.search = (request = {}) => {
    const reqSearch = request.search || {};
    const search = {};
    if (reqSearch.query && reqSearch.query.string) {
        search.q = reqSearch.query.string;
    }
    if (reqSearch.subQuery) {
        search.rq = reqSearch.subQuery.trim();
    }
    if (reqSearch.originalQuery) {
        search.originalQuery = reqSearch.originalQuery.trim();
    }
    if (reqSearch.fallbackQuery) {
        search.fallbackQuery = reqSearch.fallbackQuery.trim();
    }
    if (reqSearch.redirectResponse) {
        search.redirectResponse = reqSearch.redirectResponse;
    }
    return search;
};
transformSearchRequest.filters = (request = {}) => {
    return (request.filters || []).reduce((acc, filter) => {
        const baseKey = filter.background ? 'bgfilter' : 'filter';
        if (filter.type == 'value') {
            const key = baseKey + '.' + filter.field;
            return {
                ...acc,
                [key]: (acc[key] || []).concat([filter.value]),
            };
        }
        else if (filter.type == 'range') {
            const keyLow = baseKey + '.' + filter.field + '.low';
            const keyHigh = baseKey + '.' + filter.field + '.high';
            const low = filter?.value?.low ?? '*';
            const high = filter?.value?.high ?? '*';
            return {
                ...acc,
                [keyLow]: (acc[keyLow] || []).concat([low]),
                [keyHigh]: (acc[keyHigh] || []).concat([high]),
            };
        }
        return acc;
    }, {});
};
transformSearchRequest.merchandising = (request = {}) => {
    const reqMerch = request.merchandising || {};
    const merch = reqMerch.disabled ? { disableMerchandising: true } : {};
    if (reqMerch.landingPage) {
        merch['landing-page'] = reqMerch.landingPage;
    }
    if (reqMerch.segments instanceof Array && reqMerch.segments.length) {
        merch['tag'] = reqMerch.segments.map((segment) => {
            return `merch.segment/${segment}`;
        });
    }
    if (typeof reqMerch.intellisuggest == 'boolean') {
        merch['intellisuggest'] = reqMerch.intellisuggest;
    }
    if (reqMerch.disableInlineBanners) {
        merch['disableInlineBanners'] = reqMerch.disableInlineBanners;
    }
    return merch;
};
transformSearchRequest.pagination = (request = {}) => {
    const pagination = request.pagination || {};
    const params = {};
    if (pagination.page) {
        params.page = pagination.page;
    }
    if (pagination.pageSize || pagination.pageSize === 0) {
        params.resultsPerPage = pagination.pageSize;
    }
    return params;
};
transformSearchRequest.siteId = (request = {}) => {
    if (request.siteId) {
        return { siteId: request.siteId };
    }
    return {};
};
transformSearchRequest.facets = (request = {}) => {
    const facets = request.facets || {};
    const params = {};
    if (facets.include && facets.include.length && facets.exclude && facets.exclude.length) {
        throw 'cannot use facet include and exclude at the same time';
    }
    if (facets.include?.length) {
        params.includedFacets = facets.include;
    }
    if (facets.exclude?.length) {
        params.excludedFacets = facets.exclude;
    }
    if (facets.autoDrillDown === false) {
        params.disableFacetDrillDown = true;
    }
    return params;
};
transformSearchRequest.tracking = (request = {}) => {
    const reqTracking = request.tracking || {};
    const params = {};
    if (reqTracking.userId) {
        params.userId = reqTracking.userId;
    }
    if (reqTracking.domain) {
        params.domain = reqTracking.domain;
    }
    if (reqTracking.sessionId) {
        params.sessionId = reqTracking.sessionId;
    }
    if (reqTracking.pageLoadId) {
        params.pageLoadId = reqTracking.pageLoadId;
    }
    return params;
};
transformSearchRequest.personalization = (request = {}) => {
    const personalization = request.personalization || {};
    const params = {};
    if (personalization.disabled) {
        params.skipPersonalization = personalization.disabled;
    }
    if (personalization.cart) {
        params.cart = personalization.cart;
    }
    if (personalization.lastViewed) {
        params.lastViewed = personalization.lastViewed;
    }
    if (personalization.shopper) {
        params.shopper = personalization.shopper;
    }
    return params;
};
